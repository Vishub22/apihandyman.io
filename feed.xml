<?xml version="1.0" encoding="utf-8"?><?xml-stylesheet type="text/xml" href="https://apihandyman.io/feed.xslt.xml"?><feed xmlns="http://www.w3.org/2005/Atom"><generator uri="http://jekyllrb.com" version="3.3.1">Jekyll</generator><link href="https://apihandyman.io/feed.xml" rel="self" type="application/atom+xml" /><link href="https://apihandyman.io/" rel="alternate" type="text/html" /><updated>2017-03-05T15:35:30+00:00</updated><id>https://apihandyman.io//</id><title type="html">API Handyman</title><subtitle>{&quot;input&quot; : &quot;learn&quot;, &quot;output&quot; : &quot;share&quot;}</subtitle><entry><title type="html">Google API Design Guide added to the API Stylebook</title><link href="https://apihandyman.io/google-api-design-guide-added-to-the-api-stylebook/" rel="alternate" type="text/html" title="Google API Design Guide added to the API Stylebook" /><published>2017-03-05T00:00:00+00:00</published><updated>2017-03-05T00:00:00+00:00</updated><id>https://apihandyman.io/google-api-design-guide-added-to-the-api-stylebook</id><content type="html" xml:base="https://apihandyman.io/google-api-design-guide-added-to-the-api-stylebook/">&lt;p&gt;I’ve just added the Google API Design Guide to the &lt;a href=&quot;http://apistylebook.com/blog/google-api-design-guide-added-on-the-api-stylebook&quot;&gt;API Stylebook&lt;/a&gt;.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;This guide is slightly different from the other ones because it deals with REST and RPC API design focusing on gRPC APIs using Protocol Buffers v3.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;To discover this API design guide and a short review, let’s go to the &lt;a href=&quot;http://apistylebook.com/blog/google-api-design-guide-added-on-the-api-stylebook&quot;&gt;API Stylebook blog&lt;/a&gt;.&lt;/p&gt;</content><author><name>Arnaud Lauret</name></author><category term="elsewhere" /><category term="Design" /><category term="API Stylebook" /><summary type="html">I’ve just added the Google API Design Guide to the API Stylebook.


  This guide is slightly different from the other ones because it deals with REST and RPC API design focusing on gRPC APIs using Protocol Buffers v3.


To discover this API design guide and a short review, let’s go to the API Stylebook blog.</summary></entry><entry><title type="html">Writing OpenAPI (Swagger) Specification Tutorial - Part 9 - Extending the OpenAPI specification</title><link href="https://apihandyman.io/writing-openapi-swagger-specification-tutorial-part-9-extending-the-openapi-specification/" rel="alternate" type="text/html" title="Writing OpenAPI (Swagger) Specification Tutorial - Part 9 - Extending the OpenAPI specification" /><published>2017-02-19T00:00:00+00:00</published><updated>2017-02-19T00:00:00+00:00</updated><id>https://apihandyman.io/writing-openapi-swagger-specification-tutorial-part-9-extending-the-openapi-specification</id><content type="html" xml:base="https://apihandyman.io/writing-openapi-swagger-specification-tutorial-part-9-extending-the-openapi-specification/">&lt;p&gt;This is the end, my OpenAPI friends, the end. The end? Not really. This last part of the OpenAPI tutorial is a new beginning. With previous parts we have learned to master the OpenAPI specification but there’s a last thing to learn to unleash its full power: extensions. This format is easily extensible, it allows to add custom data within an API description. But for what purposes? Let’s have a glimpse of these extensions endless possibilities.
&lt;!--more--&gt;&lt;/p&gt;

&lt;h1 id=&quot;writing-openapi-fka-swagger-specification-tutorial&quot;&gt;Writing OpenAPI (fka Swagger) Specification tutorial&lt;/h1&gt;
&lt;p&gt;This tutorial is composed of several posts:&lt;/p&gt;

&lt;ul&gt;
  
    
    &lt;li&gt;&lt;a class=&quot;page-link&quot; href=&quot;/writing-openapi-swagger-specification-tutorial-part-1-introduction/&quot;&gt;Part 1 - Introduction&lt;/a&gt;&lt;/li&gt;
    
  
    
    &lt;li&gt;&lt;a class=&quot;page-link&quot; href=&quot;/writing-openapi-swagger-specification-tutorial-part-2-the-basics/&quot;&gt;Part 2 - The basics&lt;/a&gt;&lt;/li&gt;
    
  
    
    &lt;li&gt;&lt;a class=&quot;page-link&quot; href=&quot;/writing-openapi-swagger-specification-tutorial-part-3-simplifying-specification-file/&quot;&gt;Part 3 - Simplifying specification file&lt;/a&gt;&lt;/li&gt;
    
  
    
    &lt;li&gt;&lt;a class=&quot;page-link&quot; href=&quot;/writing-openapi-swagger-specification-tutorial-part-4-advanced-data-modeling/&quot;&gt;Part 4 - Advanced Data&lt;/a&gt;&lt;/li&gt;
    
  
    
    &lt;li&gt;&lt;a class=&quot;page-link&quot; href=&quot;/writing-openapi-swagger-specification-tutorial-part-5-advanced-input-and-output-modeling/&quot;&gt;Part 5 - Advanced Input And Output Modeling&lt;/a&gt;&lt;/li&gt;
    
  
    
    &lt;li&gt;&lt;a class=&quot;page-link&quot; href=&quot;/writing-openapi-swagger-specification-tutorial-part-6-defining-security/&quot;&gt;Part 6 - Defining Security&lt;/a&gt;&lt;/li&gt;
    
  
    
    &lt;li&gt;&lt;a class=&quot;page-link&quot; href=&quot;/writing-openapi-swagger-specification-tutorial-part-7-documentation/&quot;&gt;Part 7 - Documentation&lt;/a&gt;&lt;/li&gt;
    
  
    
    &lt;li&gt;&lt;a class=&quot;page-link&quot; href=&quot;/writing-openapi-swagger-specification-tutorial-part-8-splitting-specification-file/&quot;&gt;Part 8 - Splitting specification file&lt;/a&gt;&lt;/li&gt;
    
  
    
    &lt;li&gt;&lt;strong&gt;Part 9 - Extending the OpenAPI specification&lt;/strong&gt;&lt;/li&gt;
    
  
&lt;/ul&gt;

&lt;p&gt;If you’re a bit lost in the &lt;a href=&quot;https://github.com/OAI/OpenAPI-Specification/blob/master/versions/2.0.md&quot;&gt;specification&lt;/a&gt;, take a look at my &lt;em&gt;visual documentation:&lt;/em&gt;&lt;/p&gt;
&lt;div&gt;
      &lt;img src=&quot;/images/writing-openapi-swagger-specification-tutorial/openapi-specification-visual-documentation.png&quot; /&gt;
      &lt;p class=&quot;img-label&quot;&gt;&lt;a href=&quot;http://openapi-specification-visual-documentation.apihandyman.io/&quot;&gt;OpenAPI Specification Visual Documentation&lt;/a&gt;&lt;/p&gt;
    &lt;/div&gt;

&lt;p&gt;In this final part we’ll learn how to extend the OpenAPI specification to add custom data and most important, we’ll discover why we would do that.&lt;/p&gt;

&lt;h1 id=&quot;one-size-may-not-fit-all&quot;&gt;One size may not fit all&lt;/h1&gt;

&lt;p&gt;After working for a while with the OpenAPI format, you WILL want to add other data into you API descriptions, this is your destiny. Fortunately, the creator of the format had foreseen that:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;While the Swagger Specification tries to accommodate most use cases, additional data can be added to extend the specification at certain points.&lt;br /&gt;
&lt;em&gt;&lt;a href=&quot;https://github.com/OAI/OpenAPI-Specification/blob/master/versions/2.0.md#vendorExtensions&quot;&gt;OpenAPI Specification&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Once known as &lt;em&gt;Vendor Extensions&lt;/em&gt;, these &lt;em&gt;Specification Extensions&lt;/em&gt; can be created by anyone, don’t be fooled by their original name.&lt;/p&gt;

&lt;h1 id=&quot;custom-property&quot;&gt;Custom property&lt;/h1&gt;

&lt;p&gt;To add a custom property with an OpenAPI definition file you only need to prefix its name by &lt;code&gt;x-&lt;/code&gt;:&lt;/p&gt;

&lt;div&gt;
  &lt;div class=&quot;code-toolbar&quot;&gt;
    &lt;div class=&quot;btn-group&quot; role=&quot;group&quot; aria-label=&quot;...&quot;&gt;
      
      &lt;button type=&quot;button&quot; class=&quot;btn btn-default btn-copy&quot;&gt;&lt;i class=&quot;fa fa-clipboard&quot; aria-hidden=&quot;true&quot;&gt;&lt;/i&gt;&lt;/button&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;pre class=&quot;language-yaml line-numbers&quot;&gt;&lt;code&gt;x-&amp;lt;what you want&amp;gt;: &amp;lt;value&amp;gt;&lt;/code&gt;&lt;/pre&gt;
  
&lt;/div&gt;

&lt;p&gt;Here’s a custom property &lt;code&gt;x-custom-info&lt;/code&gt; in the &lt;code&gt;info&lt;/code&gt; section of an OpenAPI file:&lt;/p&gt;

&lt;div&gt;
  &lt;!-- codeblocksize: 20 --&gt;
  &lt;div class=&quot;code-toolbar&quot;&gt;
    &lt;div class=&quot;btn-group&quot; role=&quot;group&quot; aria-label=&quot;...&quot;&gt;
      
      &lt;button type=&quot;button&quot; class=&quot;btn btn-default&quot;&gt;&lt;a target=&quot;_blank&quot; href=&quot;/code/writing-openapi-swagger-specification-tutorial/simple_openapi_specification_53_custom_property.yaml&quot;&gt;&lt;i class=&quot;fa fa-file-text-o&quot; aria-hidden=&quot;true&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/button&gt;
      &lt;button type=&quot;button&quot; class=&quot;btn btn-default btn-copy&quot;&gt;&lt;i class=&quot;fa fa-clipboard&quot; aria-hidden=&quot;true&quot;&gt;&lt;/i&gt;&lt;/button&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;pre class=&quot;language-yaml line-numbers&quot; data-line=&quot;5&quot; data-start=&quot;3&quot;&gt;&lt;code&gt;info:
  version: 1.0.0
  title: x-tended OpenAPI Specification
  description: An OpenAPI specification containing custom data
  x-custom-info: Here's some custom information
&lt;/code&gt;&lt;/pre&gt;
  
&lt;/div&gt;

&lt;p&gt;If a standard Swagger/OpenAPI parser encounters such property, it will ignore it because it’s prefixed with &lt;code&gt;x-&lt;/code&gt;. This &lt;code&gt;info&lt;/code&gt; section with a custom property is valid:&lt;/p&gt;

&lt;div&gt;
      &lt;img src=&quot;/images/writing-openapi-swagger-specification-tutorial-part-9-extending-the-openapi-specification/custom-property.png&quot; /&gt;
      
    &lt;/div&gt;

&lt;h1 id=&quot;custom-object&quot;&gt;Custom object&lt;/h1&gt;

&lt;p&gt;Extensions are not only meant to be atomic properties, they can also be objects:&lt;/p&gt;

&lt;div&gt;
  &lt;!-- codeblocksize: 20 --&gt;
  &lt;div class=&quot;code-toolbar&quot;&gt;
    &lt;div class=&quot;btn-group&quot; role=&quot;group&quot; aria-label=&quot;...&quot;&gt;
      
      &lt;button type=&quot;button&quot; class=&quot;btn btn-default&quot;&gt;&lt;a target=&quot;_blank&quot; href=&quot;/code/writing-openapi-swagger-specification-tutorial/simple_openapi_specification_54_custom_object.yaml&quot;&gt;&lt;i class=&quot;fa fa-file-text-o&quot; aria-hidden=&quot;true&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/button&gt;
      &lt;button type=&quot;button&quot; class=&quot;btn btn-default btn-copy&quot;&gt;&lt;i class=&quot;fa fa-clipboard&quot; aria-hidden=&quot;true&quot;&gt;&lt;/i&gt;&lt;/button&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;pre class=&quot;language-yaml line-numbers&quot; data-line=&quot;5-11&quot; data-start=&quot;3&quot;&gt;&lt;code&gt;info:
  version: 1.0.0
  title: x-tended OpenAPI Specification
  description: An OpenAPI specification containing custom data
  x-custom-info:
    comment: Here's some custom information
    authors:
      - name: John Doe
        email: john@doe.com
      - name: Jane Doe
        email: jane@doe.com
&lt;/code&gt;&lt;/pre&gt;
  
&lt;/div&gt;

&lt;p&gt;Note that sub-properties names do not need to be prefixed with &lt;code&gt;x-&lt;/code&gt;.&lt;/p&gt;

&lt;h1 id=&quot;extensions-almost-anywhere&quot;&gt;Extensions almost anywhere&lt;/h1&gt;

&lt;p&gt;These custom data structures can be added almost anywhere in the specification. You can test if a location is ok by simply adding your extension where you want within the online editor and see if the validator complains or not.&lt;/p&gt;

&lt;p&gt;You can also take a look at my &lt;a href=&quot;http://openapi-specification-visual-documentation.apihandyman.io/&quot;&gt;visual documentation&lt;/a&gt; to check if the location you want to use allows extension or not:&lt;/p&gt;

&lt;div&gt;
      &lt;img src=&quot;/images/writing-openapi-swagger-specification-tutorial-part-9-extending-the-openapi-specification/almost-anywhere.png&quot; /&gt;
      
    &lt;/div&gt;

&lt;p&gt;Here’s an example using various location (non-exhaustive example):&lt;/p&gt;

&lt;div&gt;
  &lt;!-- codeblocksize: 20 --&gt;
  &lt;div class=&quot;code-toolbar&quot;&gt;
    &lt;div class=&quot;btn-group&quot; role=&quot;group&quot; aria-label=&quot;...&quot;&gt;
      &lt;button type=&quot;button&quot; class=&quot;btn btn-default&quot; onclick=&quot;toggle(this, this.parentElement.parentElement.parentElement.children[1], this.parentElement.parentElement.parentElement.children[2].children[0])&quot;&gt;&lt;i class=&quot;fa fa-expand&quot; aria-hidden=&quot;true&quot;&gt;&lt;/i&gt;&lt;/button&gt;
      &lt;button type=&quot;button&quot; class=&quot;btn btn-default&quot;&gt;&lt;a target=&quot;_blank&quot; href=&quot;/code/writing-openapi-swagger-specification-tutorial/simple_openapi_specification_55_extensions_almost_anywhere.yaml&quot;&gt;&lt;i class=&quot;fa fa-file-text-o&quot; aria-hidden=&quot;true&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/button&gt;
      &lt;button type=&quot;button&quot; class=&quot;btn btn-default btn-copy&quot;&gt;&lt;i class=&quot;fa fa-clipboard&quot; aria-hidden=&quot;true&quot;&gt;&lt;/i&gt;&lt;/button&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;pre class=&quot;language-yaml line-numbers code-collapsed&quot; data-line=&quot;3,9-15,24,32,37&quot;&gt;&lt;code&gt;swagger: '2.0'

x-root: some custom root data

info:
  version: 1.0.0
  title: x-tended OpenAPI Specification
  description: An OpenAPI specification containing custom data
  x-custom-info:
    comment: Here's some custom information
    authors:
      - name: John Doe
        email: john@doe.com
      - name: Jane Doe
        email: jane@doe.com

paths:
  /resources:
    get:
      description: gets some resource
      responses:
        200:
          description: everything is ok
          x-custom-response-data: I told you everything was really OK!
          schema:
            type: array
            items:
              $ref: &quot;#/definitions/Resource&quot;

definitions:
  Resource:
    x-custom-definition-data: some.dummy.class.Resource
    properties:
      data:
        description: some data
        type: string
        x-custom-property-data: More blah blah about this property&lt;/code&gt;&lt;/pre&gt;
  &lt;div class=&quot;code-bottom-toolbar&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;btn btn-default btn-block&quot; onclick=&quot;toggle(this, this.parentElement.parentElement.children[1], this.parentElement.parentElement.children[0].children[0].children[0], true)&quot;&gt;&lt;i class=&quot;fa fa-expand&quot; aria-hidden=&quot;true&quot;&gt;&lt;/i&gt;&lt;/button&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;h1 id=&quot;why-customizing-the-openapi-specification&quot;&gt;Why customizing the OpenAPI specification?&lt;/h1&gt;

&lt;p&gt;So, adding custom information within an OpenAPI specification file is fairly easy. But the question is less about the how and more about the why. Why would you add custom data to your OpenAPI files?&lt;/p&gt;

&lt;p&gt;You can use some extensions provided by open source or commercial tools or create your own. You can simply add custom data without processing them for documentation purpose or use these informations to generate documentation, client code, server code or tests or even configure some tools.&lt;/p&gt;

&lt;p&gt;Let’s see some examples.  &lt;br /&gt;
&lt;em&gt;nb: This post is not a sponsored one.&lt;/em&gt;&lt;/p&gt;

&lt;h1 id=&quot;example-1-documentation&quot;&gt;Example 1: Documentation&lt;/h1&gt;
&lt;p&gt;&lt;a href=&quot;https://docs.gelato.io/guides/control-grouping-with-swagger&quot;&gt;Gelato, the Mashape Developer Portal solution&lt;/a&gt;, uses the &lt;a href=&quot;https://docs.gelato.io/guides/control-grouping-with-swagger&quot;&gt;&lt;code&gt;x-gelato-group&lt;/code&gt;&lt;/a&gt; extension to group operations in the portal navigation.&lt;/p&gt;

&lt;div&gt;
      &lt;img src=&quot;/images/writing-openapi-swagger-specification-tutorial-part-9-extending-the-openapi-specification/gelato.png&quot; /&gt;
      
    &lt;/div&gt;

&lt;p&gt;Of course, as an OpenAPI expert you would have use tags to do that. Beware to not reinvent the wheel when creating your extensions.&lt;/p&gt;

&lt;h1 id=&quot;example-2-client-code-generation&quot;&gt;Example 2: Client code generation&lt;/h1&gt;

&lt;p&gt;&lt;a href=&quot;https://docs.apimatic.io/advanced/swagger-test-cases-extensions/&quot;&gt;API Matic, a SDK/DX kits generator&lt;/a&gt; uses extension ton control SDK generation.&lt;/p&gt;

&lt;div&gt;
      &lt;img src=&quot;/images/writing-openapi-swagger-specification-tutorial-part-9-extending-the-openapi-specification/apimatic.png&quot; /&gt;
      
    &lt;/div&gt;

&lt;h1 id=&quot;example-3-server-code-generation&quot;&gt;Example 3: Server code generation&lt;/h1&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/swagger-api/swagger-node&quot;&gt;Swagger Node, a node module which help to build API implementation with a design first approach&lt;/a&gt; uses a &lt;code&gt;x-swagger-router-controller&lt;/code&gt; extension to link an API endpoint to its controller implementation.&lt;/p&gt;

&lt;div&gt;
      &lt;img src=&quot;/images/writing-openapi-swagger-specification-tutorial-part-9-extending-the-openapi-specification/swagger-node.png&quot; /&gt;
      
    &lt;/div&gt;

&lt;h1 id=&quot;example-4-api-gateway-configuration&quot;&gt;Example 4: API gateway configuration&lt;/h1&gt;

&lt;p&gt;Not only the AWS API gateway allows to import a Swagger/OpenAPI file but it also provides a &lt;a href=&quot;(http://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-swagger-extensions.html)&quot;&gt;complete set of extensions&lt;/a&gt; to configure how the API is linked to backend systems (like lambda).&lt;/p&gt;

&lt;div&gt;
      &lt;img src=&quot;/images/writing-openapi-swagger-specification-tutorial-part-9-extending-the-openapi-specification/aws-api-gateway.png&quot; /&gt;
      
    &lt;/div&gt;

&lt;h1 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h1&gt;
&lt;p&gt;This post concludes the OpenAPI/Swagger specification tutorial. You master now every single aspect of the OpenAPI specification and with this last post I hope to have given you some ideas to be creative to include this format in each step of the API lifecycle.&lt;/p&gt;</content><author><name>Arnaud Lauret</name></author><category term="posts" /><category term="OpenAPI" /><category term="Swagger" /><category term="API Specification" /><category term="Documentation" /><category term="API First" /><summary type="html">This is the end, my OpenAPI friends, the end. The end? Not really. This last part of the OpenAPI tutorial is a new beginning. With previous parts we have learned to master the OpenAPI specification but there’s a last thing to learn to unleash its full power: extensions. This format is easily extensible, it allows to add custom data within an API description. But for what purposes? Let’s have a glimpse of these extensions endless possibilities.</summary></entry><entry><title type="html">…And GraphQL for all? A few things to think about before blindly dumping REST for GraphQL</title><link href="https://apihandyman.io/and-graphql-for-all-a-few-things-to-think-about-before-blindly-dumping-rest-for-graphql/" rel="alternate" type="text/html" title="...And GraphQL for all? A few things to think about before blindly dumping REST for GraphQL" /><published>2017-01-22T00:00:00+00:00</published><updated>2017-01-22T00:00:00+00:00</updated><id>https://apihandyman.io/and-graphql-for-all</id><content type="html" xml:base="https://apihandyman.io/and-graphql-for-all-a-few-things-to-think-about-before-blindly-dumping-rest-for-graphql/">&lt;p&gt;GraphQL is new. GraphQL is cool. Look! Github dumped REST for it! We MUST do it too!&lt;br /&gt;
Well, why not. GraphQL could be a great tool, but like any tool, you don’t choose it &lt;em&gt;just because&lt;/em&gt;. You choose it because it solves a problem in a given context. You choose it knowing its strengths and weaknesses.&lt;/p&gt;

&lt;p&gt;While discovering what is GraphQL we will see what REST API providers should think about before blindly dumping REST for it. From design and implementation to pricing model and analytics down to developers experience and implementations, choosing an API design style will have impact on the whole API lifecycle. Therefore, this choice must be an enligthned one and not based on simple beliefs.&lt;!--more--&gt;&lt;/p&gt;

&lt;h1 id=&quot;informed-choice&quot;&gt;Informed choice&lt;/h1&gt;
&lt;p&gt;Before talking about GraphQL, I would like to ask you two really important questions.&lt;/p&gt;

&lt;p&gt;The first one is:&lt;/p&gt;
&lt;div&gt;
      &lt;img src=&quot;/images/and-graphql-for-all-a-few-things-to-think-about-before-blindly-dumping-rest-for-graphql/metallica-vs-iron-maiden.png&quot; /&gt;
      &lt;p class=&quot;img-label&quot;&gt;Metallica or Iron Maiden. Who is the best heavy metal band?&lt;/p&gt;
    &lt;/div&gt;

&lt;p&gt;Iron Maiden of course. You may disagre, that is your absolute right. Metallica could also the best metal band… For you. The answer to this question is only a matter of personnal feelings.&lt;/p&gt;

&lt;p&gt;The second question is:&lt;/p&gt;
&lt;div&gt;
      &lt;img src=&quot;/images/and-graphql-for-all-a-few-things-to-think-about-before-blindly-dumping-rest-for-graphql/hammer-vs-screndriver.png&quot; /&gt;
      &lt;p class=&quot;img-label&quot;&gt;Hammer or screwdriver. Which is the best tool?&lt;/p&gt;
    &lt;/div&gt;

&lt;p&gt;It’s a pretty dumb question isn’t it? The only possible answer to this question is &lt;em&gt;it depends&lt;/em&gt;.&lt;br /&gt;
It depends on the tools capabilities and the context (what you want to do, what is your environnement, your budget, your objective).&lt;/p&gt;

&lt;p&gt;Without context, my hammer cannot be better than your screwdriver.&lt;/p&gt;

&lt;p&gt;Acting as a fanboy may be acceptable when it comes to choose your favorite heavy metal band. But it’s definitely not a good idea when it comes to choose a tool, a product or an API style… From design and implementation to pricing model and analytics down to developers experience and backend implementations, choosing an API design style will have impact on the whole API lifecycle.&lt;/p&gt;

&lt;p&gt;So before blindly yelling &lt;em&gt;…and GraphQL for all!&lt;/em&gt; just because Facebook created it and Github decided to use it, remember that GraphQL, just like REST, is only a tool. A tool that you choose with a purpose within a certain context.&lt;/p&gt;

&lt;p&gt;Let’s dig into GraphQL and see what we should think about from a REST API provider prespective when evaluating it as a possible solution for our API projects.&lt;/p&gt;

&lt;h1 id=&quot;what-is-graphql&quot;&gt;What is GraphQL?&lt;/h1&gt;
&lt;p&gt;GraphQL is a query language for data created in 2012 by Facebook when switching to native mobile applications.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;We were frustrated with the differences between the data we wanted to use in our apps and the server queries they required.&lt;br /&gt;
GraphQL was our opportunity to rethink mobile app data-fetching from the perspective of product designers and developers. It moved the focus of development to the client apps, where designers and developers spend their time and attention.&lt;br /&gt;
&lt;em&gt;&lt;a href=&quot;https://code.facebook.com/posts/1691455094417024/graphql-a-data-query-language/&quot;&gt;GraphQL, a data query language. Post by Lee Byron&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Facebook &lt;a href=&quot;https://code.facebook.com/posts/1691455094417024/graphql-a-data-query-language/&quot;&gt;open sourced it in 2015&lt;/a&gt; and companies like &lt;a href=&quot;http://graphql.org/users/&quot;&gt;Pinterest, Coursera or Github&lt;/a&gt; started to use it.&lt;/p&gt;

&lt;p&gt;Let’s take a look at &lt;a href=&quot;https://developer.github.com/early-access/graphql/&quot;&gt;Github GraphQL API&lt;/a&gt; to discover GraphQL.&lt;/p&gt;

&lt;h2 id=&quot;what-you-want-is-what-you-get&quot;&gt;What you want is what you get&lt;/h2&gt;
&lt;p&gt;GraphQL motto is&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;What you want is what you get&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;querying-data&quot;&gt;Querying data&lt;/h3&gt;
&lt;p&gt;The Github GraphQL API propose a &lt;em&gt;viewer&lt;/em&gt; query, returning the connected User data. This query is the equivalent of &lt;code&gt;GET /user&lt;/code&gt; in the Github REST API. The difference with the REST query is that I can select the properties I want to retrieve.&lt;/p&gt;

&lt;p&gt;With this query, I retrieve only the viewer’s name and avatarURL.&lt;/p&gt;

&lt;div&gt;
  &lt;div class=&quot;code-toolbar&quot;&gt;
    &lt;div class=&quot;btn-group&quot; role=&quot;group&quot; aria-label=&quot;...&quot;&gt;
      
      &lt;button type=&quot;button&quot; class=&quot;btn btn-default btn-copy&quot;&gt;&lt;i class=&quot;fa fa-clipboard&quot; aria-hidden=&quot;true&quot;&gt;&lt;/i&gt;&lt;/button&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;pre class=&quot;language-graphql line-numbers&quot;&gt;&lt;code&gt;{
  viewer {
    name
    avatarURL
  }
}&lt;/code&gt;&lt;/pre&gt;
  
&lt;/div&gt;

&lt;p&gt;To get server’s response I have to POST this query in a JSON object to the GraphQL endpoint:&lt;/p&gt;

&lt;div&gt;
  &lt;div class=&quot;code-toolbar&quot;&gt;
    &lt;div class=&quot;btn-group&quot; role=&quot;group&quot; aria-label=&quot;...&quot;&gt;
      
      &lt;button type=&quot;button&quot; class=&quot;btn btn-default btn-copy&quot;&gt;&lt;i class=&quot;fa fa-clipboard&quot; aria-hidden=&quot;true&quot;&gt;&lt;/i&gt;&lt;/button&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;pre class=&quot;language-text line-numbers&quot;&gt;&lt;code&gt;POST https://api.github.com/graphql
{
 &amp;quot;query&amp;quot;: &amp;quot;{ me: viewer { name avatarURL} }&amp;quot;
}&lt;/code&gt;&lt;/pre&gt;
  
&lt;/div&gt;

&lt;p&gt;The result is in JSON format and the requested data are located in the data property. These data mirror perfectly my query.&lt;/p&gt;

&lt;div&gt;
  &lt;div class=&quot;code-toolbar&quot;&gt;
    &lt;div class=&quot;btn-group&quot; role=&quot;group&quot; aria-label=&quot;...&quot;&gt;
      
      &lt;button type=&quot;button&quot; class=&quot;btn btn-default btn-copy&quot;&gt;&lt;i class=&quot;fa fa-clipboard&quot; aria-hidden=&quot;true&quot;&gt;&lt;/i&gt;&lt;/button&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;pre class=&quot;language-json line-numbers&quot;&gt;&lt;code&gt;{
  &amp;quot;data&amp;quot;: {
    &amp;quot;viewer&amp;quot;: {
      &amp;quot;name&amp;quot;: &amp;quot;Arnaud Lauret&amp;quot;,
      &amp;quot;avatarURL&amp;quot;: &amp;quot;https://avatars0.githubusercontent.com/u/10104551?v=3&amp;quot;
    }
  }
}&lt;/code&gt;&lt;/pre&gt;
  
&lt;/div&gt;

&lt;h3 id=&quot;customizing-responses&quot;&gt;Customizing responses&lt;/h3&gt;
&lt;p&gt;You can create more custom data structures by using aliases.&lt;br /&gt;
Here, &lt;code&gt;viewer&lt;/code&gt; becomes &lt;code&gt;me&lt;/code&gt;, &lt;code&gt;name&lt;/code&gt; becomes &lt;code&gt;fullname&lt;/code&gt; and &lt;code&gt;avatarURL&lt;/code&gt; becomes &lt;code&gt;picture&lt;/code&gt;.&lt;/p&gt;

&lt;div&gt;
  &lt;div class=&quot;code-toolbar&quot;&gt;
    &lt;div class=&quot;btn-group&quot; role=&quot;group&quot; aria-label=&quot;...&quot;&gt;
      
      &lt;button type=&quot;button&quot; class=&quot;btn btn-default btn-copy&quot;&gt;&lt;i class=&quot;fa fa-clipboard&quot; aria-hidden=&quot;true&quot;&gt;&lt;/i&gt;&lt;/button&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;pre class=&quot;language-graphql line-numbers&quot;&gt;&lt;code&gt;{
  me: viewer {
    fullname: name
    picture: avatarURL
  }
}&lt;/code&gt;&lt;/pre&gt;
  
&lt;/div&gt;

&lt;p&gt;The result is exactly what I requested:&lt;/p&gt;

&lt;div&gt;
  &lt;div class=&quot;code-toolbar&quot;&gt;
    &lt;div class=&quot;btn-group&quot; role=&quot;group&quot; aria-label=&quot;...&quot;&gt;
      
      &lt;button type=&quot;button&quot; class=&quot;btn btn-default btn-copy&quot;&gt;&lt;i class=&quot;fa fa-clipboard&quot; aria-hidden=&quot;true&quot;&gt;&lt;/i&gt;&lt;/button&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;pre class=&quot;language-json line-numbers&quot;&gt;&lt;code&gt;{
  &amp;quot;data&amp;quot;: {
    &amp;quot;me&amp;quot;: {
      &amp;quot;fullname&amp;quot;: &amp;quot;Arnaud Lauret&amp;quot;,
      &amp;quot;picture&amp;quot;: &amp;quot;https://avatars0.githubusercontent.com/u/10104551?v=3&amp;quot;
    }
  }
}&lt;/code&gt;&lt;/pre&gt;
  
&lt;/div&gt;

&lt;h3 id=&quot;querying-sub-resources&quot;&gt;Querying sub-resources&lt;/h3&gt;
&lt;p&gt;Now let’s say I want to retrieve some viewer’s data and the names of his last two created repositories.&lt;/p&gt;

&lt;p&gt;To do that with the Github REST API, I need two calls:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;GET /user&lt;/code&gt; to get the viewer information&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;GET /user/repos?sort=created&amp;amp;direction=desc&lt;/code&gt; to get the repositories list. Unfortunately the API do not propose a length parameter for the list&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The responses will contains all available data, the REST API do not propose to filter returned properties.&lt;/p&gt;

&lt;p&gt;With GraphQL, I can do that with a single query:&lt;/p&gt;

&lt;div&gt;
  &lt;div class=&quot;code-toolbar&quot;&gt;
    &lt;div class=&quot;btn-group&quot; role=&quot;group&quot; aria-label=&quot;...&quot;&gt;
      
      &lt;button type=&quot;button&quot; class=&quot;btn btn-default btn-copy&quot;&gt;&lt;i class=&quot;fa fa-clipboard&quot; aria-hidden=&quot;true&quot;&gt;&lt;/i&gt;&lt;/button&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;pre class=&quot;language-graphql line-numbers&quot;&gt;&lt;code&gt;{
  me: viewer {
    fullname: name
    picture: avatarURL
    repositories(first: 2, orderBy: {field: CREATED_AT, direction: DESC}) {
      edges {
        node {
          name
        }
      }
    }
  }
}&lt;/code&gt;&lt;/pre&gt;
  
&lt;/div&gt;

&lt;p&gt;I just have to add the repositories property in my viewer query with the good parameters and indicate the properties I want to get back for each repository. The response contains exactly what I requested.&lt;/p&gt;

&lt;div&gt;
  &lt;div class=&quot;code-toolbar&quot;&gt;
    &lt;div class=&quot;btn-group&quot; role=&quot;group&quot; aria-label=&quot;...&quot;&gt;
      &lt;button type=&quot;button&quot; class=&quot;btn btn-default&quot; onclick=&quot;toggle(this, this.parentElement.parentElement.parentElement.children[1], this.parentElement.parentElement.parentElement.children[2].children[0])&quot;&gt;&lt;i class=&quot;fa fa-expand&quot; aria-hidden=&quot;true&quot;&gt;&lt;/i&gt;&lt;/button&gt;
      &lt;button type=&quot;button&quot; class=&quot;btn btn-default btn-copy&quot;&gt;&lt;i class=&quot;fa fa-clipboard&quot; aria-hidden=&quot;true&quot;&gt;&lt;/i&gt;&lt;/button&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;pre class=&quot;language-json line-numbers code-collapsed&quot;&gt;&lt;code&gt;{
  &amp;quot;data&amp;quot;: {
    &amp;quot;me&amp;quot;: {
      &amp;quot;fullname&amp;quot;: &amp;quot;Arnaud Lauret&amp;quot;,
      &amp;quot;picture&amp;quot;: &amp;quot;https://avatars0.githubusercontent.com/u/10104551?v=3&amp;quot;,
      &amp;quot;repositories&amp;quot;: {
        &amp;quot;edges&amp;quot;: [
          {
            &amp;quot;node&amp;quot;: {
              &amp;quot;name&amp;quot;: &amp;quot;apistylebook-api&amp;quot;
            }
          },
          {
            &amp;quot;node&amp;quot;: {
              &amp;quot;name&amp;quot;: &amp;quot;restfest-videos-data-postprocessor&amp;quot;
            }
          }
        ]
      }
    }
  }
}&lt;/code&gt;&lt;/pre&gt;
  &lt;div class=&quot;code-bottom-toolbar&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;btn btn-default btn-block&quot; onclick=&quot;toggle(this, this.parentElement.parentElement.children[1], this.parentElement.parentElement.children[0].children[0].children[0], true)&quot;&gt;&lt;i class=&quot;fa fa-expand&quot; aria-hidden=&quot;true&quot;&gt;&lt;/i&gt;&lt;/button&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;h3 id=&quot;aggregating-queries&quot;&gt;Aggregating queries&lt;/h3&gt;
&lt;p&gt;Not only can I seamlessly retrieve a resource and its sub resources, I can also make multiple different queries in one API call.&lt;/p&gt;

&lt;p&gt;Here I retrieve information about:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;me (the viewer)&lt;/li&gt;
  &lt;li&gt;two other users (Kin Lane and Mike Amundsen)&lt;/li&gt;
  &lt;li&gt;and a search on repositories&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;in a single request to the GraphQL server:&lt;/p&gt;

&lt;div&gt;
  &lt;div class=&quot;code-toolbar&quot;&gt;
    &lt;div class=&quot;btn-group&quot; role=&quot;group&quot; aria-label=&quot;...&quot;&gt;
      
      &lt;button type=&quot;button&quot; class=&quot;btn btn-default btn-copy&quot;&gt;&lt;i class=&quot;fa fa-clipboard&quot; aria-hidden=&quot;true&quot;&gt;&lt;/i&gt;&lt;/button&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;pre class=&quot;language-graphql line-numbers&quot;&gt;&lt;code&gt;{
  me:   viewer                 { name avatarURL }
  kin:  user(login: &amp;quot;kinlane&amp;quot;) { name avatarURL }
  mike: user(login: &amp;quot;mamund&amp;quot;)  { name avatarURL }
  graphqlRepos: search(first: 2, query: &amp;quot;graphql&amp;quot;, type: REPOSITORY) {
  	edges { node { ... on Repository {
      name
      description
    }}}  
  }
}&lt;/code&gt;&lt;/pre&gt;
  
&lt;/div&gt;

&lt;p&gt;The response contains all requested data:&lt;/p&gt;

&lt;div&gt;
  &lt;div class=&quot;code-toolbar&quot;&gt;
    &lt;div class=&quot;btn-group&quot; role=&quot;group&quot; aria-label=&quot;...&quot;&gt;
      &lt;button type=&quot;button&quot; class=&quot;btn btn-default&quot; onclick=&quot;toggle(this, this.parentElement.parentElement.parentElement.children[1], this.parentElement.parentElement.parentElement.children[2].children[0])&quot;&gt;&lt;i class=&quot;fa fa-expand&quot; aria-hidden=&quot;true&quot;&gt;&lt;/i&gt;&lt;/button&gt;
      &lt;button type=&quot;button&quot; class=&quot;btn btn-default btn-copy&quot;&gt;&lt;i class=&quot;fa fa-clipboard&quot; aria-hidden=&quot;true&quot;&gt;&lt;/i&gt;&lt;/button&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;pre class=&quot;language-json line-numbers code-collapsed&quot;&gt;&lt;code&gt;{
  &amp;quot;data&amp;quot;: {
    &amp;quot;me&amp;quot;: {
      &amp;quot;name&amp;quot;: &amp;quot;Arnaud Lauret&amp;quot;,
      &amp;quot;avatarURL&amp;quot;: &amp;quot;https://avatars0.githubusercontent.com/u/10104551?v=3&amp;quot;
    },
    &amp;quot;kin&amp;quot;: {
      &amp;quot;name&amp;quot;: &amp;quot;Kin Lane&amp;quot;,
      &amp;quot;avatarURL&amp;quot;: &amp;quot;https://avatars1.githubusercontent.com/u/56100?v=3&amp;quot;
    },
    &amp;quot;mike&amp;quot;: {
      &amp;quot;name&amp;quot;: &amp;quot;Mike Amundsen&amp;quot;,
      &amp;quot;avatarURL&amp;quot;: &amp;quot;https://avatars2.githubusercontent.com/u/38344?v=3&amp;quot;
    },
    &amp;quot;graphqlRepos&amp;quot;: {
      &amp;quot;edges&amp;quot;: [
        {
          &amp;quot;node&amp;quot;: {
            &amp;quot;name&amp;quot;: &amp;quot;graphql&amp;quot;,
            &amp;quot;description&amp;quot;: &amp;quot;GraphQL is a query language and execution engine tied to any backend service.&amp;quot;
          }
        },
        {
          &amp;quot;node&amp;quot;: {
            &amp;quot;name&amp;quot;: &amp;quot;graphql&amp;quot;,
            &amp;quot;description&amp;quot;: &amp;quot;An implementation of GraphQL for Go / Golang&amp;quot;
          }
        }
      ]
    }
  }
}&lt;/code&gt;&lt;/pre&gt;
  &lt;div class=&quot;code-bottom-toolbar&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;btn btn-default btn-block&quot; onclick=&quot;toggle(this, this.parentElement.parentElement.children[1], this.parentElement.parentElement.children[0].children[0].children[0], true)&quot;&gt;&lt;i class=&quot;fa fa-expand&quot; aria-hidden=&quot;true&quot;&gt;&lt;/i&gt;&lt;/button&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;h3 id=&quot;graphql-is-not-sql-nor-an-etl&quot;&gt;GraphQL is not SQL nor an ETL&lt;/h3&gt;
&lt;p&gt;GraphQL is really powerful but be warned that it’s not SQL nor an ETL, you can select the data you want, agregate queries, change names but not join queries or change the data structure.&lt;/p&gt;

&lt;p&gt;You cannot join queries like you would join tables in SQL.&lt;/p&gt;

&lt;div&gt;
  &lt;div class=&quot;code-toolbar&quot;&gt;
    &lt;div class=&quot;btn-group&quot; role=&quot;group&quot; aria-label=&quot;...&quot;&gt;
      
      &lt;button type=&quot;button&quot; class=&quot;btn btn-default btn-copy&quot;&gt;&lt;i class=&quot;fa fa-clipboard&quot; aria-hidden=&quot;true&quot;&gt;&lt;/i&gt;&lt;/button&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;pre class=&quot;language-sql line-numbers&quot;&gt;&lt;code&gt;SELECT * FROM A, B WHERE A.COL = B.COL&lt;/code&gt;&lt;/pre&gt;
  
&lt;/div&gt;

&lt;p&gt;You cannot select sub-properties or flatten objects. If I want to retrieve the name of my first repository without the edges and repo level, I cannot change this hierarchy:&lt;/p&gt;

&lt;div&gt;
  &lt;div class=&quot;code-toolbar&quot;&gt;
    &lt;div class=&quot;btn-group&quot; role=&quot;group&quot; aria-label=&quot;...&quot;&gt;
      
      &lt;button type=&quot;button&quot; class=&quot;btn btn-default btn-copy&quot;&gt;&lt;i class=&quot;fa fa-clipboard&quot; aria-hidden=&quot;true&quot;&gt;&lt;/i&gt;&lt;/button&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;pre class=&quot;language-json line-numbers&quot;&gt;&lt;code&gt;{
  &amp;quot;data&amp;quot;: {
    &amp;quot;me&amp;quot;: {
      &amp;quot;myFirstTwoRepos&amp;quot;: {
        &amp;quot;edges&amp;quot;: [
          {
            &amp;quot;repo&amp;quot;: {
              &amp;quot;name&amp;quot;: &amp;quot;apistylebook-api&amp;quot;
            }
          }
        ]
      }
    }
  }
}&lt;/code&gt;&lt;/pre&gt;
  
&lt;/div&gt;

&lt;p&gt;into this one:&lt;/p&gt;

&lt;div&gt;
  &lt;div class=&quot;code-toolbar&quot;&gt;
    &lt;div class=&quot;btn-group&quot; role=&quot;group&quot; aria-label=&quot;...&quot;&gt;
      
      &lt;button type=&quot;button&quot; class=&quot;btn btn-default btn-copy&quot;&gt;&lt;i class=&quot;fa fa-clipboard&quot; aria-hidden=&quot;true&quot;&gt;&lt;/i&gt;&lt;/button&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;pre class=&quot;language-json line-numbers&quot;&gt;&lt;code&gt;{
  &amp;quot;data&amp;quot;: {
    &amp;quot;me&amp;quot;: {
      &amp;quot;myFirstTwoRepos&amp;quot;:
        [
          {&amp;quot;name&amp;quot;: &amp;quot;apistylebook-api&amp;quot;}
        ]
      }
    }
  }
}&lt;/code&gt;&lt;/pre&gt;
  
&lt;/div&gt;

&lt;h2 id=&quot;schema-introspection-documentation&quot;&gt;Schema, introspection, documentation&lt;/h2&gt;
&lt;p&gt;All the available data are described within a schema.
This schema let you describe your data model like you would do with OpenAPI/Swagger, Blueprint or RAML specification.
The schema can be queried on runtime like all of the data.&lt;/p&gt;

&lt;p&gt;This query let me know what are the properties of the &lt;code&gt;User&lt;/code&gt; resource which is returned by the viewer and user query&lt;/p&gt;

&lt;div&gt;
  &lt;div class=&quot;code-toolbar&quot;&gt;
    &lt;div class=&quot;btn-group&quot; role=&quot;group&quot; aria-label=&quot;...&quot;&gt;
      
      &lt;button type=&quot;button&quot; class=&quot;btn btn-default btn-copy&quot;&gt;&lt;i class=&quot;fa fa-clipboard&quot; aria-hidden=&quot;true&quot;&gt;&lt;/i&gt;&lt;/button&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;pre class=&quot;language-graphql line-numbers&quot;&gt;&lt;code&gt;{
  __type(name:&amp;quot;User&amp;quot;) {
    fields {
      name
      description
    }
  }
}&lt;/code&gt;&lt;/pre&gt;
  
&lt;/div&gt;

&lt;p&gt;This schema can also be used to generate documentation:&lt;/p&gt;

&lt;div&gt;
      &lt;img src=&quot;/images/and-graphql-for-all-a-few-things-to-think-about-before-blindly-dumping-rest-for-graphql/documentation.png&quot; /&gt;
      &lt;p class=&quot;img-label&quot;&gt;GraphiQL documentation&lt;/p&gt;
    &lt;/div&gt;

&lt;h2 id=&quot;ecosystem&quot;&gt;Ecosystem&lt;/h2&gt;
&lt;p&gt;GraphQL do not comes alone, it’s a part of an ecosystem including:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Consumer libraries like &lt;a href=&quot;https://facebook.github.io/relay/&quot;&gt;Relay&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;API explorer &lt;a href=&quot;https://github.com/graphql/graphiql&quot;&gt;GraphiQL&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;And server libraries in &lt;a href=&quot;http://graphql.org/code/&quot;&gt;many different languages like Node, Ruby, Python, Java, Scala or Clojure&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;graphql-in-few-words&quot;&gt;GraphQL in few words&lt;/h2&gt;

&lt;p&gt;So basically with GraphQL you can&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Retrieve only the data you need on consumer side&lt;/li&gt;
  &lt;li&gt;Reduce the data volume returned by the server because you retrieve only what you need&lt;/li&gt;
  &lt;li&gt;Reduce the number of calls to retrieve data by seamlessly retrieving linked resources and agregating queries&lt;/li&gt;
  &lt;li&gt;Discover the schema you are querying&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And GraphQL comes with a full ecosystem which ease both API provider and consumer job.&lt;/p&gt;

&lt;p&gt;I have played with the &lt;a href=&quot;https://www.npmjs.com/package/graphql&quot;&gt;official node js library&lt;/a&gt; to create a GraphQL server and I was really impressed by how it was easy to achieve a proof of concept. You define your schema. You define resolver function for your resources, and bang! it’s done.&lt;/p&gt;

&lt;p&gt;If you want to discover GraphQL you should try the &lt;a href=&quot;https://learngraphql.com/&quot;&gt;tutorial available at learngraphql.com&lt;/a&gt; and play with the &lt;a href=&quot;https://developer.github.com/early-access/graphql/&quot;&gt;Github GraphQL API&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;what-graphql-could-mean-when-youre-acustomed-to-rest&quot;&gt;What GraphQL could mean when you’re acustomed to REST&lt;/h1&gt;
&lt;p&gt;This is very cool. My geek side is really excited about GraphQL. But Let’s keep a cool head and try to think about what GraphQL could mean for people acustomed to REST APIs? Let’s see what are some impacts on the consumer and provider sides.&lt;/p&gt;

&lt;h1 id=&quot;graphql-brings-a-different-developer-experience&quot;&gt;GraphQL brings a different developer experience&lt;/h1&gt;
&lt;p&gt;When people speak of GraphQL and developer experience, the main focus is on &lt;em&gt;what you want is what you get&lt;/em&gt; which is really a killer feature that can greatly enhance DX in a certain context. But as GraphQL offers a radically different DX than a REST API, some aspects should be investigated to evaluate if these changes can be real issues.&lt;/p&gt;

&lt;h2 id=&quot;being-protocol-agnostic-has-consequences-on-predictability-and-consistency&quot;&gt;Being protocol agnostic has consequences on predictability and consistency&lt;/h2&gt;
&lt;p&gt;GraphQL is protocol agnostic, it means that you can use it with any protocol as long as you can send and retrieve a string. This can be useful but people acustomed to using the HTTP protocol with REST API should then be aware that, when used over HTTP, GraphQL do not use any of its features and it has consequences on DX.&lt;/p&gt;

&lt;h3 id=&quot;reading-and-writing-resources&quot;&gt;Reading and writing resources&lt;/h3&gt;
&lt;p&gt;With a REST API, if I retrieve a user’s data with &lt;code&gt;GET /users/{id}&lt;/code&gt;, I can try to update it with &lt;code&gt;PATCH /users/{id}&lt;/code&gt; and delete it with &lt;code&gt;DELETE /users/{id}&lt;/code&gt; without even reading the documentation and it will probably work… like it will work with another another resource in the same API and even with another resource in another REST API.
And icing on the cake: both humans and machines can discover and understand the meaning of each operation.
Using the HTTP protocol enforce a certain consistency and allow predictability.&lt;/p&gt;

&lt;p&gt;In a GraphQL API, reading and writing actions are separated in 2 sets of queries.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;query for reading&lt;/li&gt;
  &lt;li&gt;mutation for writing&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Machines will only be able to understand that a query do not modify underlying system and a mutation does, all other semantic will be based on naming conventions.&lt;/p&gt;

&lt;p&gt;If I get a user with the query user:&lt;/p&gt;

&lt;div&gt;
  &lt;div class=&quot;code-toolbar&quot;&gt;
    &lt;div class=&quot;btn-group&quot; role=&quot;group&quot; aria-label=&quot;...&quot;&gt;
      
      &lt;button type=&quot;button&quot; class=&quot;btn btn-default btn-copy&quot;&gt;&lt;i class=&quot;fa fa-clipboard&quot; aria-hidden=&quot;true&quot;&gt;&lt;/i&gt;&lt;/button&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;pre class=&quot;language-graphql line-numbers&quot;&gt;&lt;code&gt;query {
  user(id: &amp;quot;{id}&amp;quot;) {
    name
  }
}&lt;/code&gt;&lt;/pre&gt;
  
&lt;/div&gt;

&lt;p&gt;Updating or deleting this user with GraphQL will not be as clear as with REST.
How will be named the mutation allowing me to delete a user? &lt;code&gt;deleteUser&lt;/code&gt;, &lt;code&gt;removeUser&lt;/code&gt; or &lt;code&gt;suppressPeople&lt;/code&gt;?
You’ll have to dig in the documentation to find out. You cannot guess it because different API providers will have different naming conventions and these naming convention may event not be consistent within an API.&lt;/p&gt;

&lt;div&gt;
  &lt;div class=&quot;code-toolbar&quot;&gt;
    &lt;div class=&quot;btn-group&quot; role=&quot;group&quot; aria-label=&quot;...&quot;&gt;
      
      &lt;button type=&quot;button&quot; class=&quot;btn btn-default btn-copy&quot;&gt;&lt;i class=&quot;fa fa-clipboard&quot; aria-hidden=&quot;true&quot;&gt;&lt;/i&gt;&lt;/button&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;pre class=&quot;language-graphql line-numbers&quot;&gt;&lt;code&gt;mutation {
  deleteUser(id: &amp;quot;{id}&amp;quot;)
  removeUser(id: &amp;quot;{id}&amp;quot;)
  suppressPeople(id: &amp;quot;{id}&amp;quot;)
}&lt;/code&gt;&lt;/pre&gt;
  
&lt;/div&gt;

&lt;h3 id=&quot;handling-errors&quot;&gt;Handling errors&lt;/h3&gt;
&lt;p&gt;Being protocol agnostic also means that everything is going to be &lt;code&gt;200 OK&lt;/code&gt; when using GraphQL over HTTP, wheither the query was OK or not. With REST APIs we are acustomed to be able to tell what happens just by looking at the HTTP status. Whatever the API, if we receive a &lt;code&gt;404&lt;/code&gt; HTTP status we known what it means: &lt;em&gt;resource not found&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;If I try to retrieve a user that do not exists with a GraphQL API:&lt;/p&gt;

&lt;div&gt;
  &lt;div class=&quot;code-toolbar&quot;&gt;
    &lt;div class=&quot;btn-group&quot; role=&quot;group&quot; aria-label=&quot;...&quot;&gt;
      
      &lt;button type=&quot;button&quot; class=&quot;btn btn-default btn-copy&quot;&gt;&lt;i class=&quot;fa fa-clipboard&quot; aria-hidden=&quot;true&quot;&gt;&lt;/i&gt;&lt;/button&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;pre class=&quot;language-graphql line-numbers&quot;&gt;&lt;code&gt;{
  user(login: &amp;quot;dummy-user-123&amp;quot;) {name}
}&lt;/code&gt;&lt;/pre&gt;
  
&lt;/div&gt;

&lt;p&gt;I get this GraphQL standard error with a text message telling me the user do no exists.:&lt;/p&gt;

&lt;div&gt;
  &lt;div class=&quot;code-toolbar&quot;&gt;
    &lt;div class=&quot;btn-group&quot; role=&quot;group&quot; aria-label=&quot;...&quot;&gt;
      
      &lt;button type=&quot;button&quot; class=&quot;btn btn-default btn-copy&quot;&gt;&lt;i class=&quot;fa fa-clipboard&quot; aria-hidden=&quot;true&quot;&gt;&lt;/i&gt;&lt;/button&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;pre class=&quot;language-json line-numbers&quot;&gt;&lt;code&gt;{
  &amp;quot;data&amp;quot;: {
    &amp;quot;user&amp;quot;: null
  },
  &amp;quot;errors&amp;quot;: [
    {
      &amp;quot;message&amp;quot;: &amp;quot;Could not resolve to a User with the login of &amp;#39;dummy-user-123&amp;#39;.&amp;quot;,
      &amp;quot;locations&amp;quot;: [
        {
          &amp;quot;line&amp;quot;: 2,
          &amp;quot;column&amp;quot;: 3
        }
      ],
      &amp;quot;path&amp;quot;: [
        &amp;quot;user&amp;quot;
      ]
    }
  ]
}&lt;/code&gt;&lt;/pre&gt;
  
&lt;/div&gt;

&lt;p&gt;If I forget the login parameter:&lt;/p&gt;

&lt;div&gt;
  &lt;div class=&quot;code-toolbar&quot;&gt;
    &lt;div class=&quot;btn-group&quot; role=&quot;group&quot; aria-label=&quot;...&quot;&gt;
      
      &lt;button type=&quot;button&quot; class=&quot;btn btn-default btn-copy&quot;&gt;&lt;i class=&quot;fa fa-clipboard&quot; aria-hidden=&quot;true&quot;&gt;&lt;/i&gt;&lt;/button&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;pre class=&quot;language-graphql line-numbers&quot;&gt;&lt;code&gt;{
  user { name }
}&lt;/code&gt;&lt;/pre&gt;
  
&lt;/div&gt;

&lt;p&gt;I get exactly the same error format:&lt;/p&gt;

&lt;div&gt;
  &lt;div class=&quot;code-toolbar&quot;&gt;
    &lt;div class=&quot;btn-group&quot; role=&quot;group&quot; aria-label=&quot;...&quot;&gt;
      
      &lt;button type=&quot;button&quot; class=&quot;btn btn-default btn-copy&quot;&gt;&lt;i class=&quot;fa fa-clipboard&quot; aria-hidden=&quot;true&quot;&gt;&lt;/i&gt;&lt;/button&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;pre class=&quot;language-json line-numbers&quot;&gt;&lt;code&gt;{
  &amp;quot;data&amp;quot;: null,
  &amp;quot;errors&amp;quot;: [
    {
      &amp;quot;message&amp;quot;: &amp;quot;Field &amp;#39;user&amp;#39; is missing required arguments: login&amp;quot;,
      &amp;quot;locations&amp;quot;: [
        {
          &amp;quot;line&amp;quot;: 2,
          &amp;quot;column&amp;quot;: 3
        }
      ]
    }
  ]
}&lt;/code&gt;&lt;/pre&gt;
  
&lt;/div&gt;

&lt;p&gt;The message shows me explicitely what the problem is, but I cannot determine the error type programmatically in a generic way. These errors are not really fit to be analyzed automatically by machines. Of course there’s obviously a pattern in the message but will this message have the same pattern for another resource or use case? Will this pattern be consistent as the API evolve? And will I find exactly the same pattern in another GraphQL API?&lt;/p&gt;

&lt;h2 id=&quot;graphql-focuses-on-data-and-not-actions&quot;&gt;GraphQL focuses on data and not actions&lt;/h2&gt;
&lt;p&gt;A well design REST API implementing hypermedia is able to tell you what are the resources connected to the resource you just get but it can also provide the possible affordances to tell you what you can do. With an hypermedia API you’ll be able to describe a complex process step by step providing information about the next requests you can do. But be aware that if HTTP protocol ensure a certain consistency across APIs concering resources manipulation, the hypermedia aspect of REST APIs is not standardized even if some format like Siren, Hydra or HAL exist.&lt;/p&gt;

&lt;p&gt;A GraphQL API focus on data, you read data, you write data. But these aspects are totally disconnected and, for now, describing affordance is not a GraphQL feature. You can of course rely on documentation to describe these processes but therefore machines will not be able to handle that automatically. Looking at how it’s implemented in REST API, I’m sure that sooner or later we will have such features in GraphQL.&lt;/p&gt;

&lt;h2 id=&quot;cache&quot;&gt;Cache&lt;/h2&gt;
&lt;p&gt;Caching data is always a tricky thing. With a REST API, a consumer could rely on HTTP caching system and could rely on HTTP caching data provide in response’s header to build it’s own cache.
With GraphQL there’s no such mecanism, for now, you’ll have to rely totally on the client to handle cache. Hopefully client library like Facebook’s Relay propose a complex cache system but as GraphQL do not provide information about how long the data are valid, it will be up to the consumer to choose when to refresh the cache.
I’m sure that as GraphQL evolve, we will have better cache mecanism in the future.&lt;/p&gt;

&lt;h2 id=&quot;does-graphql-offer-a-good-or-bad-dx&quot;&gt;Does GraphQL offer a good or bad DX?&lt;/h2&gt;
&lt;p&gt;So with GraphQL you gain great flexibility when querying data but you lose a certain predictability and consistency inside an API and across APIs. You may also not clearly see what you can do with these data and GraphQL gives more responsability on the client side to cache these data.
Is this a problem?. Like always, the answer to this question will depend on the context. You just have to think about these elements (and probably others) regarding your context to determine if it’s a problem or an advantage.&lt;/p&gt;

&lt;h1 id=&quot;graphql-does-not-ease-api-provider-job-and-brings-new-challenges&quot;&gt;GraphQL does not ease API provider job and brings new challenges&lt;/h1&gt;
&lt;p&gt;Let’s see now what GraphQL means on the provider side.&lt;/p&gt;

&lt;p&gt;First, let me be clear:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;If you suck at providing REST API, you WILL suck at providing GraphQL API.&lt;br /&gt;
&lt;em&gt;Arnaud Lauret, API Handyman&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;GraphQL may bring new challenges and questions on the provider side but it mainly highlights matters that you should master whatever the type of API you provide.&lt;/p&gt;

&lt;h2 id=&quot;graphql-will-not-solve-your-api-design-problems&quot;&gt;GraphQL will not solve your API design problems&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;What the hell is this &lt;code&gt;amsus2&lt;/code&gt; field?
Anonym consumer&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;After a in-depth analysis of a use case or a problem, you may come to the &lt;em&gt;logical and enligtened&lt;/em&gt; conclusion that GraphQL is the most appropriate solution instead of REST &lt;em&gt;regarding the context&lt;/em&gt;. Be warned that GraphQL is not a magic thing that you just put on top of a good old database or existing system and it’s over.&lt;/p&gt;

&lt;p&gt;Don’t dare to think: &lt;em&gt;We have data, let people decide how to query them and what to make of them!&lt;/em&gt;. Don’t forget that a GraphQL API is STILL an API. It’s supposed to be a consumer friendly abstraction of a usually complex underlying system.&lt;/p&gt;

&lt;p&gt;Remember all the terrible things you’ve done while designing crappy REST APIs. API without really defined purpose, dumb database mapping, dumb legacy service mapping, dumb internal organization and processes exposition … 
A GraphQL API, just like a REST one, must be created with a purpose and designed from an outside in perpective and not an inside out one.&lt;/p&gt;

&lt;p&gt;If you don’t do that, be ready for a total failure.&lt;/p&gt;

&lt;p&gt;We have seen while talking about Developer Experience that queries and mutations are disconnected and that consumer can only rely on mutation’s name and documentation to know what they’re up to. You will have to increase control on design because naming thing consistently is hard and you’ll definitely need consistency to help consumers understand how your query and mutations are connected and what mutations actually do. If you know some people who were involved in SOA governance in the SOAP protocol era you may call them because they have faced such things.&lt;/p&gt;

&lt;h2 id=&quot;graphql-will-not-solve-your-api-documentation-problems&quot;&gt;GraphQL will not solve your API documentation problems&lt;/h2&gt;
&lt;p&gt;A GraphQL API comes with an integrated documentation system describing the schema that can be queried.
You can discover the available queries and the data returned.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;A5 Amsus2 B B5 B7 B7/D# C C5 C#5 Cadd9 D D5 D#5 E5 Em F#m G&lt;br /&gt;
&lt;em&gt;Master of Puppets Guitar Chords&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This is the list of guitar chords you need to play Master Of Puppets. Having only this list, and without being a guitar hero, will you be able to play the song? Well maybe … after a very long struggle.&lt;/p&gt;

&lt;p&gt;An interface contract description, an inventory of queries and objects, was, is and will &lt;em&gt;NEVER&lt;/em&gt; be the API documentation, it’s only a part of it. It’s just like providing guitar chords without explaing how to chain them to play a song. How to connect? How is handled rate limiting? How is handle security? How to respond to this use case? Code snippets, SDK, tutorials …&lt;/p&gt;

&lt;p&gt;API documentation is something that go way beyond the description of its interface contract. Don’t forget that the API itself and its documentation are the main ingredients of a good developer experience. Without a good DX, no users, no business.&lt;/p&gt;

&lt;p&gt;So don’t be fooled by this kind of documentation and note that also applies to REST APIs when you use API description format like OpenAPI, Swagger, RAML of Blueprint.&lt;/p&gt;

&lt;h2 id=&quot;graphql-may-have-unexpected-side-effects-and-data-volumes-and-server-usage&quot;&gt;GraphQL may have unexpected side effects and data volumes and server usage&lt;/h2&gt;
&lt;p&gt;With GraphQL, what you want is what you get. But you always have to explicitely tell what you want, there’s no &lt;code&gt;select * from user&lt;/code&gt; like in SQL. So on each request, consumers have to send a full query.&lt;/p&gt;

&lt;p&gt;Where you would have a simple &lt;code&gt;GET /dashboard&lt;/code&gt; with a REST API, you may end with a huge GraphQL query.
In some use case, you may reach your input bandwidth limit because the number of requests has not really diminished but the requests size has increased. Remember that not everybody has a fully scalable cloud infrastructure with illimited bandwidth.&lt;/p&gt;

&lt;p&gt;Proposing a smart system allowing consumers to retrieve in one shot what they want do not mean that it will be used wisely. Some lazy consumers may simply fired huge requests retrieving far more data than they really need. Some huge and complex request may impact all you infrastructure, so you should really think about your GraphQL schema and what runs behind it, because you’re giving the full power to consumers.&lt;/p&gt;

&lt;h2 id=&quot;graphql-may-force-you-to-rethink-api-analytics-and-pricing-model&quot;&gt;GraphQL may force you to rethink API analytics and pricing model&lt;/h2&gt;
&lt;p&gt;If you were relying on HTTP access logs for rate limiting, API analytics and billing you will have to find a new way to handle that. The most important impact will be on pricing model and billing: how to make people pay when you have a single endpoint allowing to do what you want like you want? Counting queries and mutations can be agood start, you’ll maybe have to include data volume and queries depth in your calculations to design a new pricing model. Getting these new variables will probably have impacts on your API tooling, especially your API gateway.&lt;/p&gt;

&lt;h2 id=&quot;does-graphql-offer-a-good-or-a-bad-px-provider-experience&quot;&gt;Does GraphQL offer a good or a bad PX (provider experience)?&lt;/h2&gt;
&lt;p&gt;Providing a GraphQL API will not make you magically a better API provider. You still have to design and document your API, you still have to create the best architecture and infrastructure, you still have to define a pricing model. Providing GraphQL API brings the same challenges has providing REST API with a few subtles differences that you must be aware of to choose the right API style for the right context.&lt;/p&gt;

&lt;h1 id=&quot;should-i-choose-graphql-or-rest&quot;&gt;Should I choose GraphQL or REST?&lt;/h1&gt;
&lt;p&gt;In conclusion, GraphQL is really a powerful and interesting technology that impacts deeply both API provider and consumer who are acustomed to REST APIs. It’s a new technology that may need some improvments, that will surely come.&lt;/p&gt;

&lt;p&gt;You MUST see it as a new tool in your API toolbox alongside REST and Streaming APIs. A new tool that you will choose wisely regarding your context. And don’t forget that sometime you’ll need a hammer AND a screwdriver to build awesome things.&lt;/p&gt;

&lt;p&gt;Now I hope you will be able to the answer this really important question:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;REST or GraphQL.&lt;br /&gt;
Which one is the best API style?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;You’re supposed to yell &lt;em&gt;it depends!&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;This post is a writeup of my &lt;a href=&quot;https://speakerdeck.com/arnaudlauret/dot-dot-dot-and-graphql-for-all-a-few-things-to-think-about-before-blindly-dumping-rest-for-graphql&quot;&gt;API Days Paris 2017 talk&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;</content><author><name>Arnaud Lauret</name></author><category term="posts" /><summary type="html">GraphQL is new. GraphQL is cool. Look! Github dumped REST for it! We MUST do it too!
Well, why not. GraphQL could be a great tool, but like any tool, you don’t choose it just because. You choose it because it solves a problem in a given context. You choose it knowing its strengths and weaknesses.

While discovering what is GraphQL we will see what REST API providers should think about before blindly dumping REST for it. From design and implementation to pricing model and analytics down to developers experience and implementations, choosing an API design style will have impact on the whole API lifecycle. Therefore, this choice must be an enligthned one and not based on simple beliefs.</summary></entry><entry><title type="html">Dr Jekyll and Mr API Handyman</title><link href="https://apihandyman.io/dr-jekyll-and-mr-api-handyman/" rel="alternate" type="text/html" title="Dr Jekyll and Mr API Handyman" /><published>2016-12-23T00:00:00+00:00</published><updated>2016-12-23T00:00:00+00:00</updated><id>https://apihandyman.io/dr-jekyll-and-mr-api-handyman</id><content type="html" xml:base="https://apihandyman.io/dr-jekyll-and-mr-api-handyman/">&lt;p&gt;ICYMI, I’ve just switched from a self hosted Wordpress to a Jekyll static website hosted on Github. The code is available in the &lt;a href=&quot;https://github.com/arno-di-loreto/apihandyman.io&quot;&gt;apihandyman.io repository&lt;/a&gt;. If you’re looking for information and tips about how to enable pagination on categories pages and have infinite scroll with Jekyll or how to to deploy a Jekyll website using custom plugins on Github Pages, you should take a look at it.&lt;/p&gt;</content><author><name>Arnaud Lauret</name></author><category term="elsewhere" /><summary type="html">ICYMI, I’ve just switched from a self hosted Wordpress to a Jekyll static website hosted on Github. The code is available in the apihandyman.io repository. If you’re looking for information and tips about how to enable pagination on categories pages and have infinite scroll with Jekyll or how to to deploy a Jekyll website using custom plugins on Github Pages, you should take a look at it.</summary></entry><entry><title type="html">Read Evolving a Company’s IS in the Lego Computing Age on Nordic APIs blog</title><link href="https://apihandyman.io/read-evolving-a-companys-is-in-the-lego-computing-age-on-nordic-apis-blog/" rel="alternate" type="text/html" title="Read Evolving a Company’s IS in the Lego Computing Age on Nordic APIs blog" /><published>2016-12-06T00:00:00+00:00</published><updated>2016-12-06T00:00:00+00:00</updated><id>https://apihandyman.io/read-evolving-a-companys-is-in-the-lego-computing-age-on-nordic-apis-blog</id><content type="html" xml:base="https://apihandyman.io/read-evolving-a-companys-is-in-the-lego-computing-age-on-nordic-apis-blog/">&lt;p&gt;If you wonder how to evolve a company’s IS in the lego computing age, read &lt;a href=&quot;http://nordicapis.com/evolving-companys-lego-computing-age-choose-brick-product/&quot;&gt;my post on Nordic APIs blog&lt;/a&gt;.&lt;/p&gt;</content><author><name>Arnaud Lauret</name></author><category term="elsewhere" /><category term="Governance" /><category term="Strategy" /><category term="Implementation" /><category term="Architecture" /><summary type="html">If you wonder how to evolve a company’s IS in the lego computing age, read my post on Nordic APIs blog.</summary></entry><entry><title type="html">OpenAPI Trek Beyond API Documentation (API Strat 2016)</title><link href="https://apihandyman.io/openapi-trek-beyond-api-documentation-api-strat-2016/" rel="alternate" type="text/html" title="OpenAPI Trek Beyond API Documentation (API Strat 2016)" /><published>2016-11-28T18:54:40+00:00</published><updated>2016-11-28T18:54:40+00:00</updated><id>https://apihandyman.io/openapi-trek-beyond-api-documentation-api-strat-2016</id><content type="html" xml:base="https://apihandyman.io/openapi-trek-beyond-api-documentation-api-strat-2016/">&lt;p&gt;After API Days London, and Nordic APIs Summit in Stockholm, Scottie beamed me to API Strat Boston 2016 for the final part of my OpenAPI specification (fka. Swagger specification) talk series: &lt;em&gt;OpenAPI Trek Beyond API Documentation&lt;/em&gt;.&lt;!--more--&gt;&lt;/p&gt;

&lt;p&gt;This series is composed of three talks:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;/openapi-trek-api-days-london-2016/&quot;&gt;OpenAPI Trek at API Days London 2016&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/openapi-trek-into-fastness-nordic-apis-summit-2016/&quot;&gt;OpenAPI Trek Into Fastness at Nordic APIs Stockholm Summit 2016&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;OpenAPI Trek Beyond API Documentation at APIStrat Boston 2016&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;jekyll-twitter-plugin&quot;&gt;&lt;blockquote class=&quot;twitter-tweet&quot; align=&quot;center&quot;&gt;&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;This year’s &lt;a href=&quot;https://twitter.com/hashtag/APIstrat?src=hash&quot;&gt;#APIstrat&lt;/a&gt; award for Star Trek-est Talk goes to &lt;a href=&quot;https://twitter.com/apihandyman&quot;&gt;@apihandyman&lt;/a&gt; &lt;a href=&quot;https://t.co/8zjYM08noy&quot;&gt;pic.twitter.com/8zjYM08noy&lt;/a&gt;&lt;/p&gt;&amp;mdash; Amelia Mango (@ameliamango) &lt;a href=&quot;https://twitter.com/ameliamango/status/795749942144876547&quot;&gt;November 7, 2016&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async=&quot;&quot; src=&quot;//platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;&lt;/div&gt;

&lt;p&gt;This last talk is the (not so uncommon) story of how I came to use Swagger/OpenAPI for API documentation and how it changed many things beyond API documentation. Here are the video (very special thanks to &lt;a href=&quot;https://twitter.com/libel_vox&quot;&gt;Matthew Reinbold&lt;/a&gt; for recording this talk with my crappy phone) and slides:&lt;/p&gt;

&lt;div class=&quot;embedpad&quot;&gt;&lt;div class=&quot;youtube embedded embed-responsive embed-responsive-16by9&quot;&gt;&lt;iframe width=&quot;740&quot; height=&quot;416&quot; src=&quot;//www.youtube.com/embed/EtQbaZwCv5o?color=white&amp;amp;theme=light&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;embedpad&quot;&gt;&lt;div class=&quot;speackerdeck embedded embed-responsive embed-responsive-4by3&quot;&gt;&lt;script async=&quot;&quot; class=&quot;speakerdeck-embed&quot; data-id=&quot;db304a20b4204425a43b9843ccb5d504&quot; data-ratio=&quot;1.77777777777778&quot; src=&quot;//speakerdeck.com/assets/embed.js&quot;&gt;&lt;/script&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;em&gt;Boston Library Photography by &lt;a href=&quot;http://www.misterlapin.com&quot;&gt;Cinzia Dosa Lauret&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;</content><author><name>Arnaud Lauret</name></author><category term="talks" /><category term="Documentation" /><category term="OpenAPI" /><category term="Swagger" /><category term="Conference" /><category term="API Strat" /><category term="API Strat Boston" /><category term="Video" /><category term="Slides" /><category term="Series" /><summary type="html">After API Days London, and Nordic APIs Summit in Stockholm, Scottie beamed me to API Strat Boston 2016 for the final part of my OpenAPI specification (fka. Swagger specification) talk series: OpenAPI Trek Beyond API Documentation.</summary></entry><entry><title type="html">Swagger, OpenAPI and API Stylebook interview (API Strat Boston 2016)</title><link href="https://apihandyman.io/swagger-openapi-and-api-stylebook-interview-api-strat-boston-2016/" rel="alternate" type="text/html" title="Swagger, OpenAPI and API Stylebook interview (API Strat Boston 2016)" /><published>2016-11-25T18:54:00+00:00</published><updated>2016-11-25T18:54:00+00:00</updated><id>https://apihandyman.io/swagger-openapi-and-api-stylebook-interview-api-strat-boston-2016</id><content type="html" xml:base="https://apihandyman.io/swagger-openapi-and-api-stylebook-interview-api-strat-boston-2016/">&lt;p&gt;Just before the &lt;a href=&quot;http://apihandyman.io/developing-an-api-strategy-for-2017-api-strat-boston-2016/&quot;&gt;Developing an API Strategy for 2017 panel&lt;/a&gt;, I have been &lt;a href=&quot;http://blog.swaggerhub.com/api-design/getting-started-with-swagger/&quot;&gt;interviewed about Swagger/OpenAPI specification and the API Stylebook&lt;/a&gt; by &lt;a href=&quot;https://twitter.com/keshinpoint&quot;&gt;Keshav Vasudevan&lt;/a&gt; from Smartbear.&lt;!--more--&gt; Here’s the video:&lt;/p&gt;

&lt;div class=&quot;embedpad&quot;&gt;&lt;div class=&quot;youtube embedded embed-responsive embed-responsive-16by9&quot;&gt;&lt;iframe width=&quot;740&quot; height=&quot;416&quot; src=&quot;//www.youtube.com/embed/nwBTsFNjRQk?color=white&amp;amp;theme=light&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name>Arnaud Lauret</name></author><category term="talks" /><category term="API Strat" /><category term="API Strat Boston" /><category term="Conference" /><category term="Design" /><category term="API Stylebook" /><category term="Interview" /><category term="Video" /><summary type="html">Just before the Developing an API Strategy for 2017 panel, I have been interviewed about Swagger/OpenAPI specification and the API Stylebook by Keshav Vasudevan from Smartbear.</summary></entry><entry><title type="html">Developing an API Strategy for 2017 (API Strat Boston 2016)</title><link href="https://apihandyman.io/developing-an-api-strategy-for-2017-api-strat-boston-2016/" rel="alternate" type="text/html" title="Developing an API Strategy for 2017 (API Strat Boston 2016)" /><published>2016-11-23T18:53:15+00:00</published><updated>2016-11-23T18:53:15+00:00</updated><id>https://apihandyman.io/developing-an-api-strategy-for-2017-api-strat-boston-2016</id><content type="html" xml:base="https://apihandyman.io/developing-an-api-strategy-for-2017-api-strat-boston-2016/">&lt;p&gt;Shortly before API Strat, I have participated to an API experts panel on &lt;em&gt;Developing an API Strategy for 2017&lt;/em&gt; organized by Smartbear with &lt;a href=&quot;https://twitter.com/heritagelaura&quot;&gt;Laura Heritage&lt;/a&gt;, &lt;a href=&quot;https://twitter.com/mbernier&quot;&gt;Matt Bernier&lt;/a&gt;, &lt;a href=&quot;https://twitter.com/olensmar&quot;&gt;Ole Lensmar&lt;/a&gt; and &lt;a href=&quot;https://twitter.com/fehguy&quot;&gt;Tony Tam&lt;/a&gt; hosted by &lt;a href=&quot;https://twitter.com/PurcellOutdoors&quot;&gt;John Purcell&lt;/a&gt;.&lt;!--more--&gt;&lt;/p&gt;

&lt;p&gt;Smartbear blog posts:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://blog.smartbear.com/api-testing/smartbears-api-meetup-boston-apistrat-2016-meet-our-panelists/&quot;&gt;Meet our Panelists&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://blog.smartbear.com/software-quality/api-strategy-panel-2017/&quot;&gt;Expert Panel: Developing an API Strategy for 2017 (Video)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Here’s the panel video:&lt;/p&gt;

&lt;div class=&quot;embedpad&quot;&gt;&lt;div class=&quot;youtube embedded embed-responsive embed-responsive-16by9&quot;&gt;&lt;iframe width=&quot;740&quot; height=&quot;416&quot; src=&quot;//www.youtube.com/embed/xdJPJ3E-nC8?color=white&amp;amp;theme=light&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name>Arnaud Lauret</name></author><category term="talks" /><category term="API Strat" /><category term="API Strat Boston" /><category term="Conference" /><category term="Strategy" /><summary type="html">Shortly before API Strat, I have participated to an API experts panel on Developing an API Strategy for 2017 organized by Smartbear with Laura Heritage, Matt Bernier, Ole Lensmar and Tony Tam hosted by John Purcell.</summary></entry><entry><title type="html">People First: A not so gonzo API Strat Boston 2016 coverage</title><link href="https://apihandyman.io/people-first-a-not-so-gonzo-api-strat-boston-2016-coverage/" rel="alternate" type="text/html" title="People First: A not so gonzo API Strat Boston 2016 coverage" /><published>2016-11-19T18:52:39+00:00</published><updated>2016-11-19T18:52:39+00:00</updated><id>https://apihandyman.io/people-first-a-not-so-gonzo-api-strat-boston-2016-coverage</id><content type="html" xml:base="https://apihandyman.io/people-first-a-not-so-gonzo-api-strat-boston-2016-coverage/">&lt;p&gt;The last &lt;a href=&quot;http://boston2016.apistrat.com/&quot;&gt;API Strat 2016&lt;/a&gt; day, after the last talk, a man living in kentucky asked me something like &lt;em&gt;What is the one thing you will remember about this conference?&lt;/em&gt;. I answered something like &lt;em&gt;People First&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;People First. This is definitely what sticks in my mind after this conference.&lt;!--more--&gt;&lt;/p&gt;

&lt;div class=&quot;jekyll-twitter-plugin&quot;&gt;&lt;blockquote class=&quot;twitter-tweet&quot; align=&quot;center&quot;&gt;&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;What you can learn at &lt;a href=&quot;https://twitter.com/hashtag/apistrat?src=hash&quot;&gt;#apistrat&lt;/a&gt; is that (API) technology is not only about machines but also and most importantly about humans&lt;/p&gt;&amp;mdash; API Handyman (@apihandyman) &lt;a href=&quot;https://twitter.com/apihandyman/status/794546772219691008&quot;&gt;November 4, 2016&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async=&quot;&quot; src=&quot;//platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;&lt;/div&gt;

&lt;p&gt;But this is not the only thing.&lt;/p&gt;

&lt;p&gt;Let’s go back a few days earlier …&lt;/p&gt;

&lt;h1 id=&quot;the-british-api-nerds-are-coming&quot;&gt;The &lt;del&gt;British&lt;/del&gt; API nerds are coming&lt;/h1&gt;
&lt;p&gt;I got off the plane with my family around noon the friday prior the event. It was freezing. It was raining. I didn’t cared. There I was in Boston. Not only to visit this wonderful city and its neighborhoods, I was there for &lt;a href=&quot;http://boston2016.apistrat.com/&quot;&gt;APIStrat 2016&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;It was going to be an awesome trip.&lt;br /&gt;
It was going to be an awesome conference.&lt;/p&gt;

&lt;p&gt;After a few days of tourism, a &lt;a href=&quot;http://blog.smartbear.com/software-quality/api-strategy-panel-2017/&quot;&gt;panel discussion&lt;/a&gt; and the speakers dinner, it was time to go to API Strat.&lt;/p&gt;

&lt;p&gt;Thursday. 8 am. I grabbed my speaker badge and the API Strat 2016 official t-shirt.&lt;/p&gt;

&lt;div class=&quot;jekyll-twitter-plugin&quot;&gt;&lt;blockquote class=&quot;twitter-tweet&quot; align=&quot;center&quot;&gt;&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;&lt;a href=&quot;https://twitter.com/apievangelist&quot;&gt;@apievangelist&lt;/a&gt; Kin Lane fronts the History/API mashup t-shirt at &lt;a href=&quot;https://twitter.com/hashtag/APIStrat?src=hash&quot;&gt;#APIStrat&lt;/a&gt; &lt;a href=&quot;https://t.co/0MmQsvtTOm&quot;&gt;pic.twitter.com/0MmQsvtTOm&lt;/a&gt;&lt;/p&gt;&amp;mdash; David J. Biesack (@davidbiesack) &lt;a href=&quot;https://twitter.com/davidbiesack/status/794167619121250304&quot;&gt;November 3, 2016&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async=&quot;&quot; src=&quot;//platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;One if by REST&lt;br /&gt;
Two if by SOAP&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This t-shirt was a bit cryptic for a foreigner like me. It seems that I was not the only one in that case.&lt;/p&gt;

&lt;div class=&quot;jekyll-twitter-plugin&quot;&gt;&lt;blockquote class=&quot;twitter-tweet&quot; align=&quot;center&quot;&gt;&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;Explaining the &lt;a href=&quot;https://twitter.com/apistrat&quot;&gt;@apistrat&lt;/a&gt; tee shirt (since many didn&amp;#39;t raise their hands): &lt;a href=&quot;https://t.co/sOqd9TtqgJ&quot;&gt;https://t.co/sOqd9TtqgJ&lt;/a&gt;&lt;/p&gt;&amp;mdash; Lorinda Brandon (@lindybrandon) &lt;a href=&quot;https://twitter.com/lindybrandon/status/794172064320131072&quot;&gt;November 3, 2016&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async=&quot;&quot; src=&quot;//platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;&lt;/div&gt;

&lt;p&gt;Boston is a city steeped in history and it seemed that the american revolution hero &lt;a href=&quot;https://en.wikipedia.org/wiki/Paul_Revere&quot;&gt;Paul Revere&lt;/a&gt; or the american poet &lt;a href=&quot;https://en.wikipedia.org/wiki/Paul_Revere%27s_Ride&quot;&gt;Henry Wadsworth Longfellow&lt;/a&gt; gave a hand to design this year’s t-shirt. This quote has been inspired by:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;One if by sea&lt;br /&gt;
Two if by land&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;It was a signal, popularized by Henry Wadsworth Longfellow in his poem &lt;em&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Paul_Revere%27s_Ride&quot;&gt;Paul Revere’s Ride&lt;/a&gt;&lt;/em&gt; that indicated if the british troops were coming by land or by sea in the days before the first military engagement of the American Revolutionary War, the &lt;a href=&quot;https://en.wikipedia.org/wiki/Battles_of_Lexington_and_Concord&quot;&gt;battle of Lexington and Concord&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;In the days before April 18, Revere had instructed Robert Newman, the sexton of the North Church, to send a signal by lantern to alert colonists in Charlestown as to the movements of the troops when the information became known. In what is well known today by the phrase “one if by land, two if by sea”, one lantern in the steeple would signal the army’s choice of the land route while two lanterns would signal the route “by water” across the Charles River&lt;br /&gt;
Source &lt;a href=&quot;https://en.wikipedia.org/wiki/Paul_Revere&quot;&gt;Wikipedia&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Whether by sea or by land, the API nerds were coming. The API community was gathering in Boston. Not for a battle of course, but for a &lt;strong&gt;very&lt;/strong&gt; friendly and inclusive conference. Speakers and attendees. Experts and beginners. Old friends and total strangers. All these people gathered to talk about APIs together whatever their so-called status. Finally, everybody got back home with new lessons learned, new ideas and most important: new friends.&lt;/p&gt;

&lt;h1 id=&quot;this-is-bowling-there-are-rules&quot;&gt;This is bowling, there are rules&lt;/h1&gt;
&lt;p&gt;So many different people gathered in a friendly and inclusive event, what could go wrong?
In an ideal world, nothing. But we do not live in an ideal world.&lt;/p&gt;

&lt;div class=&quot;jekyll-twitter-plugin&quot;&gt;&lt;blockquote class=&quot;twitter-tweet&quot; align=&quot;center&quot;&gt;&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;&lt;a href=&quot;https://twitter.com/hashtag/APIStrat?src=hash&quot;&gt;#APIStrat&lt;/a&gt; is enforcing its code of conduct 👍🏼👍🏼👍🏼👍🏼👍🏼👍🏼👍🏼👍🏼👍🏼👍🏼&lt;/p&gt;&amp;mdash; 👩🏻‍💻✈️📄 (@sarahjeong) &lt;a href=&quot;https://twitter.com/sarahjeong/status/794166165278982144&quot;&gt;November 3, 2016&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async=&quot;&quot; src=&quot;//platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;&lt;/div&gt;

&lt;p&gt;Thursday 9 am. Main Stage. The staff announced that someone has been expelled from the conference (the conference has started the day before with workshops, speakers dinner and attendees meetup).&lt;/p&gt;

&lt;p&gt;In case you missed it, API Strat has &lt;a href=&quot;http://boston2016.apistrat.com/code-of-conduct/&quot;&gt;a code of conduct&lt;/a&gt;.
A code of conduct?&lt;br /&gt;
Yes, a code of conduct:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;A Code of Conduct is a public statement that sets the ground rules for participating in an event
&lt;a href=&quot;https://www.ashedryden.com/blog/codes-of-conduct-101-faq&quot;&gt;Ashe Dryden&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Everybody was now aware that this code was NOT a &lt;a href=&quot;https://en.wikipedia.org/wiki/Paper_tiger&quot;&gt;paper tiger&lt;/a&gt;.&lt;/p&gt;

&lt;div class=&quot;jekyll-twitter-plugin&quot;&gt;&lt;blockquote class=&quot;twitter-tweet&quot; align=&quot;center&quot;&gt;&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;likes attending &lt;a href=&quot;https://twitter.com/hashtag/APIStrat?src=hash&quot;&gt;#APIStrat&lt;/a&gt; because &lt;a href=&quot;https://twitter.com/kinlane&quot;&gt;@kinlane&lt;/a&gt; and &lt;a href=&quot;https://twitter.com/njyx&quot;&gt;@njyx&lt;/a&gt; have always taken having an inclusive event seriously.&lt;/p&gt;&amp;mdash; wirehead (@wirehead) &lt;a href=&quot;https://twitter.com/wirehead/status/794167999204823040&quot;&gt;November 3, 2016&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async=&quot;&quot; src=&quot;//platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;&lt;/div&gt;

&lt;p&gt;This is sad, not for the person who has been expelled, but for the person who had to suffer inappropriate behavior.&lt;br /&gt;
This is good, not because someone had to report an inappropriate behavior, but because someone was able to report an inappropriate behavior and because the API Strat staff reacted promptly and efficiently.&lt;/p&gt;

&lt;p&gt;Next time you attend an event, read the code of conduct and don’t be a jerk.
Next time you get out of your home, don’t be a jerk, even if there’s no code of conduct.&lt;/p&gt;

&lt;h1 id=&quot;selective-memory&quot;&gt;Selective memory&lt;/h1&gt;
&lt;p&gt;Thusday 9:15 am. Main Stage. The show began. Here’s what stood out for me.&lt;/p&gt;

&lt;h2 id=&quot;consuming-api-is-mainstream-and-you-can-make-money-out-of-it&quot;&gt;Consuming API is mainstream and you can make money out of it&lt;/h2&gt;
&lt;p&gt;Obviously we, API nerds, are accustomed to breath, eat, sleep and live API, but &lt;a href=&quot;https://twitter.com/TheMarkONeill&quot;&gt;Mark O’Neil&lt;/a&gt; showed us that APIs are becoming maintream. They are so incredibily mainstream that anyone use them and therefore these APIs become a vector of shadow IT (for the better or the worse).&lt;br /&gt;
We are so focused on providing APIs, even if we want to provide good ones, that we don’t see that consuming API is more common than exposing them and that there’s still an entire business to create there: helping people to consume API at large scale.&lt;/p&gt;

&lt;h2 id=&quot;api-business-strategy-and-monetization&quot;&gt;API Business Strategy and Monetization&lt;/h2&gt;
&lt;p&gt;Consuming API is mainstream so providing API is more and more important. You may even, like &lt;a href=&quot;https://twitter.com/susandanziger&quot;&gt;Susan Danziger&lt;/a&gt;, face unexpected API challenges. Ziggio was a recrutment platform before becoming a video API service. They had to build a video recording component (with an API) and realize that it was a wonderful product. This product allowed Ziggio to turn to an API based model company and turn its competitor into customers.&lt;/p&gt;

&lt;p&gt;Once you provide API, you’ll have to find the right monetization model. As &lt;a href=&quot;https://twitter.com/TheMarkONeill&quot;&gt;Mark O’Neil&lt;/a&gt; and &lt;a href=&quot;https://twitter.com/susandanziger&quot;&gt;Susan Danziger&lt;/a&gt; stated: API monetization doesn’t just mean charging for API calls. Finding a good model is hard. For Ziggio, the success came from the &lt;em&gt;Mickey Mouse&lt;/em&gt; model, based on how Disney was monetizing its licences.&lt;/p&gt;

&lt;div class=&quot;jekyll-twitter-plugin&quot;&gt;&lt;blockquote class=&quot;twitter-tweet&quot; align=&quot;center&quot;&gt;&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;&amp;quot;Mickey model&amp;quot;: Consumers pay for feature tier, pay for overages. &lt;a href=&quot;https://t.co/tAu6W6D6eF&quot;&gt;https://t.co/tAu6W6D6eF&lt;/a&gt; &lt;a href=&quot;https://twitter.com/susandanziger&quot;&gt;@susandanziger&lt;/a&gt; &lt;a href=&quot;https://twitter.com/hashtag/APIStrat?src=hash&quot;&gt;#APIStrat&lt;/a&gt;&lt;/p&gt;&amp;mdash; Allen Clayton (@ajclayton) &lt;a href=&quot;https://twitter.com/ajclayton/status/794178601998491648&quot;&gt;November 3, 2016&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async=&quot;&quot; src=&quot;//platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;&lt;/div&gt;

&lt;p&gt;Whatever the model you choose, allways give the means to let your customers know what the bill will be (with a simulator for instance).&lt;/p&gt;

&lt;h2 id=&quot;architecture&quot;&gt;Architecture&lt;/h2&gt;
&lt;p&gt;Architecture is not a matter of belief, it’s a matter of context and purpose. &lt;a href=&quot;https://twitter.com/emckean&quot;&gt;Erin McKean&lt;/a&gt; reminded us that in a very entertaining and insightful talk which showed us how the &lt;a href=&quot;https://www.wordnik.com/&quot;&gt;Wordnik&lt;/a&gt; architecture was being simplified. When designing architecture you MUST know the constraints to make the right decision. &lt;a href=&quot;https://twitter.com/launchany&quot;&gt;James Higginbotham&lt;/a&gt; also told us to step back from digital transformation focusing only on technology. We need to choose tools wisely with a purpose, a goal and not just because it’s cool and shining new (&lt;em&gt;who said GraphQL and microservices?&lt;/em&gt;).&lt;/p&gt;

&lt;p&gt;The future of API architecture’s scalability lies in event driven architecture instead of request driven architecture told us &lt;a href=&quot;https://twitter.com/TheMarkONeill&quot;&gt;Mark O’Neil&lt;/a&gt;. But it’s mainstream present lies in managed service like AWS API Gateway and Lambda as told us &lt;a href=&quot;https://twitter.com/emckean&quot;&gt;Erin McKean&lt;/a&gt;: these solutions lower heavily the knowledge and expertise needed to handle scalability. In the last month zero time was spent on this new architecture, and it costs less money.&lt;/p&gt;

&lt;p&gt;The future is dark for big API management solutions: &lt;a href=&quot;https://twitter.com/TheMarkONeill&quot;&gt;Mark O’Neil&lt;/a&gt; told us that the microgateway , a small low-footprint, scriptable, API gateway in nginx or node.js is becoming mainstream.&lt;/p&gt;

&lt;h2 id=&quot;design--governance&quot;&gt;Design &amp;amp; Governance&lt;/h2&gt;
&lt;p&gt;When you provide an API, you don’t do that &lt;em&gt;just because&lt;/em&gt;. You do that hoping that people will use it. So don’t be a jerk: take care of what you provide and how you provide it.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;My parts are showing?&lt;br /&gt;
&lt;em&gt;C3PO&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Do you know how your microwave oven works? &lt;a href=&quot;https://en.wikipedia.org/wiki/Microwave_oven&quot;&gt;Probably not&lt;/a&gt;. But, still, you can use it by using its simple interface which do not mirror its internal organization. This is the perfect example of an &lt;em&gt;outside in&lt;/em&gt; design approach.&lt;/p&gt;

&lt;p&gt;But the design road to hell is paved with good intentions. The desire of perfection will be hit by reality. As &lt;a href=&quot;https://twitter.com/mbernier&quot;&gt;Matt Bernier&lt;/a&gt; tolds us: &lt;em&gt;People will not care about a bad designed canonical REST API&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;If you design API, listen to &lt;a href=&quot;https://twitter.com/launchany&quot;&gt;James Higginbotham&lt;/a&gt; “&lt;em&gt;Consumers don’t care about what’s behind the API. Be outside in and not inside out&lt;/em&gt;” and &lt;a href=&quot;https://twitter.com/TheMarkONeill&quot;&gt;Mark O’Neil&lt;/a&gt; “&lt;em&gt;Don’t dump your internal data model on your mobile clients!&lt;/em&gt;” &lt;em&gt;(who said GraphQL?)&lt;/em&gt;.&lt;/p&gt;

&lt;div class=&quot;jekyll-twitter-plugin&quot;&gt;&lt;blockquote class=&quot;twitter-tweet&quot; align=&quot;center&quot;&gt;&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;Gordian knot of API design: The Conway&amp;#39;s Law &lt;a href=&quot;https://twitter.com/libel_vox&quot;&gt;@libel_vox&lt;/a&gt; &lt;a href=&quot;https://twitter.com/hashtag/APIStrat?src=hash&quot;&gt;#APIStrat&lt;/a&gt; &lt;a href=&quot;https://t.co/1WkZAUcQcX&quot;&gt;https://t.co/1WkZAUcQcX&lt;/a&gt; &lt;a href=&quot;https://t.co/HQYLYxS6pO&quot;&gt;pic.twitter.com/HQYLYxS6pO&lt;/a&gt;&lt;/p&gt;&amp;mdash; API Handyman (@apihandyman) &lt;a href=&quot;https://twitter.com/apihandyman/status/794212165808951296&quot;&gt;November 3, 2016&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async=&quot;&quot; src=&quot;//platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;&lt;/div&gt;

&lt;p&gt;And don’t dare to think that the outside in approach is only a technical matter or you may see a snarling &lt;a href=&quot;https://twitter.com/libel_vox&quot;&gt;Matthew Reinbold&lt;/a&gt; looking at you with fierce eyes. He reminded us that &lt;a href=&quot;https://en.wikipedia.org/wiki/Conway%27s_law&quot;&gt;Conway’s law&lt;/a&gt; waits in the darkness like a sword of Damocles hanging upon your API design. Internal organization is different from external perception and mirroring it in an API may not be the best idea. &lt;a href=&quot;https://twitter.com/launchany&quot;&gt;James Higginbotham&lt;/a&gt; even urge enterprises to get rid of project based IT and embrace product based IT. Splitting resource on multiple teams or building separate APIs from each entity in a big group will not provide a unifed view and consistent, understandable and usable API.&lt;/p&gt;

&lt;p&gt;Beyond the risk of having people NOT using your API, you may even loose customers because your API sucks. &lt;a href=&quot;https://twitter.com/SmartBearAmber&quot;&gt;Amber Fallon&lt;/a&gt; asked us: “&lt;em&gt;what will happen when a bank provides a terrible API which is used in a popular pfm (personal finance management) app with other banks API?&lt;/em&gt;”, customers may just switch to the bank offering the best experience with this pfm application.&lt;/p&gt;

&lt;p&gt;You get it now. You have to take care of your design and do it the best way. So, as &lt;a href=&quot;https://twitter.com/JeremiahLee&quot;&gt;Jeremiah Lee&lt;/a&gt; told us: work HARD on API design so it will be easy to use on the client side.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;DX = SPEC + DOC + LIB&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;API design is only an ingredient in the developer experience (DX) recipe. Take care of all aspects of API consuming. As &lt;a href=&quot;https://twitter.com/mbernier&quot;&gt;Matt Bernier&lt;/a&gt; explained, developer experience is a combination of API specification documentation and client libraries.&lt;/p&gt;

&lt;p&gt;Once designed the hard work is not over. Your API WILL evolve. You WILL introduce breaking changes. You’ll have to find an incentive to make your consumers move to the new version of your API, especially for technical upgrades.&lt;a href=&quot;https://twitter.com/JeremiahLee&quot;&gt;Jeremiah Lee&lt;/a&gt; showed us that when migrating from Oauth1 to Oauth2, introducing new functionnalities only in the Oauth2 version of the Fitbit API was a successful strategy.&lt;/p&gt;

&lt;p&gt;Even if developers suck at designing API (&lt;em&gt;just kidding&lt;/em&gt;), some of your dev may have good ideas. At Fitbit, developers can submit API modification by making a pull request on an OpenAPI specification.&lt;/p&gt;

&lt;h2 id=&quot;law-and-order&quot;&gt;Law and Order&lt;/h2&gt;

&lt;div class=&quot;jekyll-twitter-plugin&quot;&gt;&lt;blockquote class=&quot;twitter-tweet&quot; align=&quot;center&quot;&gt;&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;Stoked to be learning more about Oracle v Google from &lt;a href=&quot;https://twitter.com/sarahjeong&quot;&gt;@sarahjeong&lt;/a&gt; at &lt;a href=&quot;https://twitter.com/hashtag/apistrat?src=hash&quot;&gt;#apistrat&lt;/a&gt; &lt;a href=&quot;https://t.co/h8tow5oY2I&quot;&gt;pic.twitter.com/h8tow5oY2I&lt;/a&gt;&lt;/p&gt;&amp;mdash; Kin Lane (@kinlane) &lt;a href=&quot;https://twitter.com/kinlane/status/794295988114640897&quot;&gt;November 3, 2016&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async=&quot;&quot; src=&quot;//platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;&lt;/div&gt;

&lt;p&gt;Journalist by trade, lawyer by training, &lt;a href=&quot;https://twitter.com/sarahjeong&quot;&gt;Sarah Jeong&lt;/a&gt; bringed us the story of the epic Oracle vs Google battle with her amazing talk &lt;em&gt;You wouldn’t reimplement an API&lt;/em&gt;.&lt;/p&gt;

&lt;div class=&quot;jekyll-twitter-plugin&quot;&gt;&lt;blockquote class=&quot;twitter-tweet&quot; align=&quot;center&quot;&gt;&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;&lt;a href=&quot;https://twitter.com/hashtag/apistrat?src=hash&quot;&gt;#apistrat&lt;/a&gt; &lt;a href=&quot;https://twitter.com/sarahjeong&quot;&gt;@sarahjeong&lt;/a&gt; made a timeline! &lt;a href=&quot;https://t.co/IowcwmOqH3&quot;&gt;pic.twitter.com/IowcwmOqH3&lt;/a&gt;&lt;/p&gt;&amp;mdash; Heidi @ home (@wiredferret) &lt;a href=&quot;https://twitter.com/wiredferret/status/794299964407107585&quot;&gt;November 3, 2016&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async=&quot;&quot; src=&quot;//platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;&lt;/div&gt;

&lt;p&gt;This appalling and insightful story reminded us that explaining what is an API to non technical people (the jury), especially in a trial, is quite a challenge. Did the jury understand? Probably not. They may have abandoned after trying to read source code with notepad. &lt;em&gt;Don’t get me wrong, the problem is not with the jury but with what they have faced&lt;/em&gt;.&lt;/p&gt;

&lt;div class=&quot;jekyll-twitter-plugin&quot;&gt;&lt;blockquote class=&quot;twitter-tweet&quot; align=&quot;center&quot;&gt;&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;The key to the Oracle vs Google trial seems to be the understanding of what an API is. Want to copyright these? no. &lt;a href=&quot;https://twitter.com/sarahjeong&quot;&gt;@sarahjeong&lt;/a&gt; &lt;a href=&quot;https://twitter.com/hashtag/APIStrat?src=hash&quot;&gt;#APIStrat&lt;/a&gt; &lt;a href=&quot;https://t.co/iZ08qNtm4U&quot;&gt;pic.twitter.com/iZ08qNtm4U&lt;/a&gt;&lt;/p&gt;&amp;mdash; API Handyman (@apihandyman) &lt;a href=&quot;https://twitter.com/apihandyman/status/794296871665729536&quot;&gt;November 3, 2016&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async=&quot;&quot; src=&quot;//platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;&lt;/div&gt;

&lt;p&gt;Finally Google won… for the time being. But what are the consequences? Nobody knows.&lt;/p&gt;

&lt;div class=&quot;jekyll-twitter-plugin&quot;&gt;&lt;blockquote class=&quot;twitter-tweet&quot; align=&quot;center&quot;&gt;&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;&lt;a href=&quot;https://twitter.com/hashtag/apistrat?src=hash&quot;&gt;#apistrat&lt;/a&gt; &lt;a href=&quot;https://twitter.com/sarahjeong&quot;&gt;@sarahjeong&lt;/a&gt; tells us some v. Important lessons learned. &lt;a href=&quot;https://t.co/hsgmxwv3K7&quot;&gt;pic.twitter.com/hsgmxwv3K7&lt;/a&gt;&lt;/p&gt;&amp;mdash; Heidi @ home (@wiredferret) &lt;a href=&quot;https://twitter.com/wiredferret/status/794300612984918016&quot;&gt;November 3, 2016&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async=&quot;&quot; src=&quot;//platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;&lt;/div&gt;

&lt;p&gt;You can read the full story in &lt;a href=&quot;https://twitter.com/sarahjeong&quot;&gt;Sarah Jeong&lt;/a&gt;’s post &lt;em&gt;&lt;a href=&quot;http://motherboard.vice.com/read/in-google-v-oracle-the-nerds-are-getting-owned&quot;&gt;In Oracle v. Google, a Nerd Subculture Is on Trial&lt;/a&gt;&lt;/em&gt;.&lt;/p&gt;

&lt;h2 id=&quot;chaos-opportunities-and-attention&quot;&gt;Chaos, opportunities and attention&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://twitter.com/mamund&quot;&gt;Mike Amundsen&lt;/a&gt; unleashed a life-saving chaos upon us. He showed us how chaos saved Nintendo from financial ruin.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Alas, Radar Scope was not a hit in America. In fact, it sold only 1,000 units, leaving 2,000 arcade machines with very expensive hardware sitting in Nintendo’s warehouse. The implications were potentially devastating. Nintendo could either give up, and face financial ruin, or it could develop a conversion kit that would turn those cabinets into something marketable. 
&lt;a href=&quot;http://www.gamasutra.com/view/feature/134790/the_secret_history_of_donkey_kong.php&quot;&gt;The secret history of Donkey Kong by Travis Fahs&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Hiroshi Yamauchi, CEO of Nintendo, chose to give the lead of this last chance project to a young and inexperienced &lt;a href=&quot;https://en.wikipedia.org/wiki/Shigeru_Miyamoto&quot;&gt;Shigeru Miyamoto&lt;/a&gt; … the future creator of Super Mario. Miyamoto created of totally new type of game, Donkey Kong, that was a huge success. He broke all the existing video games rules because he was not aware of them.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;(https://twitter.com/mamund)&quot;&gt;Mike&lt;/a&gt; showed us also us we needed leaders who can maintain stability around chaos. Serendipity needs a fertile ground, we must create openness to enable new ideas. Opportunities will come from the people around us. On the contrary, asking for data and measurements is the best way to stop creative works.&lt;/p&gt;

&lt;p&gt;On a more personal level, &lt;a href=&quot;(https://twitter.com/mamund)&quot;&gt;he&lt;/a&gt; told us that our life is like a lego box and not like a jigsaw that has only one way to get it right. We need to create whitespace for ourselves to think. When working on something, we need a break, we need to do something else to refuel our brain and free it. &lt;em&gt;And &lt;a href=&quot;https://twitter.com/JeremiahLee&quot;&gt;Jeremiah Lee&lt;/a&gt; gave us this whitespace at API Strat! Before his talk he made all the room moving, jumping, running in place, yelling, refueling everyone.&lt;/em&gt;&lt;/p&gt;

&lt;div class=&quot;jekyll-twitter-plugin&quot;&gt;&lt;blockquote class=&quot;twitter-tweet&quot; align=&quot;center&quot;&gt;&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;Cultivating Coders foundation &lt;a href=&quot;https://t.co/CAORmxH05g&quot;&gt;https://t.co/CAORmxH05g&lt;/a&gt;  &lt;a href=&quot;https://twitter.com/CAsh_The3rd&quot;&gt;@CAsh_The3rd&lt;/a&gt; &lt;a href=&quot;https://twitter.com/hashtag/APIStrat?src=hash&quot;&gt;#APIStrat&lt;/a&gt; &lt;a href=&quot;https://t.co/o0iXO3W1kO&quot;&gt;pic.twitter.com/o0iXO3W1kO&lt;/a&gt;&lt;/p&gt;&amp;mdash; API Handyman (@apihandyman) &lt;a href=&quot;https://twitter.com/apihandyman/status/794544774703435778&quot;&gt;November 4, 2016&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async=&quot;&quot; src=&quot;//platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;https://twitter.com/CAsh_The3rd&quot;&gt;Charles Ashley&lt;/a&gt; told us his story, how he came to create the &lt;a href=&quot;https://cultivatingcoders.com/public_html/foundation/&quot;&gt;Cultivating Coders Foundation&lt;/a&gt;. He reminded us that we shouldn’t take for granted our heavily connected life. In this world, even in developed countries, people still have to go to a library to have access to knowledge.&lt;/p&gt;

&lt;div class=&quot;jekyll-twitter-plugin&quot;&gt;&lt;blockquote class=&quot;twitter-tweet&quot; align=&quot;center&quot;&gt;&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;Are we just &amp;quot;interested&amp;quot; or are we &amp;quot;committed&amp;quot; to addressing our systemic diversity problem in tech? &lt;a href=&quot;https://twitter.com/CAsh_The3rd&quot;&gt;@CAsh_The3rd&lt;/a&gt; &lt;a href=&quot;https://twitter.com/hashtag/apistrat?src=hash&quot;&gt;#apistrat&lt;/a&gt; &lt;a href=&quot;https://t.co/MkYCZkf5ax&quot;&gt;pic.twitter.com/MkYCZkf5ax&lt;/a&gt;&lt;/p&gt;&amp;mdash; Kin Lane (@kinlane) &lt;a href=&quot;https://twitter.com/kinlane/status/794544708106199040&quot;&gt;November 4, 2016&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async=&quot;&quot; src=&quot;//platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;&lt;/div&gt;

&lt;p&gt;And opportunities heavily depend on what you can access. So &lt;a href=&quot;https://twitter.com/CAsh_The3rd&quot;&gt;he&lt;/a&gt; asked us: &lt;em&gt;are you committed or interested?&lt;/em&gt;.&lt;/p&gt;

&lt;div class=&quot;jekyll-twitter-plugin&quot;&gt;&lt;blockquote class=&quot;twitter-tweet&quot; align=&quot;center&quot;&gt;&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;&lt;a href=&quot;https://twitter.com/apievangelist&quot;&gt;@apievangelist&lt;/a&gt; Kin Lane shares his very personal story with &lt;a href=&quot;https://twitter.com/hashtag/APIStrat?src=hash&quot;&gt;#APIStrat&lt;/a&gt;. &lt;a href=&quot;https://twitter.com/hashtag/important?src=hash&quot;&gt;#important&lt;/a&gt; &lt;a href=&quot;https://t.co/0f7ydxQrrB&quot;&gt;pic.twitter.com/0f7ydxQrrB&lt;/a&gt;&lt;/p&gt;&amp;mdash; David J. Biesack (@davidbiesack) &lt;a href=&quot;https://twitter.com/davidbiesack/status/794634464475353088&quot;&gt;November 4, 2016&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async=&quot;&quot; src=&quot;//platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;&lt;/div&gt;

&lt;p&gt;My friend, &lt;a href=&quot;https://twitter.com/kinlane&quot;&gt;Kin Lane&lt;/a&gt;, the &lt;a href=&quot;http://apievangelist.com&quot;&gt;API Evangelist&lt;/a&gt;, captured the public attention with an unvarnished talk &lt;em&gt;Drone Recovery In The Attention Economy&lt;/em&gt;. He shared with us his very personal story, leaving me thoughtful on my very existence. I urge you to read this story on the &lt;a href=&quot;https://apievangelist.com/2016/11/04/drone-recovery-in-the-attention-economy/&quot;&gt;API Evangelist blog&lt;/a&gt;.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;“Attention” is a noun, but it refers to an action and/or a state of being. Attention is a mental activity. An earnest activity – which I particularly like.
&lt;a href=&quot;https://apievangelist.com/2016/11/04/drone-recovery-in-the-attention-economy/&quot;&gt;Kin Lane&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Pay attention to yourself, to your life, to your job, to your family, to the people around you.&lt;/p&gt;

&lt;h1 id=&quot;people-first&quot;&gt;People First&lt;/h1&gt;
&lt;p&gt;Friday 10pm. So there we were the last API nerds standing, having a long but last discussion before flying back home. All topics and items, weither technical or personnal, sticking in my selective memory have something in common. This last discussion was about this common denominator too.&lt;/p&gt;

&lt;p&gt;People.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;No single piece of technology is what truly matters, not even the API, it all depends on what I do with them, and how we empower (or hurt) humans with them. This is a human story. This is my story. It is not a technology story. It is my personal journey. The technology is just one of the tools in my toolbox. 
&lt;a href=&quot;https://apievangelist.com/2016/11/04/drone-recovery-in-the-attention-economy/&quot;&gt;Kin Lane&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;When we do API (or anything), we must not think code first or API first. We must think people first.
The people directly involved by our projects. What problem are we solving? Does our architecture/solution can be created and managed easily by people? Does our API/Service/Product is useable by people? People ARE what will make our projects succeed.&lt;/p&gt;

&lt;p&gt;But we also need to think about the people beyond our projects. What do we do to help people around us? Are we committed?&lt;/p&gt;

&lt;p&gt;So maybe in the future will we try to talk less about how we build APIs (but we still need to talk about it) and more about what we (try to) solve with them.&lt;/p&gt;

&lt;p&gt;Thanks to all people involved, it was an awesome trip, it was an awesome conference.&lt;/p&gt;

&lt;p&gt;See you at next API Strat.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Boston Library Photography by &lt;a href=&quot;http://www.misterlapin.com&quot;&gt;Cinzia Dosa Lauret&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;</content><author><name>Arnaud Lauret</name></author><category term="posts" /><category term="API Strat" /><category term="API Strat Boston" /><category term="Conference" /><category term="Code of conduct" /><category term="Architecture" /><category term="Design" /><category term="Governance" /><category term="Strategy" /><category term="Monetization" /><category term="People" /><summary type="html">The last API Strat 2016 day, after the last talk, a man living in kentucky asked me something like What is the one thing you will remember about this conference?. I answered something like People First.

People First. This is definitely what sticks in my mind after this conference.</summary></entry><entry><title type="html">OpenAPI Trek Into Fastness (Nordic APIs Summit 2016)</title><link href="https://apihandyman.io/openapi-trek-into-fastness-nordic-apis-summit-2016/" rel="alternate" type="text/html" title="OpenAPI Trek Into Fastness (Nordic APIs Summit 2016)" /><published>2016-11-19T11:37:34+00:00</published><updated>2016-11-19T11:37:34+00:00</updated><id>https://apihandyman.io/openapi-trek-into-fastness-nordic-apis-summit-2016</id><content type="html" xml:base="https://apihandyman.io/openapi-trek-into-fastness-nordic-apis-summit-2016/">&lt;p&gt;After API Days London, I’ve been to the Nordic APIs Summit in Stockholm for the second part of my OpenAPI specification (fka. Swagger specification) talk series with &lt;em&gt;OpenAPI Trek Into Fastness&lt;/em&gt;.&lt;!--more--&gt;&lt;/p&gt;

&lt;p&gt;This series is composed of three talks:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://apihandyman.io/openapi-trek-api-days-london-2016/&quot;&gt;OpenAPI Trek at API Days London 2016&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;OpenAPI Trek Into Fastness at Nordic APIs Stockholm Summit 2016&lt;/li&gt;
  &lt;li&gt;OpenAPI Trek Beyond API Documentation at APIStrat Boston 2016 (post coming soon)&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;Fastness means being fast.
But it also means being secured.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This talk shows how to attain API Fastness with the OpenAPI specification. Here are the video and slides:&lt;/p&gt;

&lt;div class=&quot;embedpad&quot;&gt;&lt;div class=&quot;youtube embedded embed-responsive embed-responsive-16by9&quot;&gt;&lt;iframe width=&quot;740&quot; height=&quot;416&quot; src=&quot;//www.youtube.com/embed/8Q0Yu81rRmU?color=white&amp;amp;theme=light&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class=&quot;embedpad&quot;&gt;&lt;div class=&quot;speackerdeck embedded embed-responsive embed-responsive-4by3&quot;&gt;&lt;script async=&quot;&quot; class=&quot;speakerdeck-embed&quot; data-id=&quot;e6ec07b2713942fab1effc17a6ad5b41&quot; data-ratio=&quot;1.77777777777778&quot; src=&quot;//speakerdeck.com/assets/embed.js&quot;&gt;&lt;/script&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name>Arnaud Lauret</name></author><category term="talks" /><category term="OpenAPI" /><category term="Swagger" /><category term="Conference" /><category term="NordicAPIs" /><category term="NordicAPIs Summit" /><category term="NordicAPIs Summit Stockholm" /><summary type="html">After API Days London, I’ve been to the Nordic APIs Summit in Stockholm for the second part of my OpenAPI specification (fka. Swagger specification) talk series with OpenAPI Trek Into Fastness.</summary></entry></feed>
