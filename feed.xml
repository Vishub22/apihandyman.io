<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.8.5">Jekyll</generator><link href="https://apihandyman.io/feed.xml" rel="self" type="application/atom+xml" /><link href="https://apihandyman.io/" rel="alternate" type="text/html" /><updated>2019-10-24T23:28:32+00:00</updated><id>https://apihandyman.io/feed.xml</id><title type="html">API Handyman</title><subtitle>{&quot;input&quot; : &quot;learn&quot;, &quot;output&quot; : &quot;share&quot;}</subtitle><entry><title type="html">Explore the OpenAPI Specification 3.0 with the OpenAPI Map</title><link href="https://apihandyman.io/explore-the-openapi-specification-3.0-with-the-openapi-map/" rel="alternate" type="text/html" title="Explore the OpenAPI Specification 3.0 with the OpenAPI Map" /><published>2018-03-09T00:00:00+00:00</published><updated>2018-03-09T00:00:00+00:00</updated><id>https://apihandyman.io/explore-the-openapi-specification-3.0-with-the-openapi-map</id><content type="html" xml:base="https://apihandyman.io/explore-the-openapi-specification-3.0-with-the-openapi-map/">&lt;p&gt;So you want to explore in depth the OpenAPI Specification version 3.0? You should take the OpenAPI Map with you!&lt;!--more--&gt;&lt;/p&gt;

&lt;p&gt;The OpenAPI Specification Visual Documentation is dead, long live the &lt;a href=&quot;http://openapi-map.apihandyman.io/&quot;&gt;OpenAPI Map&lt;/a&gt;! Very special thanks to &lt;a href=&quot;https://twitter.com/earth2marsh&quot;&gt;Marsh Gardiner&lt;/a&gt; for helping me find this name.&lt;/p&gt;

&lt;h1 id=&quot;what-is-the-openapi-map&quot;&gt;What is the OpenAPI Map?&lt;/h1&gt;

&lt;p&gt;Just in case you missed previous releases, the OpenAPI Map is a representation of the OpenAPI Specification documentation as a tree. Using it, you can see how an OpenAPI document is organized and discover all OpenAPI objects and properties dark secrets.&lt;/p&gt;

&lt;div&gt;
      &lt;a href=&quot;http://openapi-map.apihandyman.io/&quot;&gt;&lt;img src=&quot;/images/commons/openapi/openapi-map.png&quot; /&gt;&lt;/a&gt;
      &lt;p class=&quot;img-label&quot;&gt;&lt;a href=&quot;http://openapi-map.apihandyman.io/&quot;&gt;OpenAPI Map&lt;/a&gt;&lt;/p&gt;
    &lt;/div&gt;

&lt;h1 id=&quot;updated-300-rc0-to-30&quot;&gt;Updated 3.0.0-rc0 to 3.0&lt;/h1&gt;

&lt;p&gt;Besides changing the tool’s name, I have replaced the OAS 3.0.0-rc0 version by 3.0 (3.0.1 precisely). You can now fully explore the OpenAPI Specification 3.0 version. This update from 3.0.0-rc0 to 3.0 was a bit longer than expected. There were quite some changes between the early 3.0.0-rc0 version and 3.0 official release. The version 3.0 is now fully documented and includes a complete changelog from version 2.0.&lt;/p&gt;

&lt;h1 id=&quot;other-enhancements&quot;&gt;Other enhancements&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;The Open API Map shows version 3.0 by default&lt;/li&gt;
  &lt;li&gt;Version 2.0 is still available via the navigation bar and you can now even access it directly using this link: &lt;a href=&quot;http://openapi-map.apihandyman.io/?version=2.0&quot;&gt;http://openapi-map.apihandyman.io/?version=2.0&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;Mandatory properties labels are now in red, no more need to pass mouse over a property to see it &lt;a href=&quot;https://github.com/arno-di-loreto/openapi-map/issues/10&quot;&gt;Issue #10&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;source-available-on-github&quot;&gt;Source available on Github&lt;/h1&gt;

&lt;p&gt;You can fork this project on &lt;a href=&quot;https://github.com/arno-di-loreto/openapi-map&quot;&gt;github&lt;/a&gt;. I have updated the readme in order to help people understand how it works but it may need some further updates. So do not hesite to tell me if you need help to use it.&lt;/p&gt;</content><author><name>Arnaud Lauret</name></author><category term="elsewhere" /><summary type="html">So you want to explore in depth the OpenAPI Specification version 3.0? You should take the OpenAPI Map with you!</summary></entry><entry><title type="html">How public web APIs raise software bar</title><link href="https://apihandyman.io/how-public-web-apis-raise-software-bar/" rel="alternate" type="text/html" title="How public web APIs raise software bar" /><published>2018-02-26T00:00:00+00:00</published><updated>2018-02-26T00:00:00+00:00</updated><id>https://apihandyman.io/how-public-web-apis-raise-the-software-bar</id><content type="html" xml:base="https://apihandyman.io/how-public-web-apis-raise-software-bar/">&lt;p&gt;While answering some question on my &lt;a href=&quot;http://bit.ly/designwebapis&quot;&gt;Design of Web APIs&lt;/a&gt; book’s &lt;a href=&quot;https://forums.manning.com/posts/list/42828.page&quot;&gt;forum&lt;/a&gt;, I wrote:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Now that I have seen brilliant Web APIs that can be used so easily because of their design but also the overall experience some can provide (the famous “DX”) I have become far more demanding and challenging with software in general&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Yes. Public web APIs definitely raise software bar. The whole software industry should take example on them … &lt;!--more--&gt;&lt;/p&gt;

&lt;h1 id=&quot;the-ideal-world-of-public-web-apis&quot;&gt;The Ideal world of public web APIs&lt;/h1&gt;

&lt;p&gt;I have been tinkering with web services and web APIs for a while now and it’s really interesting how the quite technical concept of remote Application Programming Interface moved my perception of sofware from a purely technical vision to something more human centered. I switched from &lt;em&gt;code software that solve problems&lt;/em&gt; to &lt;em&gt;design software that people use to fulfill their needs&lt;/em&gt;. How some companies envision providing public web APIs is even pushing this vision into &lt;em&gt;design software that people will love to use&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;How is this possible?&lt;/p&gt;

&lt;p&gt;Willingly or in order to make profit or both, we don’t care, these companies design APIs that you can understand at first sight and use easily to do what you want. But that’s not all, the API comes with all needed material in order to help you seamlessly; reference documentation, tutorial, sandbox, ready to use examples, sdks, … Everything is &lt;em&gt;designed&lt;/em&gt; in order to provide a wonderful experience with a minimal effort. Sometimes, this experience is so perfect, that you are just happy when using this API. Sometimes this experience so invisible that you feel incredibly smart because the whole system let you think that you use it instinctively.&lt;/p&gt;

&lt;p&gt;Both provider and consumer benefits from such experience. Consumers are autonomous, don’t lose time and money to use the API. They are so happy that may even promote the solution. Providers gain easily customers and lessen the need of support (or at least can focus on support where it’s really needed).&lt;/p&gt;

&lt;p&gt;Of course, not all public APIs provide such experience. And in some other domains of the software industry, we are at light years of that…&lt;/p&gt;

&lt;h1 id=&quot;the-crude-reality-of-not-so-dark-corners-of-the-software-industry&quot;&gt;The crude reality of not so dark corners of the software industry&lt;/h1&gt;

&lt;p&gt;Some words about me and my job: I am an architect in the banking industry…&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Nobody expects the Architect Inquisition!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;… but not the dreaded enterprise architect living in his ivory tower. Throwing utopian or unrealistic edict. Burning the heretics who dare to not apply them. No, definitely not that kind. I come from the trenches, I have been a developer, a project manager, a developer team manager. Now as an architect from the trenches, I have to deal with real world problems and find real world solutions. Always striking a balance between the sanity of our IT system, people building it, people running it and people using it and of course … money.&lt;/p&gt;

&lt;p&gt;In my daily job, I work with a motley collection of software solutions: homemade, open source, vendor ones, as a service, on premise, … All these software can be roughly separated in two categories: the software I choose on a shelf and the software I design.&lt;/p&gt;

&lt;p&gt;To tell the truth, I’m getting tired of software solutions I have to choose on a shelf that are only &lt;em&gt;created to solve problems&lt;/em&gt; and not &lt;em&gt;designed for people to fullfil their needs&lt;/em&gt;.
The gap between some enterprise grade software solutions and some (ideal) public web APIs is sometimes so wide that the Hubble telescope would probably not be able to see something from one end to the other. The cost of using some crappy designed solution is sometime really frightening.
When I choose a software, I mainly these criterias:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Does it fullfil our business needs?&lt;/li&gt;
  &lt;li&gt;How is it complicated/easy to install, run and use it?&lt;/li&gt;
  &lt;li&gt;Does it provide an API? what’s its quality?&lt;/li&gt;
  &lt;li&gt;How does look like its documentation?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If the first question is usually not a problem, the others are too often problematic. And this is usually a huge source of problems, time losed and money losed.&lt;/p&gt;

&lt;h1 id=&quot;a-open-letter-to-enterprise-grade-vendor-solutions&quot;&gt;A open letter to enterprise grade vendor solutions&lt;/h1&gt;

&lt;p&gt;Dear enterprise grade software solution vendors,&lt;/p&gt;

&lt;p&gt;When I use a public web API, I don’t know what’s happening behind the interface and I don’t care. I can also use it easiliy. When I have to install a software on premise, I would like to have something equivalent. Of course I may have to install something and do some configuration. But please, I don’t want to be an expert of your product implementation nor its installation. I don’t want to lose months to install you product. Do you know that you can &lt;em&gt;automate&lt;/em&gt; many things when you use &lt;em&gt;software&lt;/em&gt;? Do you know that now you can even package your solution to provide “one click” installation in some cloud services?&lt;/p&gt;

&lt;p&gt;When I use a public web API, you know what? I have an API to use. I would be glad if your product provide one. Having an API would definitely ease the job of making my motley collection of software work together.&lt;/p&gt;

&lt;p&gt;When I use a public web API, I have some decent and sometimes even pleasant documentation to understand how to use it on my own. I almost never have to talk to someone to get help. So, just stop to provide totally not user friendly, huge and useless documentation that you wouldn’t even use yourself. Stop selling support that you cannot afford. I have seen some product coming with a 300 pages PDF as documentation. Yes 300 pages. And that’s not the most fun, this document contained some code samples… some of them 20 pages long. Unreadable. Unusable.&lt;/p&gt;

&lt;p&gt;When I use a public web API, I sometimes can use it instinctively, because its design conforms to some common pratices. If your solution provides an API (which is a good thing), you would be wise to stick to these common practices. I do not want to have to learn you &lt;em&gt;very smart but very specific and totally different way of thinking&lt;/em&gt; to use your API.&lt;/p&gt;

&lt;p&gt;When I use a public web API, it may evolve. Such evolution may bring some breaking change. But I am warned and I have time to handle them. I can even use the old and new version at the same time. Some provider even support &lt;em&gt;all&lt;/em&gt; past versions seamlessly. I would love do the same thing with your software.&lt;/p&gt;

&lt;p&gt;Sincerely,
Your not future customer.&lt;/p&gt;

&lt;h1 id=&quot;theres-light-at-the-end-of-the-tunnel&quot;&gt;There’s light at the end of the tunnel&lt;/h1&gt;

&lt;p&gt;Is this situation hopeless? No.&lt;/p&gt;

&lt;p&gt;In an ideal world, I would get rid of all these &lt;em&gt;on premise shitty enterprise proprietary software&lt;/em&gt; and use only software as a service with API solutions (the brilliant ones, offering an outstanding experience, of course).
But we do not live in an ideal and simple world. If such solutions to your need exist, some obstables may prevent its use: regulations, security, sensitive data, performance, legacy systems…&lt;/p&gt;

&lt;p&gt;So beside this solution, the light at the end of the tunnel may come thanks to three things.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;First, as a software solutions designer myself, I now try to promote and create human centered solutions that are simple to build, deploy and operate by following what I’ve seen in the public web API space. I try to take into account &lt;em&gt;all&lt;/em&gt; users of such solutions from dev to end user and also ops.&lt;/li&gt;
  &lt;li&gt;Second, when I choose software solutions, I always provide constructive feedback in order to help vendors enhance their solutions whether I select or reject them.&lt;/li&gt;
  &lt;li&gt;Third, some vendors start to understand by themselves, like I did, that creating human centered solutions is worth the cost for both vendor and customer.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;but-is-this-really-new&quot;&gt;But is this really new?&lt;/h1&gt;

&lt;p&gt;Fundamentally, what we see in the public web APIs space is only what should be done with any software solution and even with any crafted thing since the beginning of all things.
Would you willingly buy a vegetable peeler that comes with a 200 pages user manual, needs 2 months for installation and is a total pain in the ass to use?
Definitely no.
Then why have we considered such experience totally normal with software for decades?
So, yes public web APIs raise the software bar, but only to the level it should have been since the beginning of time.&lt;/p&gt;</content><author><name>Arnaud Lauret</name></author><category term="posts" /><summary type="html">While answering some question on my Design of Web APIs book’s forum, I wrote: Now that I have seen brilliant Web APIs that can be used so easily because of their design but also the overall experience some can provide (the famous “DX”) I have become far more demanding and challenging with software in general Yes. Public web APIs definitely raise software bar. The whole software industry should take example on them …</summary></entry><entry><title type="html">The story behind The Design of Web APIs book</title><link href="https://apihandyman.io/the-story-behind-the-design-of-everyday-apis-book/" rel="alternate" type="text/html" title="The story behind The Design of Web APIs book" /><published>2018-02-10T00:00:00+00:00</published><updated>2018-02-10T00:00:00+00:00</updated><id>https://apihandyman.io/the-story-behind-the-design-of-everyday-apis-book</id><content type="html" xml:base="https://apihandyman.io/the-story-behind-the-design-of-everyday-apis-book/">&lt;p&gt;I’m thrilled to announce that I’m writing a book about API design: &lt;em&gt;The Design of Everyday APIs&lt;/em&gt; (edit: the book has been renamed &lt;em&gt;The Design of Web APIs&lt;/em&gt; since this post has been written). This book is published by &lt;em&gt;Manning Publications&lt;/em&gt; and the first two chapters are now available on the Manning Early Access Program or &lt;a href=&quot;http://bit.ly/designwebapis&quot;&gt;MEAP&lt;/a&gt; (affiliate link, use fcclauret discount code to get 37% off). This book is for everyone who wants to learn API design.
But, what’s the story behind this book about API design? To answer this question, let’s talk about my other passion: guitar. &lt;!--more--&gt;&lt;/p&gt;

&lt;div&gt;
      &lt;img src=&quot;/images/the-story-behind-the-design-of-everyday-apis-book/guitar-tabs.png&quot; /&gt;
      &lt;p class=&quot;img-label&quot;&gt;Guitar tabs&lt;/p&gt;
    &lt;/div&gt;

&lt;p&gt;I have been playing the guitar for quite a long time. I’m definitely not an outstanding guitar player, I do that just for fun. Even if I have basic knowledge of solfeggio, I mostly use tablatures (or tabs) to learn to play songs. The guitar strings are represented by lines. And numbers on the lines indicate where to put fingers on the fret board. Pretty simple. I can play any song. Well, as long as my fingers dexterity allows it. So, I can play almost any song without even kwnowing which musical note I’m doing. But it can take me a long time to master songs, because I mostly do not get immediately how it works. I cannot play a song without a tablature by just listening to it. I’m also unable to compose music, I’m unable to improvise. And if I want to play another musical instrument like the piano, I would have to relearn everything. All this because I simply (but with dexterity!) move my fingers on a guitar fretboard without really understanding what I’m doing and why. When you really know music, it’s quite different. A friend of mine is a music teacher. He knows everything about solfeggio and music theory. He can improvise and compose. He can play any musical instrument as long as he understand how doing notes.&lt;/p&gt;

&lt;p&gt;But what has this to do with API design?&lt;/p&gt;

&lt;div class=&quot;book-banner-big&quot;&gt;
  &lt;a href=&quot;http://bit.ly/designwebapis&quot;&gt;&lt;img src=&quot;/images/commons/book/book-vertical.png&quot; /&gt;&lt;/a&gt;
  &lt;p class=&quot;book-banner-vertical-bottom&quot;&gt;use fcclauret discount code to get 37% off (affiliate link)&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;I’ve been doing distributed software and working with web services and web APIs for a long time now, designing, building, using and providing them. Like many others, I’ve learned many things from the trenches about API design by practicing … and doing many mistakes. Mistakes, that I could have probably easily avoided if I had been warned. I have discovered the not so obvious scope of the API designer’s job and you know what? Choosing HTTP methods and designing URLs is only a part of it. I have also learned how to design APIs that do exactly what they have been created for. And I have also learned how to shape APIs in order to make them easy-to-understand and easy-to-use.&lt;/p&gt;

&lt;p&gt;But I have also learned something beyond these technical tips and tricks. I have learned what really is an API and what it means to design it.&lt;/p&gt;

&lt;p&gt;Knowing that &lt;code&gt;/library/books/the-design-of-everyday-apis/chapters&lt;/code&gt; is a good a way of designing some REST resource’s URL is important. Knowing that simply returning a &lt;code&gt;400 Bad Request&lt;/code&gt; HTTP status code is not enough is important. Knowing that content negociation is a solution to some use case is important. But knowing and understanding the true reasons &lt;em&gt;why&lt;/em&gt; we should or shouldn’t design API like this or that is far more important. This is guitar tablature vs solfeggio and music theory. Would you be able to improvise when facing a new use case? What would you do when designing a SOAP web services (yes, some people still have to do that), a gRPC API or whatever will come in the future?
I could have been a better API designer faster if I had understood earlier the true essence of API design. There are reasons why designing APIs in certain ways gives outstanding results. Understanding the reasons behind techniques and tips that make APIs great is far more important than just knowing them, because it can help to face any situation and design any type of API. Just like being able to play any musical instrument, improvise and compose.&lt;/p&gt;

&lt;div&gt;
      &lt;img src=&quot;/images/the-story-behind-the-design-of-everyday-apis-book/cryptic-interface.png&quot; /&gt;
      &lt;p class=&quot;img-label&quot;&gt;A quite cryptic interface&lt;/p&gt;
    &lt;/div&gt;

&lt;p&gt;But is it hard to master the &lt;em&gt;API design solfeggio&lt;/em&gt;? Hopefully not at all! The &lt;em&gt;API design solfeggio&lt;/em&gt; is quite simple to grasp as long as you understand what really is an API and how you can find inspiration from everyday objects.
OK, an API is an &lt;em&gt;Application Programming Interface&lt;/em&gt;, but it’s first and foremost an &lt;em&gt;interface&lt;/em&gt; that &lt;em&gt;people&lt;/em&gt; will use in their software to interact with your software.
APIs are interfaces like any others. Look at this &lt;em&gt;UDRC 1138&lt;/em&gt; control panel, its &lt;em&gt;interface&lt;/em&gt;. What could be this device’s purpose? How use it? hard to guess thanks to its poorly designed interface. Think about the many times you have been puzzled or you have grumbled when using a everyday object like a door, a microwave oven, a remote control, a toy, a web site, a mobile application because its design was flawed. Think about the many times you did not complain and were even quite happy using something. 
What seems ridiculous for everyday objects interfaces is as ridiculous for application programming interface. And the opposite is quite true, what works for everyday objects interfaces works for APIs.&lt;/p&gt;

&lt;p&gt;So, while &lt;em&gt;The Design of Everyday APIs&lt;/em&gt; (edit: the book has been renamed &lt;em&gt;The Design of Web APIs&lt;/em&gt; since this post has been written) book is a practical one showing every aspects of API design and many techniques, tips and tricks to design great APIs. It will also explain &lt;em&gt;why&lt;/em&gt; you should design APIs that way and therefore, I hope, give you the eye of the API designer.
I hope you’ll enjoy this book and find it useful to design your everyday APIs and build an API designer mindset. As you can read it on &lt;a href=&quot;http://bit.ly/designwebapis&quot;&gt;MEAP&lt;/a&gt; (affiliate link, use fcclauret discount code to get 37% off) while it is written, I look forward to your feedbacks on MEAP forum.&lt;/p&gt;</content><author><name>Arnaud Lauret</name></author><category term="posts" /><summary type="html">I’m thrilled to announce that I’m writing a book about API design: The Design of Everyday APIs (edit: the book has been renamed The Design of Web APIs since this post has been written). This book is published by Manning Publications and the first two chapters are now available on the Manning Early Access Program or MEAP (affiliate link, use fcclauret discount code to get 37% off). This book is for everyone who wants to learn API design. But, what’s the story behind this book about API design? To answer this question, let’s talk about my other passion: guitar.</summary></entry><entry><title type="html">API Styleguide, the Lord of API Designs</title><link href="https://apihandyman.io/api-styleguide-the-lord-of-api-designs/" rel="alternate" type="text/html" title="API Styleguide, the Lord of API Designs" /><published>2017-11-12T00:00:00+00:00</published><updated>2017-11-12T00:00:00+00:00</updated><id>https://apihandyman.io/api-styleguide-the-lord-of-api-designs</id><content type="html" xml:base="https://apihandyman.io/api-styleguide-the-lord-of-api-designs/">&lt;p&gt;Join Frodo, Gollum and Gandalf on an epic API design adventure.
In this session, based on my own experience defining and sharing API design common practices in my company and based on the API styles guides that I have collected on &lt;a href=&quot;http://apistylebook.com&quot;&gt;apistylebook.com&lt;/a&gt;, we will discover why we desperately need API style guides and how they can or cannot help us create a smooth API surface for a company.&lt;/p&gt;

&lt;p&gt;Very special thanks to &lt;a href=&quot;https://twitter.com/mrlapindesign&quot;&gt;Mister Lapin&lt;/a&gt; for designing my T-shirt and &lt;a href=&quot;https://twitter.com/kvantomme&quot;&gt;Kristof Van Tomme&lt;/a&gt; for recording the video with my phone.
&lt;!--more--&gt;&lt;/p&gt;

&lt;div class=&quot;embedpad&quot;&gt;&lt;div class=&quot;youtube embedded embed-responsive embed-responsive-16by9&quot;&gt;&lt;iframe width=&quot;740&quot; height=&quot;416&quot; src=&quot;//www.youtube.com/embed/ZUI5gHdhfwk?color=white&amp;amp;theme=light&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;embedpad&quot;&gt;&lt;div class=&quot;speackerdeck embedded embed-responsive embed-responsive-4by3&quot;&gt;&lt;script async=&quot;&quot; class=&quot;speakerdeck-embed&quot; data-id=&quot;e820736b440a47119e8f3ccb090a9e7e&quot; data-ratio=&quot;1.77777777777778&quot; src=&quot;//speakerdeck.com/assets/embed.js&quot;&gt;&lt;/script&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name>Arnaud Lauret</name></author><category term="talks" /><category term="API Strat" /><category term="API Days" /><category term="Conference" /><category term="Design" /><category term="API Stylebook" /><category term="Video" /><summary type="html">Join Frodo, Gollum and Gandalf on an epic API design adventure. In this session, based on my own experience defining and sharing API design common practices in my company and based on the API styles guides that I have collected on apistylebook.com, we will discover why we desperately need API style guides and how they can or cannot help us create a smooth API surface for a company. Very special thanks to Mister Lapin for designing my T-shirt and Kristof Van Tomme for recording the video with my phone.</summary></entry><entry><title type="html">…And GraphQL for all? talk video on InfoQ</title><link href="https://apihandyman.io/graphql-for-all-talk-video-on-infoq/" rel="alternate" type="text/html" title="...And GraphQL for all? talk video on InfoQ" /><published>2017-09-29T00:00:00+00:00</published><updated>2017-09-29T00:00:00+00:00</updated><id>https://apihandyman.io/graphql-for-all-video-on-infoq</id><content type="html" xml:base="https://apihandyman.io/graphql-for-all-talk-video-on-infoq/">&lt;p&gt;My talk &lt;em&gt;…And GraphQL for all? A few things to think about before blindly dumping REST for GraphQL&lt;/em&gt; which I gave at API Days Paris 2016 last December was recorded and the video is now available on &lt;a href=&quot;https://www.infoq.com/presentations/api-rest-graphql&quot;&gt;InfoQ&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;You can also read my write up &lt;a href=&quot;/and-graphql-for-all-a-few-things-to-think-about-before-blindly-dumping-rest-for-graphql/&quot;&gt;here on the blog&lt;/a&gt;.&lt;/p&gt;</content><author><name>Arnaud Lauret</name></author><category term="talks" /><category term="Design" /><summary type="html">My talk …And GraphQL for all? A few things to think about before blindly dumping REST for GraphQL which I gave at API Days Paris 2016 last December was recorded and the video is now available on InfoQ. You can also read my write up here on the blog.</summary></entry><entry><title type="html">Deliveroo API Design Guidelines added to the API Stylebook</title><link href="https://apihandyman.io/deliveroo-api-design-guidelines-added-to-the-api-stylebook/" rel="alternate" type="text/html" title="Deliveroo API Design Guidelines added to the API Stylebook" /><published>2017-04-25T00:00:00+00:00</published><updated>2017-04-25T00:00:00+00:00</updated><id>https://apihandyman.io/deliveroo-api-design-guidelines-added-to-the-api-stylebook</id><content type="html" xml:base="https://apihandyman.io/deliveroo-api-design-guidelines-added-to-the-api-stylebook/">&lt;p&gt;I’ve added the Deliveroo API Design Guidelines to the API Stylebook.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;These guidelines are definitely a MUST read for any API designer.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;To discover this API design guide and a short review, let’s go to the &lt;a href=&quot;http://apistylebook.com/blog/deliveroo-api-design-styleguide-added-on-the-api-stylebook&quot;&gt;API Stylebook blog&lt;/a&gt;.&lt;/p&gt;</content><author><name>Arnaud Lauret</name></author><category term="elsewhere" /><category term="Design" /><category term="API Stylebook" /><summary type="html">I’ve added the Deliveroo API Design Guidelines to the API Stylebook. These guidelines are definitely a MUST read for any API designer. To discover this API design guide and a short review, let’s go to the API Stylebook blog.</summary></entry><entry><title type="html">API Design Tips And Tricks - Getting, creating, updating or deleting multiple resources in one API call</title><link href="https://apihandyman.io/api-design-tips-and-tricks-getting-creating-updating-or-deleting-multiple-resources-in-one-api-call/" rel="alternate" type="text/html" title="API Design Tips And Tricks - Getting, creating, updating or deleting multiple resources in one API call" /><published>2017-04-22T00:00:00+00:00</published><updated>2017-04-22T00:00:00+00:00</updated><id>https://apihandyman.io/api-design-tips-and-tricks-getting-creating-updating-or-deleting-multiple-resources-in-one-api-call</id><content type="html" xml:base="https://apihandyman.io/api-design-tips-and-tricks-getting-creating-updating-or-deleting-multiple-resources-in-one-api-call/">&lt;p&gt;Getting, creating, updating or deleting multiple resources in a single API call is a common need in REST APIs. But how to achieve that in a consistent way accomodating how we work with a single resource and REST principles? This is what we’ll see in this post.&lt;!--more--&gt;&lt;/p&gt;

&lt;h1 id=&quot;working-with-a-single-resource&quot;&gt;Working with a single resource&lt;/h1&gt;

&lt;p&gt;Before talking about how to work with multiple resources all at once, let’s see how to handle a single resource with a REST API.&lt;/p&gt;

&lt;h2 id=&quot;creating-a-resource&quot;&gt;Creating a resource&lt;/h2&gt;
&lt;p&gt;The common way of creating a &lt;code&gt;resource&lt;/code&gt; is to do a &lt;code&gt;POST&lt;/code&gt; request on &lt;code&gt;/resources&lt;/code&gt;. The body of the request containing the resource to create.&lt;/p&gt;

&lt;div&gt;
  &lt;div class=&quot;code-toolbar&quot;&gt;
    &lt;div class=&quot;btn-group&quot; role=&quot;group&quot; aria-label=&quot;...&quot;&gt;
      
      &lt;button type=&quot;button&quot; class=&quot;btn btn-default btn-copy&quot;&gt;&lt;i class=&quot;fas fa-paste&quot;&gt;&lt;/i&gt;&lt;/button&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;pre class=&quot;language-txt&quot;&gt;&lt;code&gt;POST /resources HTTP/1.1

{
  &amp;quot;some&amp;quot;: &amp;quot;some data&amp;quot;,
  &amp;quot;other&amp;quot;: &amp;quot;some other data&amp;quot;
}&lt;/code&gt;&lt;/pre&gt;
  
&lt;/div&gt;

&lt;p&gt;If everything is OK and the resource created, the response’s status to this request will be a &lt;code&gt;201 Created&lt;/code&gt; and the response’s body will contain at least the ID (&lt;code&gt;id&lt;/code&gt;) or the URL/URI (&lt;code&gt;href&lt;/code&gt;) of the created resources. It may also contain the full resource itself.&lt;/p&gt;

&lt;div&gt;
  &lt;div class=&quot;code-toolbar&quot;&gt;
    &lt;div class=&quot;btn-group&quot; role=&quot;group&quot; aria-label=&quot;...&quot;&gt;
      
      &lt;button type=&quot;button&quot; class=&quot;btn btn-default btn-copy&quot;&gt;&lt;i class=&quot;fas fa-paste&quot;&gt;&lt;/i&gt;&lt;/button&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;pre class=&quot;language-txt&quot;&gt;&lt;code&gt;HTTP/1.1 201 Created

{
  &amp;quot;id&amp;quot;: &amp;quot;ID&amp;quot;,
  &amp;quot;href&amp;quot;: &amp;quot;/resources/ID&amp;quot;,
  &amp;quot;some&amp;quot;: &amp;quot;some data&amp;quot;,
  &amp;quot;other&amp;quot;: &amp;quot;some other data&amp;quot;
}&lt;/code&gt;&lt;/pre&gt;
  
&lt;/div&gt;

&lt;p&gt;If there’s something wrong, the response’s status will be an error, for example a &lt;code&gt;400 Bad Request&lt;/code&gt; because of some missing data and the response’s body will contain information about the error.&lt;/p&gt;

&lt;div&gt;
  &lt;div class=&quot;code-toolbar&quot;&gt;
    &lt;div class=&quot;btn-group&quot; role=&quot;group&quot; aria-label=&quot;...&quot;&gt;
      
      &lt;button type=&quot;button&quot; class=&quot;btn btn-default btn-copy&quot;&gt;&lt;i class=&quot;fas fa-paste&quot;&gt;&lt;/i&gt;&lt;/button&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;pre class=&quot;language-txt&quot;&gt;&lt;code&gt;HTTP/1.1 400 Bad Request

{
  &amp;quot;message&amp;quot;: &amp;quot;missing some data&amp;quot; 
}&lt;/code&gt;&lt;/pre&gt;
  
&lt;/div&gt;

&lt;h2 id=&quot;getting-a-resource&quot;&gt;Getting a resource&lt;/h2&gt;

&lt;p&gt;Once created a resource can be accessed with a &lt;code&gt;GET /resources/ID&lt;/code&gt; request. If everything is OK, the server will return a &lt;code&gt;200 Accepted&lt;/code&gt; and the resource. If there’s something wrong, it will return an error like &lt;code&gt;404 Not Found&lt;/code&gt; if the resource does not exist or a &lt;code&gt;403 Forbidden&lt;/code&gt; if the user is not allowed to access that resource.&lt;/p&gt;

&lt;h2 id=&quot;updating-a-resource&quot;&gt;Updating a resource&lt;/h2&gt;
&lt;p&gt;A &lt;code&gt;PATCH /resources/ID&lt;/code&gt; request will update partially a resource:&lt;/p&gt;

&lt;div&gt;
  &lt;div class=&quot;code-toolbar&quot;&gt;
    &lt;div class=&quot;btn-group&quot; role=&quot;group&quot; aria-label=&quot;...&quot;&gt;
      
      &lt;button type=&quot;button&quot; class=&quot;btn btn-default btn-copy&quot;&gt;&lt;i class=&quot;fas fa-paste&quot;&gt;&lt;/i&gt;&lt;/button&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;pre class=&quot;language-txt&quot;&gt;&lt;code&gt;PATCH /resources HTTP/1.1

{
  &amp;quot;other&amp;quot;: &amp;quot;modified data&amp;quot;
}&lt;/code&gt;&lt;/pre&gt;
  
&lt;/div&gt;

&lt;p&gt;If everything is OK, the server will return a OK status like &lt;code&gt;200 Accepted&lt;/code&gt;, and just like with the &lt;code&gt;POST&lt;/code&gt; request, the body may contain the updated resource.&lt;/p&gt;

&lt;div&gt;
  &lt;div class=&quot;code-toolbar&quot;&gt;
    &lt;div class=&quot;btn-group&quot; role=&quot;group&quot; aria-label=&quot;...&quot;&gt;
      
      &lt;button type=&quot;button&quot; class=&quot;btn btn-default btn-copy&quot;&gt;&lt;i class=&quot;fas fa-paste&quot;&gt;&lt;/i&gt;&lt;/button&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;pre class=&quot;language-txt&quot;&gt;&lt;code&gt;HTTP/1.1 200 Accepted

{
  &amp;quot;id&amp;quot;: &amp;quot;ID&amp;quot;,
  &amp;quot;href&amp;quot;: &amp;quot;/resources/ID&amp;quot;,
  &amp;quot;some&amp;quot;: &amp;quot;some data&amp;quot;,
  &amp;quot;other&amp;quot;: &amp;quot;modified data&amp;quot;
}&lt;/code&gt;&lt;/pre&gt;
  
&lt;/div&gt;

&lt;p&gt;If there’s a problem, the server will return an error. This error could be, for example, a &lt;code&gt;404 Not Found&lt;/code&gt; due to an invalid ID.&lt;/p&gt;

&lt;div&gt;
  &lt;div class=&quot;code-toolbar&quot;&gt;
    &lt;div class=&quot;btn-group&quot; role=&quot;group&quot; aria-label=&quot;...&quot;&gt;
      
      &lt;button type=&quot;button&quot; class=&quot;btn btn-default btn-copy&quot;&gt;&lt;i class=&quot;fas fa-paste&quot;&gt;&lt;/i&gt;&lt;/button&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;pre class=&quot;language-txt&quot;&gt;&lt;code&gt;HTTP/1.1 404 Not Found

{
  &amp;quot;message&amp;quot;: &amp;quot;Resource &amp;lt;ID&amp;gt; not found&amp;quot; 
}&lt;/code&gt;&lt;/pre&gt;
  
&lt;/div&gt;

&lt;h2 id=&quot;replacing-or-creating-a-resource&quot;&gt;Replacing or creating a resource&lt;/h2&gt;

&lt;p&gt;While a &lt;code&gt;PATCH /resources/ID&lt;/code&gt; updates partially a resource, a &lt;code&gt;PUT /resources/ID&lt;/code&gt; one will replace the resource. It may also create a new resource with the provided ID if it does not exist (and if it is allowed).&lt;/p&gt;

&lt;div&gt;
  &lt;div class=&quot;code-toolbar&quot;&gt;
    &lt;div class=&quot;btn-group&quot; role=&quot;group&quot; aria-label=&quot;...&quot;&gt;
      
      &lt;button type=&quot;button&quot; class=&quot;btn btn-default btn-copy&quot;&gt;&lt;i class=&quot;fas fa-paste&quot;&gt;&lt;/i&gt;&lt;/button&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;pre class=&quot;language-txt&quot;&gt;&lt;code&gt;PUT /resources/ID HTTP/1.1

{
  &amp;quot;some&amp;quot;: &amp;quot;some new data&amp;quot;,
  &amp;quot;other&amp;quot;: &amp;quot;some other new data&amp;quot;
}&lt;/code&gt;&lt;/pre&gt;
  
&lt;/div&gt;

&lt;p&gt;If everything is OK, the server will return a OK status. Depending on what happened the status may be, for example, a &lt;code&gt;200 Accepted&lt;/code&gt; for a replacement of an existing resource or a &lt;code&gt;201 Created&lt;/code&gt; when a resource has been created.&lt;/p&gt;

&lt;div&gt;
  &lt;div class=&quot;code-toolbar&quot;&gt;
    &lt;div class=&quot;btn-group&quot; role=&quot;group&quot; aria-label=&quot;...&quot;&gt;
      
      &lt;button type=&quot;button&quot; class=&quot;btn btn-default btn-copy&quot;&gt;&lt;i class=&quot;fas fa-paste&quot;&gt;&lt;/i&gt;&lt;/button&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;pre class=&quot;language-txt&quot;&gt;&lt;code&gt;HTTP/1.1 200 Accepted

{
  &amp;quot;id&amp;quot;: &amp;quot;ID&amp;quot;,
  &amp;quot;href&amp;quot;: &amp;quot;/resources/ID&amp;quot;,
  &amp;quot;some&amp;quot;: &amp;quot;some new data&amp;quot;,
  &amp;quot;other&amp;quot;: &amp;quot;some other new data&amp;quot;
}&lt;/code&gt;&lt;/pre&gt;
  
&lt;/div&gt;

&lt;h2 id=&quot;deleting-a-resource&quot;&gt;Deleting a resource&lt;/h2&gt;
&lt;p&gt;And finally, to delete a resource, the request is &lt;code&gt;DELETE /resources/ID&lt;/code&gt; without a body. If everything is OK, the server will return a &lt;code&gt;200 Accepted&lt;/code&gt;. If there’s something wrong, it will return an error like &lt;code&gt;404 Not Found&lt;/code&gt; if the resource does not exist or a &lt;code&gt;403 Forbidden&lt;/code&gt; if the user is not allowed to delete that resource.&lt;/p&gt;

&lt;h2 id=&quot;but-why-explaining-all-that-i-want-to-work-with-multiple-resources&quot;&gt;But why explaining all that? I want to work with multiple resources!&lt;/h2&gt;

&lt;p&gt;To work with multiple resources with a REST APIs, you definitely need to know how to work properly with a single one. This quick reminder is there to show how we use the HTTP protocol in REST APIs to express what we want to do and what happened in &lt;strong&gt;a clear and consistent way&lt;/strong&gt; when working with a single resource:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;the URI define which resource we are using&lt;/li&gt;
  &lt;li&gt;the HTTP method express what we want to do&lt;/li&gt;
  &lt;li&gt;the HTTP response status explain what happened&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now we’ll see how continue to do so when working with multiple resources.&lt;/p&gt;

&lt;h1 id=&quot;same-action-on-resources-of-the-same-type&quot;&gt;Same action on resources of the same type&lt;/h1&gt;

&lt;p&gt;So what if I want to &lt;code&gt;PATCH /resources/ID1&lt;/code&gt; and &lt;code&gt;PATCH /resources/ID2&lt;/code&gt; at the same time? When it comes to do one thing with multiple resources of the same type all at once:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;We send a request providing:
    &lt;ul&gt;
      &lt;li&gt;the &lt;strong&gt;type&lt;/strong&gt; of &lt;strong&gt;all&lt;/strong&gt; resources&lt;/li&gt;
      &lt;li&gt;the &lt;strong&gt;action&lt;/strong&gt; which will be applied to all these resources&lt;/li&gt;
      &lt;li&gt;the &lt;strong&gt;identified&lt;/strong&gt; data for &lt;strong&gt;all&lt;/strong&gt; resources&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;We expect &lt;strong&gt;a&lt;/strong&gt; response providing the result for &lt;strong&gt;each&lt;/strong&gt; resource containing exactly the same information as if we had made a single request&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;a-request-containing-multiple-resources&quot;&gt;A request containing multiple resources&lt;/h2&gt;

&lt;p&gt;To tell the resources type we’re working with, we will use the endpoint corresponding to a collection of resources, for example &lt;code&gt;/resources&lt;/code&gt; or &lt;code&gt;/users/bob/friends&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;To identify the action we want to apply on the resources we’ll simply use the matching HTTP verb:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;GET /resources&lt;/code&gt; to get multiple resources&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;POST /resources&lt;/code&gt; to create new resources&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;PATCH /resources&lt;/code&gt; to update multiple resources&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;PUT /resources&lt;/code&gt; to replace multiple resources&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;DELETE /resources&lt;/code&gt; to delete multiple resources&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;How to provide resources data and identifier will slightly vary depending on the action.&lt;/p&gt;

&lt;h3 id=&quot;create-multiple-resources&quot;&gt;Create multiple resources&lt;/h3&gt;

&lt;p&gt;To provide all needed information for a creation, we have to send an array of items containing a unique identifier determined by the consumer (&lt;code&gt;id&lt;/code&gt;) and the resource’s data (&lt;code&gt;body&lt;/code&gt;):&lt;/p&gt;

&lt;div&gt;
  &lt;div class=&quot;code-toolbar&quot;&gt;
    &lt;div class=&quot;btn-group&quot; role=&quot;group&quot; aria-label=&quot;...&quot;&gt;
      
      &lt;button type=&quot;button&quot; class=&quot;btn btn-default btn-copy&quot;&gt;&lt;i class=&quot;fas fa-paste&quot;&gt;&lt;/i&gt;&lt;/button&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;pre class=&quot;language-json&quot;&gt;&lt;code&gt;[
  {
    &amp;quot;id&amp;quot;: &amp;quot;CREATION1&amp;quot;,
    &amp;quot;body&amp;quot;: {&amp;quot;resource&amp;#39;s&amp;quot;: &amp;quot;data&amp;quot;}
  },
  {
    &amp;quot;id&amp;quot;: &amp;quot;CREATION2&amp;quot;,
    &amp;quot;body&amp;quot;: {&amp;quot;resource&amp;#39;s&amp;quot;: &amp;quot;data&amp;quot;}
  }
]&lt;/code&gt;&lt;/pre&gt;
  
&lt;/div&gt;

&lt;p&gt;It can also be done with a key/value map, the resource’s ID being the key and its data the value:&lt;/p&gt;

&lt;div&gt;
  &lt;div class=&quot;code-toolbar&quot;&gt;
    &lt;div class=&quot;btn-group&quot; role=&quot;group&quot; aria-label=&quot;...&quot;&gt;
      
      &lt;button type=&quot;button&quot; class=&quot;btn btn-default btn-copy&quot;&gt;&lt;i class=&quot;fas fa-paste&quot;&gt;&lt;/i&gt;&lt;/button&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;pre class=&quot;language-json&quot;&gt;&lt;code&gt;{
  &amp;quot;CREATION1&amp;quot; : {&amp;quot;resource&amp;#39;s&amp;quot;: &amp;quot;data&amp;quot;},
  &amp;quot;CREATION2&amp;quot; : {&amp;quot;resource&amp;#39;s&amp;quot;: &amp;quot;data&amp;quot;}
}&lt;/code&gt;&lt;/pre&gt;
  
&lt;/div&gt;

&lt;p&gt;Receiving these data with a &lt;code&gt;POST /resources&lt;/code&gt; request, the server will create the 2 resources provided. The provided &lt;code&gt;id&lt;/code&gt; will be used in the response to identify the response corresponding to this resource.&lt;/p&gt;

&lt;h3 id=&quot;update-or-replace-multiple-resources&quot;&gt;Update or replace multiple resources&lt;/h3&gt;
&lt;p&gt;To update or replace multiple resources, it’s exactly the same thing, besides the value of the resource’s id, which will be the one we would have use for a single resource (&lt;code&gt;/resources/ID&lt;/code&gt;).&lt;/p&gt;

&lt;div&gt;
  &lt;div class=&quot;code-toolbar&quot;&gt;
    &lt;div class=&quot;btn-group&quot; role=&quot;group&quot; aria-label=&quot;...&quot;&gt;
      
      &lt;button type=&quot;button&quot; class=&quot;btn btn-default btn-copy&quot;&gt;&lt;i class=&quot;fas fa-paste&quot;&gt;&lt;/i&gt;&lt;/button&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;pre class=&quot;language-json&quot;&gt;&lt;code&gt;{
  &amp;quot;ID1&amp;quot; : {&amp;quot;resource&amp;#39;s&amp;quot;: &amp;quot;data&amp;quot;},
  &amp;quot;ID2&amp;quot; : {&amp;quot;resource&amp;#39;s&amp;quot;: &amp;quot;data&amp;quot;}
}&lt;/code&gt;&lt;/pre&gt;
  
&lt;/div&gt;

&lt;p&gt;Receiving these data with a &lt;code&gt;PATCH /resources&lt;/code&gt; request, the server will execute both &lt;code&gt;PATCH /resources/ID1&lt;/code&gt; and &lt;code&gt;PATCH /resources/ID2&lt;/code&gt; (it works the same with &lt;code&gt;PUT&lt;/code&gt;). Just like with &lt;code&gt;POST&lt;/code&gt;, the provided ids will be used to identify each response.&lt;/p&gt;

&lt;h3 id=&quot;get-or-delete-multiple-resources&quot;&gt;Get or delete multiple resources&lt;/h3&gt;
&lt;p&gt;To get or delete multiple resources we will again use the resources ids but as a &lt;code&gt;GET&lt;/code&gt; or &lt;code&gt;DELETE&lt;/code&gt; request does not have a body, they will be provided in a query parameter like this &lt;code&gt;DELETE /resources?ids=ID1,ID2&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&quot;a-response-containing-responses&quot;&gt;A response containing responses&lt;/h2&gt;

&lt;p&gt;A response to such a request will have to contain exactly the same data we would have had doing single calls. We need to provide a response containing multiple responses, how can we do that?&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;One Status Code to bring them all and in the lightness bind them&lt;br /&gt;
&lt;em&gt;The Lord of the HTTP Status Codes&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The 207 HTTP status code is exactly what we’re looking for:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;The 207 (Multi-Status) status code provides status for multiple independent operations&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This status has been defined by &lt;a href=&quot;https://tools.ietf.org/html/rfc4918#section-11.1&quot;&gt;RFC 4918&lt;/a&gt; &lt;em&gt;HTTP Extensions for Web Distributed Authoring and Versioning (WebDAV)&lt;/em&gt;. Here’s an example of a WebDAV 207 response when deleting some resources:&lt;/p&gt;

&lt;div&gt;
  &lt;div class=&quot;code-toolbar&quot;&gt;
    &lt;div class=&quot;btn-group&quot; role=&quot;group&quot; aria-label=&quot;...&quot;&gt;
      
      &lt;button type=&quot;button&quot; class=&quot;btn btn-default btn-copy&quot;&gt;&lt;i class=&quot;fas fa-paste&quot;&gt;&lt;/i&gt;&lt;/button&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;pre class=&quot;language-xml&quot;&gt;&lt;code&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;utf-8&amp;quot; ?&amp;gt;
&amp;lt;d:multistatus xmlns:d=&amp;quot;DAV:&amp;quot;&amp;gt;
  &amp;lt;d:response&amp;gt;
    &amp;lt;d:href&amp;gt;http://www.example.com/container/resource3&amp;lt;/d:href&amp;gt;
    &amp;lt;d:status&amp;gt;HTTP/1.1 423 Locked&amp;lt;/d:status&amp;gt;
    &amp;lt;d:error&amp;gt;&amp;lt;d:lock-token-submitted/&amp;gt;&amp;lt;/d:error&amp;gt;
  &amp;lt;/d:response&amp;gt;
  &amp;lt;d:response&amp;gt;
    &amp;lt;d:href&amp;gt;http://www.example.com/container/resource4&amp;lt;/d:href&amp;gt;
    &amp;lt;d:status&amp;gt;HTTP/1.1 200 OK&amp;lt;/d:status&amp;gt;
  &amp;lt;/d:response&amp;gt;
&amp;lt;/d:multistatus&amp;gt;&lt;/code&gt;&lt;/pre&gt;
  
&lt;/div&gt;

&lt;div&gt;
      &lt;a href=&quot;&quot;&gt;&lt;img src=&quot;/images/api-design-tips-and-tricks-getting-creating-updating-or-deleting-multiple-resources-in-one-api-call/whatthehellisthat.gif&quot; /&gt;&lt;/a&gt;
      
    &lt;/div&gt;

&lt;p&gt;Oops, sorry for the XML, it’s only to show that a WebDAV &lt;em&gt;207&lt;/em&gt; response contains a list of response. Each of this response point to a resource (href) and contains also the response itself, how could it look in a less frightening JSON way:&lt;/p&gt;

&lt;div&gt;
  &lt;div class=&quot;code-toolbar&quot;&gt;
    &lt;div class=&quot;btn-group&quot; role=&quot;group&quot; aria-label=&quot;...&quot;&gt;
      
      &lt;button type=&quot;button&quot; class=&quot;btn btn-default btn-copy&quot;&gt;&lt;i class=&quot;fas fa-paste&quot;&gt;&lt;/i&gt;&lt;/button&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;pre class=&quot;language-json&quot;&gt;&lt;code&gt;[
  {
    &amp;quot;id&amp;quot;: &amp;quot;ID1&amp;quot;,
    &amp;quot;status&amp;quot;: &amp;quot;201&amp;quot;,
    &amp;quot;headers&amp;quot;: [
      {&amp;quot;header&amp;#39;s name&amp;quot;: &amp;quot;header&amp;#39;s value&amp;quot;}
    ],
    &amp;quot;body&amp;quot;: { &amp;quot;the&amp;quot;: &amp;quot;response&amp;#39;s body&amp;quot;}
  },
  {
    &amp;quot;id&amp;quot;: &amp;quot;ID2&amp;quot;,
    &amp;quot;status&amp;quot;: &amp;quot;400&amp;quot;,
    &amp;quot;headers&amp;quot;: [
      {&amp;quot;header&amp;#39;s name&amp;quot;: &amp;quot;header&amp;#39;s value&amp;quot;}
    ],
    &amp;quot;body&amp;quot;: { &amp;quot;the&amp;quot;: &amp;quot;response&amp;#39;s body&amp;quot;}
  }
]&lt;/code&gt;&lt;/pre&gt;
  
&lt;/div&gt;

&lt;p&gt;A 207 will response will contain a list of responses, each response containing:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;An identifier (&lt;code&gt;id&lt;/code&gt;) matching the one provided in the request&lt;/li&gt;
  &lt;li&gt;The HTTP response’s data composed of a &lt;code&gt;status&lt;/code&gt;, &lt;code&gt;headers&lt;/code&gt; and a &lt;code&gt;body&lt;/code&gt;. These data are exactly the same we would have received for a single call.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Note that we can also use a map in which the keys are the responses identifiers:&lt;/p&gt;

&lt;div&gt;
  &lt;div class=&quot;code-toolbar&quot;&gt;
    &lt;div class=&quot;btn-group&quot; role=&quot;group&quot; aria-label=&quot;...&quot;&gt;
      
      &lt;button type=&quot;button&quot; class=&quot;btn btn-default btn-copy&quot;&gt;&lt;i class=&quot;fas fa-paste&quot;&gt;&lt;/i&gt;&lt;/button&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;pre class=&quot;language-json&quot;&gt;&lt;code&gt;{
  &amp;quot;ID1&amp;quot;: {
    &amp;quot;status&amp;quot;: &amp;quot;201&amp;quot;,
    &amp;quot;headers&amp;quot;: [
      {&amp;quot;header&amp;#39;s name&amp;quot;: &amp;quot;header&amp;#39;s value&amp;quot;}
    ],
    &amp;quot;body&amp;quot;: { &amp;quot;the&amp;quot;: &amp;quot;response&amp;#39;s body&amp;quot;}
  },
  &amp;quot;ID2&amp;quot;: {
    &amp;quot;status&amp;quot;: &amp;quot;400&amp;quot;,
    &amp;quot;headers&amp;quot;: [
      {&amp;quot;header&amp;#39;s name&amp;quot;: &amp;quot;header&amp;#39;s value&amp;quot;}
    ],
    &amp;quot;body&amp;quot;: { &amp;quot;the&amp;quot;: &amp;quot;response&amp;#39;s body&amp;quot;}
  }
}&lt;/code&gt;&lt;/pre&gt;
  
&lt;/div&gt;

&lt;p&gt;We could even match request and response based on position in the list.&lt;/p&gt;

&lt;h2 id=&quot;two-levels-of-error&quot;&gt;Two levels of error&lt;/h2&gt;

&lt;p&gt;In that case, we must be aware that there are two types of errors, the one concerning one or more of the resources and the one concerning the &lt;em&gt;multiple&lt;/em&gt; request itself.&lt;/p&gt;

&lt;p&gt;For errors concerning the action on each resource), the HTTP status returned by the server will be a 207 and each sub-response will contains the status for each sub-request (as explained in previous paragraph).&lt;/p&gt;

&lt;p&gt;For errors concerning the main request (misspelled query parameter for DELETE, or invalid body map/list structure for example), the server may return a &lt;em&gt;400 Bad Request&lt;/em&gt; for example.&lt;/p&gt;

&lt;h2 id=&quot;single-and-multiple-creations-with-the-same-endpoint&quot;&gt;Single and multiple creations with the same endpoint&lt;/h2&gt;

&lt;p&gt;Note that &lt;code&gt;POST /resources&lt;/code&gt; was supposed to be used to create a single resource. If we want to handle the single/multiple duality we have two options:&lt;/p&gt;

&lt;h3 id=&quot;use-a-listmap-for-both-case&quot;&gt;Use a list/map for both case&lt;/h3&gt;

&lt;p&gt;The input is exactly the same for 1 or more resources, we will only provide a single one item to create a single resource.&lt;/p&gt;

&lt;div&gt;
  &lt;div class=&quot;code-toolbar&quot;&gt;
    &lt;div class=&quot;btn-group&quot; role=&quot;group&quot; aria-label=&quot;...&quot;&gt;
      
      &lt;button type=&quot;button&quot; class=&quot;btn btn-default btn-copy&quot;&gt;&lt;i class=&quot;fas fa-paste&quot;&gt;&lt;/i&gt;&lt;/button&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;pre class=&quot;language-json&quot;&gt;&lt;code&gt;{
  &amp;quot;CREATION1&amp;quot; : {&amp;quot;resource&amp;#39;s&amp;quot;: &amp;quot;data&amp;quot;}
}&lt;/code&gt;&lt;/pre&gt;
  
&lt;/div&gt;

&lt;p&gt;The server’s response should be always be the one described earlier for multiple creations even if there’s only a single item.&lt;/p&gt;

&lt;h3 id=&quot;accept-both-a-listmap-and-single-object&quot;&gt;Accept both a list/map and single object&lt;/h3&gt;

&lt;p&gt;The input for a single resource contains only the resource’s data:&lt;/p&gt;

&lt;div&gt;
  &lt;div class=&quot;code-toolbar&quot;&gt;
    &lt;div class=&quot;btn-group&quot; role=&quot;group&quot; aria-label=&quot;...&quot;&gt;
      
      &lt;button type=&quot;button&quot; class=&quot;btn btn-default btn-copy&quot;&gt;&lt;i class=&quot;fas fa-paste&quot;&gt;&lt;/i&gt;&lt;/button&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;pre class=&quot;language-json&quot;&gt;&lt;code&gt;{&amp;quot;resource&amp;#39;s&amp;quot;: &amp;quot;data&amp;quot;}&lt;/code&gt;&lt;/pre&gt;
  
&lt;/div&gt;

&lt;p&gt;The server response will be the one expected for a single creation.&lt;/p&gt;

&lt;p&gt;The input for multiple resource contains a list/map:&lt;/p&gt;

&lt;div&gt;
  &lt;div class=&quot;code-toolbar&quot;&gt;
    &lt;div class=&quot;btn-group&quot; role=&quot;group&quot; aria-label=&quot;...&quot;&gt;
      
      &lt;button type=&quot;button&quot; class=&quot;btn btn-default btn-copy&quot;&gt;&lt;i class=&quot;fas fa-paste&quot;&gt;&lt;/i&gt;&lt;/button&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;pre class=&quot;language-json&quot;&gt;&lt;code&gt;{
  &amp;quot;CREATION1&amp;quot; : {&amp;quot;resource&amp;#39;s&amp;quot;: &amp;quot;data&amp;quot;}
  &amp;quot;CREATION2&amp;quot; : {&amp;quot;resource&amp;#39;s&amp;quot;: &amp;quot;data&amp;quot;}
}&lt;/code&gt;&lt;/pre&gt;
  
&lt;/div&gt;

&lt;p&gt;The server response will be the one expected for a multiple creations as seen earlier.&lt;/p&gt;

&lt;h1 id=&quot;different-actions-on-resources-of-the-same-type&quot;&gt;Different actions on resources of the same type&lt;/h1&gt;
&lt;p&gt;What if we want to &lt;code&gt;DELETE /resources/ID1&lt;/code&gt; and &lt;code&gt;PATCH /resources/ID2&lt;/code&gt; at the same time? As it is an action that impacts the data in various way we should use the &lt;code&gt;POST&lt;/code&gt; HTTP verb. Concerning the URI, we have two options, use &lt;code&gt;/resources&lt;/code&gt; or create a specific resources for this use case like &lt;code&gt;/resource-modifications&lt;/code&gt; for example. The request will be then something like &lt;code&gt;POST /resources&lt;/code&gt; or &lt;code&gt;POST /resource-modifications&lt;/code&gt; and we will have to provide the action (&lt;code&gt;method&lt;/code&gt;) for each resource:&lt;/p&gt;

&lt;div&gt;
  &lt;div class=&quot;code-toolbar&quot;&gt;
    &lt;div class=&quot;btn-group&quot; role=&quot;group&quot; aria-label=&quot;...&quot;&gt;
      
      &lt;button type=&quot;button&quot; class=&quot;btn btn-default btn-copy&quot;&gt;&lt;i class=&quot;fas fa-paste&quot;&gt;&lt;/i&gt;&lt;/button&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;pre class=&quot;language-json&quot;&gt;&lt;code&gt;[
  {
    &amp;quot;id&amp;quot;: &amp;quot;ID1&amp;quot;,
    &amp;quot;method&amp;quot;: &amp;quot;DELETE&amp;quot;
  },
  {
    &amp;quot;id&amp;quot;: &amp;quot;ID2&amp;quot;,
    &amp;quot;method&amp;quot;: &amp;quot;PATCH&amp;quot;,
    &amp;quot;body&amp;quot;: {&amp;quot;resource&amp;#39;s&amp;quot;: &amp;quot;data&amp;quot;}
  }
]&lt;/code&gt;&lt;/pre&gt;
  
&lt;/div&gt;

&lt;p&gt;The server will do &lt;code&gt;DELETE /resources/ID1&lt;/code&gt; and &lt;code&gt;PATCH /resources/ID2&lt;/code&gt; and the response will be a &lt;em&gt;207&lt;/em&gt; using the structure using the provided &lt;code&gt;id&lt;/code&gt; as seen previously in his post.&lt;/p&gt;

&lt;h1 id=&quot;different-actions-on-resources-of-different-types&quot;&gt;Different actions on resources of different types&lt;/h1&gt;
&lt;p&gt;What if I want to do &lt;code&gt;DELETE /resources/ID1&lt;/code&gt; and &lt;code&gt;PATCH /another-resources/ID2&lt;/code&gt; at the same time?&lt;/p&gt;

&lt;div&gt;
      &lt;a href=&quot;&quot;&gt;&lt;img src=&quot;/images/api-design-tips-and-tricks-getting-creating-updating-or-deleting-multiple-resources-in-one-api-call/waitwhat.gif&quot; /&gt;&lt;/a&gt;
      
    &lt;/div&gt;

&lt;p&gt;This is really nasty and definitely not REST, but it can be useful for &lt;a href=&quot;https://www.infoq.com/articles/api-facades&quot;&gt;backend for frontend or experience API&lt;/a&gt; for example.&lt;/p&gt;

&lt;p&gt;To do that we’ll need to &lt;code&gt;POST&lt;/code&gt; data on a specific endpoint which could something like &lt;code&gt;/batch&lt;/code&gt;, &lt;code&gt;/bulk&lt;/code&gt; or even &lt;code&gt;/&lt;/code&gt; and we will have to add a &lt;code&gt;uri&lt;/code&gt; and replace the &lt;code&gt;id&lt;/code&gt; value by something provided by the consumer:&lt;/p&gt;

&lt;div&gt;
  &lt;div class=&quot;code-toolbar&quot;&gt;
    &lt;div class=&quot;btn-group&quot; role=&quot;group&quot; aria-label=&quot;...&quot;&gt;
      
      &lt;button type=&quot;button&quot; class=&quot;btn btn-default btn-copy&quot;&gt;&lt;i class=&quot;fas fa-paste&quot;&gt;&lt;/i&gt;&lt;/button&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;pre class=&quot;language-json&quot;&gt;&lt;code&gt;[
  {
    &amp;quot;id&amp;quot;: &amp;quot;ACTION1&amp;quot;,
    &amp;quot;uri&amp;quot;: &amp;quot;/resources/ID1&amp;quot;,
    &amp;quot;method&amp;quot;: &amp;quot;DELETE&amp;quot;
  },
  {
    &amp;quot;id&amp;quot;: &amp;quot;ACTION2&amp;quot;,
    &amp;quot;uri&amp;quot;: &amp;quot;/another-resources/ID2&amp;quot;,
    &amp;quot;method&amp;quot;: &amp;quot;PATCH&amp;quot;,
    &amp;quot;body&amp;quot;: {&amp;quot;resource&amp;#39;s&amp;quot;: &amp;quot;data&amp;quot;}
  }
  ,
  {
    &amp;quot;id&amp;quot;: &amp;quot;ACTION3&amp;quot;,
    &amp;quot;uri&amp;quot;: &amp;quot;/resources&amp;quot;,
    &amp;quot;method&amp;quot;: &amp;quot;POST&amp;quot;,
    &amp;quot;body&amp;quot;: {&amp;quot;resource&amp;#39;s&amp;quot;: &amp;quot;data&amp;quot;}
  }
]&lt;/code&gt;&lt;/pre&gt;
  
&lt;/div&gt;

&lt;p&gt;Actions number 1 is &lt;code&gt;DELETE /resources/ID1&lt;/code&gt; and its result will be identified in the 207 response by the id &lt;code&gt;ACTION1&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;To see a complete example you should take a look at &lt;a href=&quot;https://developers.facebook.com/docs/graph-api/making-multiple-requests&quot;&gt;Facebook’s Graph API batch endpoint&lt;/a&gt; documentation. Note that this batch endpoint match request/response based on index and does far more than just processing a bunch of request.&lt;/p&gt;</content><author><name>Arnaud Lauret</name></author><category term="posts" /><category term="API Design Tips And Tricks" /><summary type="html">Getting, creating, updating or deleting multiple resources in a single API call is a common need in REST APIs. But how to achieve that in a consistent way accomodating how we work with a single resource and REST principles? This is what we’ll see in this post.</summary></entry><entry><title type="html">OpenAPI Visual Documentation updated with 3.0.0-rc0</title><link href="https://apihandyman.io/openapi-visual-documentation-updated-with-3.0.0-rc0/" rel="alternate" type="text/html" title="OpenAPI Visual Documentation updated with 3.0.0-rc0" /><published>2017-03-19T00:00:00+00:00</published><updated>2017-03-19T00:00:00+00:00</updated><id>https://apihandyman.io/openapi-visual-documentation-updated-with-3.0.0-rc0</id><content type="html" xml:base="https://apihandyman.io/openapi-visual-documentation-updated-with-3.0.0-rc0/">&lt;p&gt;The &lt;a href=&quot;http://openapi-specification-visual-documentation.apihandyman.io/&quot;&gt;OpenAPI Visual Documentation has been updated&lt;/a&gt;. The new version 3.0.0-rc0 of the OpenAPI specification has been added. The addition brings a fully detailed change log of what has change from version 2.&lt;!--more--&gt;&lt;/p&gt;

&lt;h1 id=&quot;openapi-30&quot;&gt;OpenAPI 3.0&lt;/h1&gt;
&lt;p&gt;The OpenAPI specification is evolving, the 3.0.0-rc0 implementer draft version has been &lt;a href=&quot;https://www.openapis.org/blog/2017/03/01/openapi-spec-3-implementers-draft-released&quot;&gt;released&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This new OpenAPI specification version 3.0.0 offers many welcomed improvements and new features (see OpenAPI &lt;a href=&quot;https://www.openapis.org/news/blogs/2016/10/tdc-structural-improvements-explaining-30-spec-part-2&quot;&gt;blog post series about this&lt;/a&gt;).&lt;/p&gt;

&lt;h1 id=&quot;updating-the-openapi-specification-visual-documentation&quot;&gt;Updating the OpenAPI Specification Visual Documentation&lt;/h1&gt;
&lt;p&gt;It was past time to update the &lt;a href=&quot;http://openapi-specification-visual-documentation.apihandyman.io/&quot;&gt;OpenAPI Specification Visual Documentation&lt;/a&gt; to fully grasp what happens with this update.&lt;/p&gt;

&lt;div&gt;
      &lt;a href=&quot;http://openapi-specification-visual-documentation.apihandyman.io/&quot;&gt;&lt;img src=&quot;/images/openapi-visual-documentation-updated-with-3.0.0-rc0/openapi-visual-documentation.png&quot; /&gt;&lt;/a&gt;
      &lt;p class=&quot;img-label&quot;&gt;&lt;a href=&quot;http://openapi-specification-visual-documentation.apihandyman.io/&quot;&gt;OpenAPI Specification Visual Documentation showing v3.0.0-rc0&lt;/a&gt;&lt;/p&gt;
    &lt;/div&gt;

&lt;p&gt;The tool can handle now multiple versions that you select with the buttons on the top right navigation bar. The v3.0.0-rc0 comes with a fully detailed changelog for each level and property.&lt;/p&gt;</content><author><name>Arnaud Lauret</name></author><category term="elsewhere" /><category term="OpenAPI" /><summary type="html">The OpenAPI Visual Documentation has been updated. The new version 3.0.0-rc0 of the OpenAPI specification has been added. The addition brings a fully detailed change log of what has change from version 2.</summary></entry><entry><title type="html">Google API Design Guide added to the API Stylebook</title><link href="https://apihandyman.io/google-api-design-guide-added-to-the-api-stylebook/" rel="alternate" type="text/html" title="Google API Design Guide added to the API Stylebook" /><published>2017-03-05T00:00:00+00:00</published><updated>2017-03-05T00:00:00+00:00</updated><id>https://apihandyman.io/google-api-design-guide-added-to-the-api-stylebook</id><content type="html" xml:base="https://apihandyman.io/google-api-design-guide-added-to-the-api-stylebook/">&lt;p&gt;I’ve just added the Google API Design Guide to the &lt;a href=&quot;http://apistylebook.com/blog/google-api-design-guide-added-on-the-api-stylebook&quot;&gt;API Stylebook&lt;/a&gt;.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;This guide is slightly different from the other ones because it deals with REST and RPC API design focusing on gRPC APIs using Protocol Buffers v3.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;To discover this API design guide and a short review, let’s go to the &lt;a href=&quot;http://apistylebook.com/blog/google-api-design-guide-added-on-the-api-stylebook&quot;&gt;API Stylebook blog&lt;/a&gt;.&lt;/p&gt;</content><author><name>Arnaud Lauret</name></author><category term="elsewhere" /><category term="Design" /><category term="API Stylebook" /><summary type="html">I’ve just added the Google API Design Guide to the API Stylebook. This guide is slightly different from the other ones because it deals with REST and RPC API design focusing on gRPC APIs using Protocol Buffers v3. To discover this API design guide and a short review, let’s go to the API Stylebook blog.</summary></entry><entry><title type="html">Writing OpenAPI (Swagger) Specification Tutorial - Part 9 - Extending the OpenAPI specification</title><link href="https://apihandyman.io/writing-openapi-swagger-specification-tutorial-part-9-extending-the-openapi-specification/" rel="alternate" type="text/html" title="Writing OpenAPI (Swagger) Specification Tutorial - Part 9 - Extending the OpenAPI specification" /><published>2017-02-19T00:00:00+00:00</published><updated>2017-02-19T00:00:00+00:00</updated><id>https://apihandyman.io/writing-openapi-swagger-specification-tutorial-part-9-extending-the-openapi-specification</id><content type="html" xml:base="https://apihandyman.io/writing-openapi-swagger-specification-tutorial-part-9-extending-the-openapi-specification/">&lt;p&gt;This is the end, my OpenAPI friends, the end. The end? Not really. This last part of the OpenAPI tutorial is a new beginning. With previous parts we have learned to master the OpenAPI specification but there’s a last thing to learn to unleash its full power: extensions. This format is easily extensible, it allows to add custom data within an API description. But for what purposes? Let’s have a glimpse of these extensions endless possibilities.
&lt;!--more--&gt;&lt;/p&gt;

&lt;h1 id=&quot;writing-openapi-fka-swagger-specification-tutorial&quot;&gt;Writing OpenAPI (fka Swagger) Specification tutorial&lt;/h1&gt;
&lt;p&gt;This tutorial is composed of several posts:&lt;/p&gt;

&lt;ul&gt;
  
    
    &lt;li&gt;&lt;a class=&quot;page-link&quot; href=&quot;/writing-openapi-swagger-specification-tutorial-part-1-introduction/&quot;&gt;Part 1 - Introduction&lt;/a&gt;&lt;/li&gt;
    
  
    
    &lt;li&gt;&lt;a class=&quot;page-link&quot; href=&quot;/writing-openapi-swagger-specification-tutorial-part-2-the-basics/&quot;&gt;Part 2 - The basics&lt;/a&gt;&lt;/li&gt;
    
  
    
    &lt;li&gt;&lt;a class=&quot;page-link&quot; href=&quot;/writing-openapi-swagger-specification-tutorial-part-3-simplifying-specification-file/&quot;&gt;Part 3 - Simplifying specification file&lt;/a&gt;&lt;/li&gt;
    
  
    
    &lt;li&gt;&lt;a class=&quot;page-link&quot; href=&quot;/writing-openapi-swagger-specification-tutorial-part-4-advanced-data-modeling/&quot;&gt;Part 4 - Advanced Data&lt;/a&gt;&lt;/li&gt;
    
  
    
    &lt;li&gt;&lt;a class=&quot;page-link&quot; href=&quot;/writing-openapi-swagger-specification-tutorial-part-5-advanced-input-and-output-modeling/&quot;&gt;Part 5 - Advanced Input And Output Modeling&lt;/a&gt;&lt;/li&gt;
    
  
    
    &lt;li&gt;&lt;a class=&quot;page-link&quot; href=&quot;/writing-openapi-swagger-specification-tutorial-part-6-defining-security/&quot;&gt;Part 6 - Defining Security&lt;/a&gt;&lt;/li&gt;
    
  
    
    &lt;li&gt;&lt;a class=&quot;page-link&quot; href=&quot;/writing-openapi-swagger-specification-tutorial-part-7-documentation/&quot;&gt;Part 7 - Documentation&lt;/a&gt;&lt;/li&gt;
    
  
    
    &lt;li&gt;&lt;a class=&quot;page-link&quot; href=&quot;/writing-openapi-swagger-specification-tutorial-part-8-splitting-specification-file/&quot;&gt;Part 8 - Splitting specification file&lt;/a&gt;&lt;/li&gt;
    
  
    
    &lt;li&gt;&lt;strong&gt;Part 9 - Extending the OpenAPI specification&lt;/strong&gt;&lt;/li&gt;
    
  
&lt;/ul&gt;

&lt;p&gt;If you’re a bit lost in the &lt;a href=&quot;https://github.com/OAI/OpenAPI-Specification/blob/master/versions/2.0.md&quot;&gt;specification&lt;/a&gt;, take a look at the &lt;em&gt;&lt;a href=&quot;http://openapi-map.apihandyman.io/?version=2.0&quot;&gt;OpenAPI Map&lt;/a&gt;&lt;/em&gt;:&lt;/p&gt;
&lt;div&gt;
      &lt;a href=&quot;http://openapi-map.apihandyman.io/?version=2.0&quot;&gt;&lt;img src=&quot;/images/commons/openapi/openapi-map-v2.png&quot; /&gt;&lt;/a&gt;
      &lt;p class=&quot;img-label&quot;&gt;&lt;a href=&quot;http://openapi-map.apihandyman.io/?version=2.0&quot;&gt;OpenAPI Map&lt;/a&gt;&lt;/p&gt;
    &lt;/div&gt;

&lt;p&gt;In this final part we’ll learn how to extend the OpenAPI specification to add custom data and most important, we’ll discover why we would do that.&lt;/p&gt;

&lt;h1 id=&quot;one-size-may-not-fit-all&quot;&gt;One size may not fit all&lt;/h1&gt;

&lt;p&gt;After working for a while with the OpenAPI format, you WILL want to add other data into you API descriptions, this is your destiny. Fortunately, the creator of the format had foreseen that:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;While the Swagger Specification tries to accommodate most use cases, additional data can be added to extend the specification at certain points.&lt;br /&gt;
&lt;em&gt;&lt;a href=&quot;https://github.com/OAI/OpenAPI-Specification/blob/master/versions/2.0.md#vendorExtensions&quot;&gt;OpenAPI Specification&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Once known as &lt;em&gt;Vendor Extensions&lt;/em&gt;, these &lt;em&gt;Specification Extensions&lt;/em&gt; can be created by anyone, don’t be fooled by their original name.&lt;/p&gt;

&lt;h1 id=&quot;custom-property&quot;&gt;Custom property&lt;/h1&gt;

&lt;p&gt;To add a custom property with an OpenAPI definition file you only need to prefix its name by &lt;code&gt;x-&lt;/code&gt;:&lt;/p&gt;

&lt;div&gt;
  &lt;div class=&quot;code-toolbar&quot;&gt;
    &lt;div class=&quot;btn-group&quot; role=&quot;group&quot; aria-label=&quot;...&quot;&gt;
      
      &lt;button type=&quot;button&quot; class=&quot;btn btn-default btn-copy&quot;&gt;&lt;i class=&quot;fas fa-paste&quot;&gt;&lt;/i&gt;&lt;/button&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;pre class=&quot;language-yaml line-numbers&quot;&gt;&lt;code&gt;x-&amp;lt;what you want&amp;gt;: &amp;lt;value&amp;gt;&lt;/code&gt;&lt;/pre&gt;
  
&lt;/div&gt;

&lt;p&gt;Here’s a custom property &lt;code&gt;x-custom-info&lt;/code&gt; in the &lt;code&gt;info&lt;/code&gt; section of an OpenAPI file:&lt;/p&gt;

&lt;div&gt;
  &lt;!-- codeblocksize: 20 --&gt;
  &lt;div class=&quot;code-toolbar&quot;&gt;
    &lt;div class=&quot;btn-group&quot; role=&quot;group&quot; aria-label=&quot;...&quot;&gt;
      
      &lt;button type=&quot;button&quot; class=&quot;btn btn-default&quot;&gt;&lt;a target=&quot;_blank&quot; href=&quot;/code/writing-openapi-swagger-specification-tutorial/simple_openapi_specification_53_custom_property.yaml&quot;&gt;&lt;i class=&quot;fas fa-file-code&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/button&gt;
      &lt;button type=&quot;button&quot; class=&quot;btn btn-default btn-copy&quot;&gt;&lt;i class=&quot;fas fa-paste&quot;&gt;&lt;/i&gt;&lt;/button&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;pre class=&quot;language-yaml line-numbers&quot; data-line=&quot;5&quot; data-start=&quot;3&quot;&gt;&lt;code&gt;info:
  version: 1.0.0
  title: x-tended OpenAPI Specification
  description: An OpenAPI specification containing custom data
  x-custom-info: Here's some custom information
&lt;/code&gt;&lt;/pre&gt;
  
&lt;/div&gt;

&lt;p&gt;If a standard Swagger/OpenAPI parser encounters such property, it will ignore it because it’s prefixed with &lt;code&gt;x-&lt;/code&gt;. This &lt;code&gt;info&lt;/code&gt; section with a custom property is valid:&lt;/p&gt;

&lt;div&gt;
      &lt;a href=&quot;&quot;&gt;&lt;img src=&quot;/images/writing-openapi-swagger-specification-tutorial-part-9-extending-the-openapi-specification/custom-property.png&quot; /&gt;&lt;/a&gt;
      
    &lt;/div&gt;

&lt;h1 id=&quot;custom-object&quot;&gt;Custom object&lt;/h1&gt;

&lt;p&gt;Extensions are not only meant to be atomic properties, they can also be objects:&lt;/p&gt;

&lt;div&gt;
  &lt;!-- codeblocksize: 20 --&gt;
  &lt;div class=&quot;code-toolbar&quot;&gt;
    &lt;div class=&quot;btn-group&quot; role=&quot;group&quot; aria-label=&quot;...&quot;&gt;
      
      &lt;button type=&quot;button&quot; class=&quot;btn btn-default&quot;&gt;&lt;a target=&quot;_blank&quot; href=&quot;/code/writing-openapi-swagger-specification-tutorial/simple_openapi_specification_54_custom_object.yaml&quot;&gt;&lt;i class=&quot;fas fa-file-code&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/button&gt;
      &lt;button type=&quot;button&quot; class=&quot;btn btn-default btn-copy&quot;&gt;&lt;i class=&quot;fas fa-paste&quot;&gt;&lt;/i&gt;&lt;/button&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;pre class=&quot;language-yaml line-numbers&quot; data-line=&quot;5-11&quot; data-start=&quot;3&quot;&gt;&lt;code&gt;info:
  version: 1.0.0
  title: x-tended OpenAPI Specification
  description: An OpenAPI specification containing custom data
  x-custom-info:
    comment: Here's some custom information
    authors:
      - name: John Doe
        email: john@doe.com
      - name: Jane Doe
        email: jane@doe.com
&lt;/code&gt;&lt;/pre&gt;
  
&lt;/div&gt;

&lt;p&gt;Note that sub-properties names do not need to be prefixed with &lt;code&gt;x-&lt;/code&gt;.&lt;/p&gt;

&lt;h1 id=&quot;extensions-almost-anywhere&quot;&gt;Extensions almost anywhere&lt;/h1&gt;

&lt;p&gt;These custom data structures can be added almost anywhere in the specification. You can test if a location is ok by simply adding your extension where you want within the online editor and see if the validator complains or not.&lt;/p&gt;

&lt;p&gt;You can also take a look at my &lt;a href=&quot;http://openapi-specification-visual-documentation.apihandyman.io/&quot;&gt;visual documentation&lt;/a&gt; to check if the location you want to use allows extension or not:&lt;/p&gt;

&lt;div&gt;
      &lt;a href=&quot;&quot;&gt;&lt;img src=&quot;/images/writing-openapi-swagger-specification-tutorial-part-9-extending-the-openapi-specification/almost-anywhere.png&quot; /&gt;&lt;/a&gt;
      
    &lt;/div&gt;

&lt;p&gt;Here’s an example using various location (non-exhaustive example):&lt;/p&gt;

&lt;div&gt;
  &lt;!-- codeblocksize: 20 --&gt;
  &lt;div class=&quot;code-toolbar&quot;&gt;
    &lt;div class=&quot;btn-group&quot; role=&quot;group&quot; aria-label=&quot;...&quot;&gt;
      &lt;button type=&quot;button&quot; class=&quot;btn btn-default&quot; onclick=&quot;toggle(this, this.parentElement.parentElement.parentElement.children[1], this.parentElement.parentElement.parentElement.children[2].children[0])&quot;&gt;&lt;i class=&quot;fa fa-expand&quot; aria-hidden=&quot;true&quot;&gt;&lt;/i&gt;&lt;/button&gt;
      &lt;button type=&quot;button&quot; class=&quot;btn btn-default&quot;&gt;&lt;a target=&quot;_blank&quot; href=&quot;/code/writing-openapi-swagger-specification-tutorial/simple_openapi_specification_55_extensions_almost_anywhere.yaml&quot;&gt;&lt;i class=&quot;fas fa-file-code&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/button&gt;
      &lt;button type=&quot;button&quot; class=&quot;btn btn-default btn-copy&quot;&gt;&lt;i class=&quot;fas fa-paste&quot;&gt;&lt;/i&gt;&lt;/button&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;pre class=&quot;language-yaml line-numbers code-collapsed&quot; data-line=&quot;3,9-15,24,32,37&quot;&gt;&lt;code&gt;swagger: '2.0'

x-root: some custom root data

info:
  version: 1.0.0
  title: x-tended OpenAPI Specification
  description: An OpenAPI specification containing custom data
  x-custom-info:
    comment: Here's some custom information
    authors:
      - name: John Doe
        email: john@doe.com
      - name: Jane Doe
        email: jane@doe.com

paths:
  /resources:
    get:
      description: gets some resource
      responses:
        200:
          description: everything is ok
          x-custom-response-data: I told you everything was really OK!
          schema:
            type: array
            items:
              $ref: &quot;#/definitions/Resource&quot;

definitions:
  Resource:
    x-custom-definition-data: some.dummy.class.Resource
    properties:
      data:
        description: some data
        type: string
        x-custom-property-data: More blah blah about this property&lt;/code&gt;&lt;/pre&gt;
  &lt;div class=&quot;code-bottom-toolbar&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;btn btn-default btn-block&quot; onclick=&quot;toggle(this, this.parentElement.parentElement.children[1], this.parentElement.parentElement.children[0].children[0].children[0], true)&quot;&gt;&lt;i class=&quot;fa fa-expand&quot; aria-hidden=&quot;true&quot;&gt;&lt;/i&gt;&lt;/button&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;h1 id=&quot;why-customizing-the-openapi-specification&quot;&gt;Why customizing the OpenAPI specification?&lt;/h1&gt;

&lt;p&gt;So, adding custom information within an OpenAPI specification file is fairly easy. But the question is less about the how and more about the why. Why would you add custom data to your OpenAPI files?&lt;/p&gt;

&lt;p&gt;You can use some extensions provided by open source or commercial tools or create your own. You can simply add custom data without processing them for documentation purpose or use these informations to generate documentation, client code, server code or tests or even configure some tools.&lt;/p&gt;

&lt;p&gt;Let’s see some examples.  &lt;br /&gt;
&lt;em&gt;nb: This post is not a sponsored one.&lt;/em&gt;&lt;/p&gt;

&lt;h1 id=&quot;example-1-documentation&quot;&gt;Example 1: Documentation&lt;/h1&gt;
&lt;p&gt;&lt;a href=&quot;https://docs.gelato.io/guides/control-grouping-with-swagger&quot;&gt;Gelato, the Mashape Developer Portal solution&lt;/a&gt;, uses the &lt;a href=&quot;https://docs.gelato.io/guides/control-grouping-with-swagger&quot;&gt;&lt;code&gt;x-gelato-group&lt;/code&gt;&lt;/a&gt; extension to group operations in the portal navigation.&lt;/p&gt;

&lt;div&gt;
      &lt;a href=&quot;&quot;&gt;&lt;img src=&quot;/images/writing-openapi-swagger-specification-tutorial-part-9-extending-the-openapi-specification/gelato.png&quot; /&gt;&lt;/a&gt;
      
    &lt;/div&gt;

&lt;p&gt;Of course, as an OpenAPI expert you would have use tags to do that. Beware to not reinvent the wheel when creating your extensions.&lt;/p&gt;

&lt;h1 id=&quot;example-2-client-code-generation&quot;&gt;Example 2: Client code generation&lt;/h1&gt;

&lt;p&gt;&lt;a href=&quot;https://docs.apimatic.io/advanced/swagger-test-cases-extensions/&quot;&gt;API Matic, a SDK/DX kits generator&lt;/a&gt; uses extension ton control SDK generation.&lt;/p&gt;

&lt;div&gt;
      &lt;a href=&quot;&quot;&gt;&lt;img src=&quot;/images/writing-openapi-swagger-specification-tutorial-part-9-extending-the-openapi-specification/apimatic.png&quot; /&gt;&lt;/a&gt;
      
    &lt;/div&gt;

&lt;h1 id=&quot;example-3-server-code-generation&quot;&gt;Example 3: Server code generation&lt;/h1&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/swagger-api/swagger-node&quot;&gt;Swagger Node, a node module which help to build API implementation with a design first approach&lt;/a&gt; uses a &lt;code&gt;x-swagger-router-controller&lt;/code&gt; extension to link an API endpoint to its controller implementation.&lt;/p&gt;

&lt;div&gt;
      &lt;a href=&quot;&quot;&gt;&lt;img src=&quot;/images/writing-openapi-swagger-specification-tutorial-part-9-extending-the-openapi-specification/swagger-node.png&quot; /&gt;&lt;/a&gt;
      
    &lt;/div&gt;

&lt;h1 id=&quot;example-4-api-gateway-configuration&quot;&gt;Example 4: API gateway configuration&lt;/h1&gt;

&lt;p&gt;Not only the AWS API gateway allows to import a Swagger/OpenAPI file but it also provides a &lt;a href=&quot;(http://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-swagger-extensions.html)&quot;&gt;complete set of extensions&lt;/a&gt; to configure how the API is linked to backend systems (like lambda).&lt;/p&gt;

&lt;div&gt;
      &lt;a href=&quot;&quot;&gt;&lt;img src=&quot;/images/writing-openapi-swagger-specification-tutorial-part-9-extending-the-openapi-specification/aws-api-gateway.png&quot; /&gt;&lt;/a&gt;
      
    &lt;/div&gt;

&lt;h1 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h1&gt;
&lt;p&gt;This post concludes the OpenAPI/Swagger specification tutorial. You master now every single aspect of the OpenAPI specification and with this last post I hope to have given you some ideas to be creative to include this format in each step of the API lifecycle.&lt;/p&gt;</content><author><name>Arnaud Lauret</name></author><category term="posts" /><category term="OpenAPI" /><category term="Swagger" /><category term="API Specification" /><category term="Documentation" /><category term="API First" /><summary type="html">This is the end, my OpenAPI friends, the end. The end? Not really. This last part of the OpenAPI tutorial is a new beginning. With previous parts we have learned to master the OpenAPI specification but there’s a last thing to learn to unleash its full power: extensions. This format is easily extensible, it allows to add custom data within an API description. But for what purposes? Let’s have a glimpse of these extensions endless possibilities.</summary></entry></feed>