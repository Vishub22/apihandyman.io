<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.8.5">Jekyll</generator><link href="https://apihandyman.io/feed.xml" rel="self" type="application/atom+xml" /><link href="https://apihandyman.io/" rel="alternate" type="text/html" /><updated>2019-12-13T23:56:03+00:00</updated><id>https://apihandyman.io/feed.xml</id><title type="html">API Handyman</title><subtitle>{&quot;input&quot; : &quot;learn&quot;, &quot;output&quot; : &quot;share&quot;}</subtitle><entry><title type="html">Lessons learned while demoing API to non-developers</title><link href="https://apihandyman.io/lessons-learned-while-demoing-api-to-non-developers/" rel="alternate" type="text/html" title="Lessons learned while demoing API to non-developers" /><published>2019-11-22T00:00:00+00:00</published><updated>2019-11-22T00:00:00+00:00</updated><id>https://apihandyman.io/lessons-learned-while-demoing-api-to-non-developers</id><content type="html" xml:base="https://apihandyman.io/lessons-learned-while-demoing-api-to-non-developers/">&lt;p&gt;What would you do if you had to demo API to non-developers in a highly-constrained context? How would you do without curl, Postman or any other API tool usually used? How would you do without your usual fun API examples? I had to do that a few weeks ago and was quite happy by the questions that arose and the solutions found. The whole story definitely deserves a post in order to share what I’ve learned!&lt;!--more--&gt;&lt;/p&gt;

&lt;h1 id=&quot;the-request&quot;&gt;The request&lt;/h1&gt;

&lt;p&gt;A part of my job is explaining to developers and non-developers what are APIs and what can be done with them from both technical and business perspectives. I regularly do some presentations or training to do so, especially a very first API 101 session simply consisting in some slides without any hands-on. A few weeks ago, I received a request that seemed quite simple at first: “we want to organize the usual API 101 for non developers … but this time, it would be great to let them make &lt;em&gt;code&lt;/em&gt; some API stuff. And you have less than 45 minutes, probably half an hour”. The objective was to make these people grasp a little bit more than usual what APIs are and let them understand their simplicity during this first session.&lt;/p&gt;

&lt;p&gt;At first, I was like: “oh no problem, we’ll use curl and Postman to make calls to the SWAPI API (an API providing information about the Star Wars movies) or the PokeAPI (providing information Pokemons), it shouldn’t take more than 10 minutes during the presentation, so even with half an hour that should be OK. Unfortunately that was not that simple.&lt;/p&gt;

&lt;h1 id=&quot;beware-the-context-when-choosing-hands-on-tools&quot;&gt;Beware the context when choosing hands-on tools&lt;/h1&gt;

&lt;p&gt;Problems started with the tooling. Indeed, the people attending this session have standard-for-non-developer laptops. These laptops do not come with Postman or curl, and even if the attendees were admins (highly improbable) on these laptops, installing tools would be far too complicated and would take a too long time in such a short session (and it would probably ruin the “APIs are simple” message).&lt;/p&gt;

&lt;p&gt;OK, no problems, only solutions. These machines come with Windows 10 and PowerShell, I’m not familiar with it but I thought “Well, a PowerShell-curl probably exists”. Yes it does, there are &lt;code&gt;Invoke-RestMethod&lt;/code&gt;and &lt;code&gt;Invoke-WebRequest&lt;/code&gt; that seem to do the job. Unfortunately, I did not succeed to make them work with our f****** corporate proxy. As far as I’ve seen, it would have required to make too much complicated stuff and would have taken too much time (I may have missed something).&lt;/p&gt;

&lt;p&gt;And there was also this “code some API stuff” idea. One of my colleagues suggested to use &lt;a href=&quot;https://jsfiddle.net/&quot;&gt;JSFiddle&lt;/a&gt;. Brilliant! It’s a browser based tool and therefore it requires absolutely no installation. It allows to tinker with HTML, JS and CSS. I first checked that it was not blocked by our corporate proxy … and yes! It worked. I discovered that JSFiddle (and other similar tools) comes with some useful features (if you pay of course) for training sessions, especially private fiddles. That could be interesting to manage calls to API needing authentication (to safely store credentials). I keep that in a corner of my mind for another time as I didn’t want to use secured APIs during this session. I developed a simple example with basic HTML and JavaScript doing an API call.&lt;/p&gt;

&lt;div&gt;
      &lt;img src=&quot;/images/lessons-learned-while-demoing-api-to-non-developers/jsfiddle.png&quot; /&gt;
      &lt;p class=&quot;img-label&quot;&gt;Using JSFiddle and HTML/JS code is maybe too complex for non-developers&lt;/p&gt;
    &lt;/div&gt;

&lt;p&gt;I thought I could let attendees modify it to make some API calls themselves. From the very beginning I was not comfortable with that. Hopefully, I could test the idea with the persons (non-developers) who made the request and specifically asked for the “code some API stuff”. It didn’t take us long to realize that was a terrible idea. JSFiddle would look terribly complex and having to modify some JS code would be a nightmare for people who never have done that before.&lt;/p&gt;

&lt;p&gt;OK, if attendees could not actually write code in that context, they could at least use their browser to call an API, that’s web APIs we had to talk about after all. All that is needed is typing something in the browser’s address bar. And people could “code” some API stuff by tweaking the URLs and parameters. We, all agreed that was the best option in our context and it fulfilled the requirements.&lt;/p&gt;

&lt;p&gt;But which API to use?&lt;/p&gt;

&lt;h1 id=&quot;take-care-of-finding-api-examples-adapted-to-the-audience&quot;&gt;Take care of finding API examples adapted to the audience&lt;/h1&gt;

&lt;p&gt;I’m used to use &lt;a href=&quot;https://swapi.co/&quot;&gt;SWAPI&lt;/a&gt; (Star War API) when demoing APIs in such 101 sessions. It’s simple, fun and requires no authentication. But, in that context, I realized that using SWAPI would lead to two problems.&lt;/p&gt;

&lt;p&gt;The first problem was simply technical. In such demo I usually use curl to call SWAPI. But in that context I had to use a browser and unfortunately SWAPI is too smart, it handles content negotiation very well. Indeed, when you call SWAPI from a browser, you don’t get raw JSON data but an HTML page. But, I wanted to show some ugly raw JSON data and not HTML! So, I found another funny API, the &lt;a href=&quot;http://www.dnd5eapi.co&quot;&gt;D&amp;amp;D&lt;/a&gt; API. Typing the &lt;a href=&quot;http://www.dnd5eapi.co/api/classes&quot;&gt;http://www.dnd5eapi.co/api/classes&lt;/a&gt; URL in the browser’s address bar shows some beautifully-ugly JSON raw data listing available characters class in the fifth edition of Dungeons &amp;amp; Dragons rule books. I thought it was perfect … but not at all: that’s the seconde problem.&lt;/p&gt;

&lt;p&gt;Indeed, the second problem with such fun API is functional. SWAPI or D&amp;amp;D are totally fun from my perspective, but their fields were thousands light-years away of what matters for the attendees. For this demo we needed an API that would resonate with them. I needed an example that makes sense for people in the financial industry. Hopefully, I found a more suitable API: the &lt;a href=&quot;https://exchangeratesapi.io/&quot;&gt;Foreign Exchange Rate API&lt;/a&gt;. This API provides current and historical foreign exchange rates published by the European Central Bank. Basically, if you want to know how much Japan Yen you can get for a Euro, this API is for you. OK, forex is not a field as fun as Star Wars and D&amp;amp;D but this API provides data the attendees are familiar with (especially the ISO 4217 currency codes), it’s dead simple and provides enough functions and parameters to let total API beginners have fun with it.&lt;/p&gt;

&lt;p&gt;Once the API chosen, I listed the API calls the attendees would have to do and the questions I would ask them during the “API call exercises” part of the session. I was almost done but I wanted to show how this Foreign Exchange Rate API could be used in a simple application along with another API (to show how by combining easily simple API you can do interesting stuff).&lt;/p&gt;

&lt;h1 id=&quot;build-an-all-in-one-demo-application&quot;&gt;Build an all-in-one demo application&lt;/h1&gt;

&lt;p&gt;So, I wrote a simple &lt;a href=&quot;https://arno-di-loreto.github.io/simple-api-demo/&quot;&gt;webapp&lt;/a&gt; (using &lt;a href=&quot;https://jsfiddle.net/arnaudlauret/8catx91d&quot;&gt;JS Fiddle&lt;/a&gt; and &lt;a href=&quot;https://github.com/arno-di-loreto/simple-api-demo&quot;&gt;Github pages&lt;/a&gt; by the way) combining the Foreign Exchange Rate API and the &lt;a href=&quot;https://restcountries.eu/&quot;&gt;REST Countries&lt;/a&gt; API which provide information about countries such as languages, borders, flags, … It consists in a simple form that let users convert an amount in a source currency to a target currency. It also shows trivia about the selected currencies such as the countries which use them and their flags. The available currencies and exchange rate come from the exchange rate API and the country/currency relationship and country flag come from REST country API.&lt;/p&gt;

&lt;p&gt;And then I thought it would be interesting to show the actual API calls that were triggered when using the web application. I first though to use the browser’s developer tools. Indeed, using the network panel and filtering to XHR request, you can see the API calls made by the JavaScript code. But again, that would have been too complex just like showing them JSFiddle (IMHO).&lt;/p&gt;

&lt;div&gt;
      &lt;img src=&quot;/images/lessons-learned-while-demoing-api-to-non-developers/browser-dev-tools.png&quot; /&gt;
      &lt;p class=&quot;img-label&quot;&gt;Filtering XHR request in browser dev tools? Too scary!&lt;/p&gt;
    &lt;/div&gt;

&lt;p&gt;So I came to the idea of adding an API call log directly within the web application. This log shows which called are done and why. API calls are log during the webpage initial loading but also when users interact with it. On each new action, the new call are added to the top of the list and the previous calls are shown in light grey.&lt;/p&gt;

&lt;div&gt;
      &lt;img src=&quot;/images/lessons-learned-while-demoing-api-to-non-developers/demo-app.png&quot; /&gt;
      &lt;p class=&quot;img-label&quot;&gt;Demo application including detailed API call log? Far more non-developers friendly!&lt;/p&gt;
    &lt;/div&gt;

&lt;h1 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h1&gt;

&lt;p&gt;So I was totally ready for this special 101 session with a bonus hands-on. And hopefully everything went very well, but even if that presentation was very important (because of the very important people in the audience), I will remember more its preparation as it helped me (re)discover very interesting things. Preparing this unusual session reminded me that whatever you do: beware the context before making any choice. I’m also quite happy to have find this idea of building an all-in-one demo application which explain what happens behind the hood and will reuse and expand this concept in the future.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;PS: Oh, and I almost forgot … it also reminded me how so many tools are unable to deal with corporate proxies easily. I may write something about that one day.&lt;/em&gt;&lt;/p&gt;</content><author><name>Arnaud Lauret</name></author><category term="posts" /><category term="Avocado" /><summary type="html">What would you do if you had to demo API to non-developers in a highly-constrained context? How would you do without curl, Postman or any other API tool usually used? How would you do without your usual fun API examples? I had to do that a few weeks ago and was quite happy by the questions that arose and the solutions found. The whole story definitely deserves a post in order to share what I’ve learned!</summary></entry><entry><title type="html">API Design Tips And Tricks - What if consumers can’t do PATCH, PUT or DELETE?</title><link href="https://apihandyman.io/api-design-tips-and-tricks-what-if-consumers-cant-do-patch-put-or-delete/" rel="alternate" type="text/html" title="API Design Tips And Tricks - What if consumers can't do PATCH, PUT or DELETE?" /><published>2019-11-07T00:00:00+00:00</published><updated>2019-11-07T00:00:00+00:00</updated><id>https://apihandyman.io/api-design-tips-and-tricks-what-if-consumers-cant-do-patch-put-or-delete</id><content type="html" xml:base="https://apihandyman.io/api-design-tips-and-tricks-what-if-consumers-cant-do-patch-put-or-delete/">&lt;p&gt;There are quite many APIs out there taking advantage of all standard HTTP methods (&lt;code&gt;GET&lt;/code&gt;, &lt;code&gt;POST&lt;/code&gt;, &lt;code&gt;PATCH&lt;/code&gt;, &lt;code&gt;PUT&lt;/code&gt; and &lt;code&gt;DELETE&lt;/code&gt;). Unfortunately, there are still some cases where consumers can’t use them all. As far as I know, &lt;code&gt;GET&lt;/code&gt; and &lt;code&gt;POST&lt;/code&gt; do not cause any problem at all. But as an API provider, do not take for granted that &lt;code&gt;DELETE&lt;/code&gt;, &lt;code&gt;PUT&lt;/code&gt; and the more dreaded &lt;code&gt;PATCH&lt;/code&gt; HTTP methods can always be used by your consumers. I encountered this problem several times throughout the years and no later than a few weeks ago. Let’s see why and how to solve this problem.
&lt;!--more--&gt;&lt;/p&gt;

&lt;h1 id=&quot;what-could-prevent-consumers-from-using-put-patch-or-delete&quot;&gt;What could prevent consumers from using PUT, PATCH or DELETE?&lt;/h1&gt;

&lt;p&gt;I encountered this problem several times, the first one was probably around 2012 and the last one in 2019 a few weeks ago (hence this post). These two experiences, reflect the two possible causes of the inability of consumers to use HTTP methods such as &lt;code&gt;PATCH&lt;/code&gt;, &lt;code&gt;PUT&lt;/code&gt; or &lt;code&gt;DELETE&lt;/code&gt;: network or framework limitations.&lt;/p&gt;

&lt;h2 id=&quot;network-limitations&quot;&gt;Network limitations&lt;/h2&gt;

&lt;p&gt;The first time I encountered such problem, it was around 2012. I was building my first “RESTish” API. At that time I was a total beginner regarding REST APIs (and made quite a few mistakes, but that’s another story). I had read a some books and blog posts about such APIs and discovered that you had to use the HTTP semantic when designing them. So, here I was, carefully choosing the adequate HTTP method depending on what I wanted to do: &lt;code&gt;GET&lt;/code&gt; to read something, &lt;code&gt;POST&lt;/code&gt; to create something, &lt;code&gt;PUT&lt;/code&gt; to replace/update something and &lt;code&gt;DELETE&lt;/code&gt; to delete something (yep, I did not used &lt;code&gt;PATCH&lt;/code&gt; at that time).&lt;/p&gt;

&lt;p&gt;This API was supposed to be used by various consumers including a website built by another team in another company belonging to the same group as mine. This consumer had to pass through various internal network zones of the group to access our APIs. Unfortunately, on their side all their reverse proxies and firewalls only allowed the use of &lt;code&gt;GET&lt;/code&gt; and &lt;code&gt;POST&lt;/code&gt;. Why? Because for a very long time that was all what websites (or most HTTP based software) needed to operate, so anything else was forbidden (usually for security purpose).&lt;/p&gt;

&lt;h2 id=&quot;framework-limitations&quot;&gt;Framework limitations&lt;/h2&gt;

&lt;p&gt;The last time, I encountered this problem was a few weeks ago in 2019. I am now a little bit more experienced (I even wrote a book about web API design, but that’s another story you can read &lt;a href=&quot;/few-things-i-learned-writing-the-design-of-web-apis&quot;&gt;here&lt;/a&gt;) and a part of my job is helping people design APIs.&lt;/p&gt;

&lt;p&gt;One of the team I’m working with is building an API that is supposed to be used in some famous SAAS CRM solution. As their API deals with some updates, it uses the &lt;code&gt;PATCH&lt;/code&gt; HTTP method as said in our API design guidelines. Unfortunately, the team in charge of calling this API from the SAAS solution encountered some unexpected problems. The SAAS solution’s development framework only knows &lt;code&gt;GET&lt;/code&gt;, &lt;code&gt;POST&lt;/code&gt;, &lt;code&gt;PUT&lt;/code&gt; and &lt;code&gt;DELETE&lt;/code&gt;, it’s impossible to make a call to an external API using &lt;code&gt;PATCH&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Some other cases of “framework limitations” I encountered were due to the use of ancient on-premise COTS (Commercial-Off-The-Shelf) facing the same problem as this SAAS solution and also the use of old browsers.&lt;/p&gt;

&lt;p&gt;Whatever the reason, that’s a real problem: some consumers may simply be unable to use all of the API features. There are two ways to solve the problem: solving the root cause and if that is not possible find a design workaround.&lt;/p&gt;

&lt;h1 id=&quot;first-solution-solve-the-root-cause&quot;&gt;First solution: solve the root cause&lt;/h1&gt;

&lt;p&gt;Solving the root cause regarding the network limitations shouldn’t be a problem. Indeed, I think that it is probably not a problem anymore, so there’s nothing to solve. But just in case and more for historical purpose, here’s how to handle it. There are probably two categories of people to talk to: the security people and the network people. Back in 2012, when I was building my first API, I encountered the same problem as my colleagues. Our mobile application couldn’t use our brand new API because our reverse proxies also only allowed &lt;code&gt;GET&lt;/code&gt; and &lt;code&gt;POST&lt;/code&gt;. To solve this problem, I just had to explain to those people that our mobile application actually needed &lt;code&gt;PUT&lt;/code&gt; and &lt;code&gt;DELETE&lt;/code&gt; to work properly and show them how other companies were doing to demystify the “new” HTTP methods. Thanks to that, I learned one important thing: before considering any design modification due to some contextual problems, I always check if the problem cannot be solve.&lt;/p&gt;

&lt;p&gt;Unfortunately, my 2012 fellow colleagues, didn’t had the same chance. Modifying the reverse proxies configuration was more complicated for them and would have took a longer time than what we had. And more recently, my colleagues also couldn’t fix the root cause: the framework’s bug or missing feature has been known by the SAAS company for at least 3 years and still hasn’t been solve. So I had to find a design workaround.&lt;/p&gt;

&lt;h1 id=&quot;last-resort-solution-find-a-design-workaround&quot;&gt;Last resort solution: find a design workaround&lt;/h1&gt;

&lt;p&gt;How to modify an API design which takes advantage of the HTTP method semantics in order to be used by consumers which cannot use all the API’s HTTP method? There are two ways to do so: the bad one and the clever one.&lt;/p&gt;

&lt;p&gt;The bad way of modifying the API design to solve this problem would be to simply get rid of the HTTP semantic and simply use &lt;code&gt;POST&lt;/code&gt; for everything (or possibly &lt;code&gt;GET&lt;/code&gt; to read and &lt;code&gt;POST&lt;/code&gt; for the rest). Not using HTTP method semantic is not the problem here, the problem is to heavily modify a design for only a handful of consumers. In Star Trek II The Wrath of Khan (1982), Mr Spock says “Logic clearly dictates that the needs of the many outweigh the needs of the few.”, and he is totally right (at least when it comes to designing APIs). It means, that to solve this problem, the design must be modified in a sufficiently clever way that allows the handful of HTTP restricted consumers to use the API without bothering the vast majority which can shamelessly use all of HTTP methods.&lt;/p&gt;

&lt;p&gt;So, let’s do it the clever way. The minimal set of HTTP methods that can be used by any HTTP consumer is composed of &lt;code&gt;GET&lt;/code&gt; and &lt;code&gt;POST&lt;/code&gt;. As we need to find a replacement to methods such as &lt;code&gt;PUT&lt;/code&gt;, &lt;code&gt;PATCH&lt;/code&gt; or &lt;code&gt;DELETE&lt;/code&gt; which are not safe (they may change resources), the only possible solution is to use &lt;code&gt;POST&lt;/code&gt; to simulate them (because &lt;code&gt;GET&lt;/code&gt; is safe). In order to be able to make the difference between a regular &lt;code&gt;POST&lt;/code&gt; and a &lt;code&gt;POST&lt;/code&gt; simulating let’s say a &lt;code&gt;PATCH&lt;/code&gt; request, a parameter indicating the real HTTP method must be provided. This can be done by providing a HTTP header named &lt;code&gt;X-HTTP-Method&lt;/code&gt;, &lt;code&gt;X-Method-Override&lt;/code&gt; or &lt;code&gt;X-HTTP-Method-Override&lt;/code&gt; (I prefer the last one, it seems to be used more than the others) which value is &lt;code&gt;PATCH&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;A consumer which is not restricted in its use of HTTP methods will do a regular &lt;code&gt;PATCH&lt;/code&gt; request as follows:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;PATCH /some-resources/some-id HTTP/1.1

{
  &quot;some&quot;: &quot;data&quot;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A consumer which cannot do a &lt;code&gt;PATCH&lt;/code&gt; request, will send a &lt;code&gt;POST&lt;/code&gt; request along with the parameter stating the “true” HTTP method to be used:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;POST /some-resources/some-id HTTP/1.1
X-HTTP-Method-Override: PATCH

{
  &quot;some&quot;: &quot;data&quot;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And now, what if I tell you that some (really annoying) consumers limited to &lt;code&gt;GET&lt;/code&gt; and &lt;code&gt;POST&lt;/code&gt; are also unable to send custom HTTP headers? Better be ready to also allow them to pass the overridden HTTP method as a query parameter such as &lt;code&gt;_httpMethod&lt;/code&gt; or &lt;code&gt;_method&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;POST /some-resources/some-id?_httpMethod=PATCH HTTP/1.1

{
  &quot;some&quot;: &quot;data&quot;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Such design trick is implemented in many APIs and products offering APIs, but don’t be fooled by its simplicity, there are some consequences that you must be aware of.&lt;/p&gt;

&lt;h1 id=&quot;consequences&quot;&gt;Consequences&lt;/h1&gt;

&lt;p&gt;Using this trick will have consequences on security, API gateway configuration, documentation and logs.&lt;/p&gt;

&lt;h2 id=&quot;security&quot;&gt;Security&lt;/h2&gt;

&lt;p&gt;First above all: security. Let’s say that an API provides the following operations:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;POST /resources&lt;/code&gt; which creates some resource, requires the &lt;code&gt;create&lt;/code&gt; Oauth scope&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;DELETE /resources&lt;/code&gt; which allows to massively delete some resources, requires the &lt;code&gt;delete&lt;/code&gt; Oauth scope&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If the HTTP method override is implemented without caution (at the actual implementation or on the API gateway securing the API), a consumer which only has the &lt;code&gt;create&lt;/code&gt; scope could unduly massively delete resources by sending a &lt;code&gt;POST /resources?_httpMethod=DELETE&lt;/code&gt; request. So do not forget that security controls must be adapted when adding such mechanism: when an overridden call comes, the relevant security control must be made (in this case, check if the consumer has the &lt;code&gt;delete&lt;/code&gt; scope).&lt;/p&gt;

&lt;h2 id=&quot;api-gateway-configuration&quot;&gt;API Gateway configuration&lt;/h2&gt;

&lt;p&gt;If an API gateway sits in front of the API’s implementation (to deal with high level security), it is usually configured by providing the sets of available operation (as an OpenAPI file if the API gateway provider is smart). If you need to use the HTTP method override trick, you’ll have to update your configuration.&lt;/p&gt;

&lt;p&gt;Let’s says the API provides the following operations:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;POST /resources&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;DELETE /resources&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;PUT /resources/{resourceId}&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In that case, to support HTTP method override, you’ll need to declare:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;A modified &lt;code&gt;POST /resources&lt;/code&gt; with the additional query (&lt;code&gt;_httpParam&lt;/code&gt; for example) and/or header (&lt;code&gt;X-HTTP-Method-Override&lt;/code&gt;) parameters to handle overridden &lt;code&gt;DELETE /resources&lt;/code&gt; requests&lt;/li&gt;
  &lt;li&gt;An unmodified &lt;code&gt;DELETE /resources&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;An unmodified &lt;code&gt;PUT /resources/{resourceId}&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;A new &lt;code&gt;POST /resources/{resourceId}&lt;/code&gt; to handle overridden &lt;code&gt;PUT /resources/{resourceId}&lt;/code&gt; requests&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Note that security and gateway configuration could be simplified by implementing directly the trick at the gateway level once and for all. That way, backend API implementation would not have to deal with that (I’ll probably make a post about dos and don’ts or API gateways).&lt;/p&gt;

&lt;h2 id=&quot;logs&quot;&gt;Logs&lt;/h2&gt;

&lt;p&gt;Such design modification will obviously impacts your API calls logs and dashboards, you’ll have to separate true &lt;code&gt;POST&lt;/code&gt; requests from the overridden &lt;code&gt;PATCH&lt;/code&gt;, &lt;code&gt;PUT&lt;/code&gt; and &lt;code&gt;DELETE&lt;/code&gt; ones or find a way to log them cleverly to avoid doing so. Note that you should not totally hide these overridden request, it is always useful to know if this feature is actually used and how.&lt;/p&gt;

&lt;h2 id=&quot;documentation&quot;&gt;Documentation&lt;/h2&gt;

&lt;p&gt;And finally do not forget to update your documentation. The better is to fully explain the trick once and for all and add links to this explanation when needed. If your reference documentation relies on the same OpenAPI file used for your gateway, you should get rid of trick-specific parameters and operations (the ones you add for the gateway configuration for example) to keep it readable.&lt;/p&gt;

&lt;h1 id=&quot;conclusion-always-analyze-consumers-contexts&quot;&gt;Conclusion: always analyze consumers contexts&lt;/h1&gt;

&lt;p&gt;While a bit annoying, such a problem teaches us a good lesson: always analyze consumers contexts in order to propose an accurate design.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;And if you wonder what this post banner means: it’s a toy version of the french Peugeot 405 made by french toy company Majorette. The HTTP status code 405 means Method not allowed.&lt;/em&gt;&lt;/p&gt;</content><author><name>Arnaud Lauret</name></author><category term="posts" /><category term="API Design Tips And Tricks" /><summary type="html">There are quite many APIs out there taking advantage of all standard HTTP methods (GET, POST, PATCH, PUT and DELETE). Unfortunately, there are still some cases where consumers can’t use them all. As far as I know, GET and POST do not cause any problem at all. But as an API provider, do not take for granted that DELETE, PUT and the more dreaded PATCH HTTP methods can always be used by your consumers. I encountered this problem several times throughout the years and no later than a few weeks ago. Let’s see why and how to solve this problem.</summary></entry><entry><title type="html">Few things I learned writing The Design of Web APIs</title><link href="https://apihandyman.io/few-things-i-learned-writing-the-design-of-web-apis/" rel="alternate" type="text/html" title="Few things I learned writing The Design of Web APIs" /><published>2019-11-02T00:00:00+00:00</published><updated>2019-11-02T00:00:00+00:00</updated><id>https://apihandyman.io/few-things-i-learned-writing-the-design-of-web-apis</id><content type="html" xml:base="https://apihandyman.io/few-things-i-learned-writing-the-design-of-web-apis/">&lt;p&gt;At last, my book The Design of Web APIs is finished and printed! I gradually got back to a “normal” life since the end of summer as the book entered in its production phase, but it was only when I received the printed copies two weeks ago that I had the feeling that this adventure was really over. And then holding the book in my hands, I wondered if it was worth having spent two years of my life on it, what did I learn spending almost all my free time working on this book? That sounded like a good topic to revive the API Handyman blog.
&lt;!--more--&gt;&lt;/p&gt;

&lt;h1 id=&quot;the-design-of-web-apis&quot;&gt;The Design of Web APIs&lt;/h1&gt;

&lt;p&gt;The &lt;a href=&quot;http://bit.ly/designwebapis&quot;&gt;Design of Web APIs&lt;/a&gt; is my first book. Before that, I have been blogging for 2 years before being contacted by Manning to write a book about the OpenAPI Specification. It’s an interesting topic (I spend almost a year writing a extensive &lt;a href=&quot;http://apihandyman.io/writing-openapi-swagger-specification-tutorial-part-1-introduction/&quot;&gt;tutorial&lt;/a&gt; on version 2) but I had other ideas in mind at that time: &lt;em&gt;The Design of Everyday APIs&lt;/em&gt;. I wanted to write a book that teaches API design principles and not a book about a given technology, I wanted to make a sort of API design version of The Design of Everyday Things by Don Norman. I discovered this book thanks to &lt;a href=&quot;https://twitter.com/mamund&quot;&gt;Mike Amundsen&lt;/a&gt;, it changed the way I envision software.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;The Design of Everyday Things is a best-selling book by cognitive scientist and usability engineer Donald Norman about how design serves as the communication between object and user, and how to optimize that conduit of communication in order to make the experience of using the object pleasurable. One of the main premises of the book is that although people are often keen to blame themselves when objects appear to malfunction, it is not the fault of the user but rather the lack of intuitive guidance that should be present in the design. (&lt;a href=&quot;https://en.wikipedia.org/wiki/The_Design_of_Everyday_Things&quot;&gt;Wikipedia&lt;/a&gt;)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The Design of Everyday APIs was only a working title, I never have been comfortable with it as I had the feeling that I was borrowing the fame of Don Norman’s book. Hopefully it was changed to the more simple and obvious &lt;em&gt;The Design of Web APIs&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;The title is not the only thing that has changed during the creation of this book. The table of content and the content itself has greatly evolve during these two years to become the book I’m so proud of. But more important, I changed by learning a few things.&lt;/p&gt;

&lt;h1 id=&quot;how-to-actually-write-a-technical-book-or-other-things&quot;&gt;How to actually write a technical book (or other things)&lt;/h1&gt;

&lt;p&gt;I’m glad I made this book with a publisher and did not self-publish it because the result would probably have been a terrible mess … if I actually finished it. Having a (good) publisher was great because the people working there helped me in many ways like, for example, fixing typos, challenging the book’s content or gently asking me when I planned to finish the next chapter and so help me keeping the pace. But more important, if I know quite a few things about API design and I like story telling, I didn’t knew how to actually write a book and my publisher taught me to do so. I’m not a professional writer, I may even be wrong, there are probably thousands of books and blog posts about writing, but here’s what I retain after writing this book (and what I try to reuse now when writing anything):&lt;/p&gt;

&lt;p&gt;First define what you will actually talk about in your book. To do so, ask yourself:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Who are your readers?&lt;/li&gt;
  &lt;li&gt;What do they need to know/do before reading the book?&lt;/li&gt;
  &lt;li&gt;What will they learn/be able to do by reading it?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Once the book’s objective is defined, write the table of content (ToC). It is the backbone of the book, your battle plan. It should tell a story that will help readers to achieve the book’s objective.
The first versions can be rough without going to deep into details, just think about the main steps of the story. You’ll fill the details by working on each chapter and maybe adjust the ToC.&lt;/p&gt;

&lt;p&gt;Then for each chapter:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Make the elevator pitch of why readers should care about this chapter’s content. It shouldn’t take more than a few sentences.&lt;/li&gt;
  &lt;li&gt;List what readers need to know/do before reading it, basically topics from previous chapters. It may help to spot missed topics.&lt;/li&gt;
  &lt;li&gt;List new concept taught&lt;/li&gt;
  &lt;li&gt;List the examples used to explain the new concepts&lt;/li&gt;
  &lt;li&gt;Sketch the main diagrams that will be used&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It’s not that easy to do, don’t be afraid if it takes time but if if really doesn’t work, maybe you should get rid of this chapter and rethink your ToC. With all these elements, it’s easier to write the chapter: once you have a good view the content, you “only” need to focus on how to tell the story in an entertaining way. Without them, be ready to face the white page syndrome and rewrite the chapter endlessly.&lt;/p&gt;

&lt;h1 id=&quot;theres-more-than-what-you-think-you-know-about-the-books-topic&quot;&gt;There’s more than what (you think) you know about the book’s topic&lt;/h1&gt;

&lt;p&gt;By writing a 400 pages book about API design, I ending by knowing far more about this topic than what I knew before starting it. This is not specific to book’s writing, I already noticed that after I started to blog.
Writing a book about API design forced me to actually list all the topics that readers need to be aware of and I “discovered” some topics I didn’t care much about before starting the book. I had to deeply investigate topics these topics but also ones I thought I knew. And most interesting, I had to find new ways of explaining things, finding examples and drawing diagrams while preparing chapters was of great help to do so.&lt;/p&gt;

&lt;h1 id=&quot;how-to-receive-and-provide-feedback&quot;&gt;How to receive and provide feedback&lt;/h1&gt;

&lt;p&gt;I received a lot of feedback during the book’s writing. I worked with a development editor and a technical editor who provided feedback on each chapter. There have been 3 readers reviews made on the first third (6 readers), second third (10 readers) and then first complete version of the book (16 readers). There were comments on the forum/live book. And I also got feedback from my friends and colleagues.&lt;/p&gt;

&lt;p&gt;The two first readers reviews, especially the second one, left me totally depressed. It was really hard to deal with them because some of them were negative. I even &lt;em&gt;felt&lt;/em&gt; that some were too harsh if not mean. I usually consider myself sufficiently adult to be able to get some negative feedback as long as it is argued and there can be a discussion. But, when you get feedback from a dozen readers at once and there is no possible discussion with the PDF file summing up their reviews, that’s really hard to manage, at least for me. Hopefully, I could get beyond that thanks to two things.&lt;/p&gt;

&lt;p&gt;First, I step back and objectively analyze the reviews to split them in smaller elements. Frankly, I don’t remember how I came to do that, probably because my development editor told me to do so or because I usually work like that. But I looked at the reviews and identified every good and bad point, check how many readers talk about them. Doing so I realized that it was not that bad and, even if that always hurt a bit, I agreed with most of the identified problems. I also realized that there was actually only one or two shitty reviewers (sorry, these persons may probably not actually be like that but this is how I felt based on the review) and this lead to my second point.&lt;/p&gt;

&lt;p&gt;So, the second thing that help me to go on after the reviews is that I’m lucky to know some authors who have been there and one of them gave me a really good advice. It could be summarized as “you under no obligation to give a shit about what people say”. Listen to what people say, take what is of interest for you and your book and leave the rest. And if they are not happy with that, tell them to write their own book.&lt;/p&gt;

&lt;p&gt;After these reviews, I realized that I may have been one of these assholes myself. So, I’m really happy that they taught me how to provide better feedback, especially when not face to face, and (I hope) not to be an asshole anymore when providing feedback.&lt;/p&gt;

&lt;h1 id=&quot;be-more-confident&quot;&gt;Be more confident&lt;/h1&gt;

&lt;p&gt;Hopefully, my development and technical editors feedback were more constructive and encouraging, also were comments from my trusted friends and colleagues. That really gave me confidence. I realized that what I was creating was really good (and I just realized that I became confident enough to actually write that the book is good). Besides having good feedback, I got even more confident seeing how all the book’s pieces fit together so well. And being confident about the book’s content made me more confident about what I do in my daily job, that’s priceless.&lt;/p&gt;

&lt;h1 id=&quot;trust-but-verify&quot;&gt;Trust, but verify&lt;/h1&gt;

&lt;p&gt;When you finish to write a book, the work is not over. The final phase is called the production phase. It mostly deals with copy-editing, graphics-editing, typesetting.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Copy-editing consist in fixing typos, grammar and vocabulary and also ensure a certain consistency in your writing. Note that in my case there was a previous ESL (english as second language) copy-editing phase to fix my frenglish. You must check every single modification made to YOUR text in order to be sure that what is written is ok for YOU. Some modifications may not make sense at all or you may simply not like them. It is your right to not accept such modification.&lt;/li&gt;
  &lt;li&gt;Graphics-editing is copy-editing for figures. Their texts will be copy-edited and their design may be more or less modified depending on their quality/style/size. In my case, my figures were only finally slightly modified but there has been some bug in the process. For an unknown reason, my figures were being totally remade in a new style that I totally hated. Hopefully, I noticed it and made that stopped. Everyone can make mistakes, that is why there are verifications phases, so don’t take them lightly even if you trust the third-parties modifying your work.&lt;/li&gt;
  &lt;li&gt;My definition of typesetting is: ajdusting words (split them sometime) and figure positions to avoid empty spaces. If you ever wondered why in some books figures seem in awkward places, in my experience, that is due to typesetting. I had to request a few modifications, but taking typesetting contraints into consideration, in order to avoid such problems on a few figures.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So, you can trust, be never forget to verify. Even if it is hard and boring as hell, you must be very careful when your book is modified by third-parties. You have to exhaustively check ALL modifications. Be confident and never refrain yourself to say no if something seem wrong for you.&lt;/p&gt;

&lt;h1 id=&quot;find-a-balance-between-the-book-and-the-rest&quot;&gt;Find a balance between the book and the rest&lt;/h1&gt;

&lt;p&gt;Finding a balance between the book and the rest, especially my family is something that I didn’t do so well at the beginning. If you do write a book, consider defined precisely when you work on it and keep time for your family and possibly for other activities (like reading, playing video games or playing the guitar in my case). That will keep everyone happy (including you) and increase your productivity when writing.&lt;/p&gt;

&lt;h1 id=&quot;never-complain-when-reading-others-books&quot;&gt;Never complain when reading others books&lt;/h1&gt;

&lt;p&gt;And finally, now that I know how hard it is to write a book (and especially to spot all those fucking typos), I will never complain again when I read others books (but I may try to provide some useful and friendly feedback).&lt;/p&gt;

&lt;h1 id=&quot;a-new-beginning&quot;&gt;A new beginning&lt;/h1&gt;

&lt;p&gt;Don’t know if so many people will find this post interesting, but I needed to write it to not forget what I’ve been through. Know that I never regretted starting to write blog posts or the book, so maybe you should think about writing too. Whatever, I’m back on the blog, so stay tune for more API related posts.&lt;/p&gt;</content><author><name>Arnaud Lauret</name></author><category term="post" /><summary type="html">At last, my book The Design of Web APIs is finished and printed! I gradually got back to a “normal” life since the end of summer as the book entered in its production phase, but it was only when I received the printed copies two weeks ago that I had the feeling that this adventure was really over. And then holding the book in my hands, I wondered if it was worth having spent two years of my life on it, what did I learn spending almost all my free time working on this book? That sounded like a good topic to revive the API Handyman blog.</summary></entry><entry><title type="html">Explore the OpenAPI Specification 3.0 with the OpenAPI Map</title><link href="https://apihandyman.io/explore-the-openapi-specification-3.0-with-the-openapi-map/" rel="alternate" type="text/html" title="Explore the OpenAPI Specification 3.0 with the OpenAPI Map" /><published>2018-03-09T00:00:00+00:00</published><updated>2018-03-09T00:00:00+00:00</updated><id>https://apihandyman.io/explore-the-openapi-specification-3.0-with-the-openapi-map</id><content type="html" xml:base="https://apihandyman.io/explore-the-openapi-specification-3.0-with-the-openapi-map/">&lt;p&gt;So you want to explore in depth the OpenAPI Specification version 3.0? You should take the OpenAPI Map with you!&lt;!--more--&gt;&lt;/p&gt;

&lt;p&gt;The OpenAPI Specification Visual Documentation is dead, long live the &lt;a href=&quot;http://openapi-map.apihandyman.io/&quot;&gt;OpenAPI Map&lt;/a&gt;! Very special thanks to &lt;a href=&quot;https://twitter.com/earth2marsh&quot;&gt;Marsh Gardiner&lt;/a&gt; for helping me find this name.&lt;/p&gt;

&lt;h1 id=&quot;what-is-the-openapi-map&quot;&gt;What is the OpenAPI Map?&lt;/h1&gt;

&lt;p&gt;Just in case you missed previous releases, the OpenAPI Map is a representation of the OpenAPI Specification documentation as a tree. Using it, you can see how an OpenAPI document is organized and discover all OpenAPI objects and properties dark secrets.&lt;/p&gt;

&lt;div&gt;
      &lt;a href=&quot;http://openapi-map.apihandyman.io/&quot;&gt;&lt;img src=&quot;/images/commons/openapi/openapi-map.png&quot; /&gt;&lt;/a&gt;
      &lt;p class=&quot;img-label&quot;&gt;&lt;a href=&quot;http://openapi-map.apihandyman.io/&quot;&gt;OpenAPI Map&lt;/a&gt;&lt;/p&gt;
    &lt;/div&gt;

&lt;h1 id=&quot;updated-300-rc0-to-30&quot;&gt;Updated 3.0.0-rc0 to 3.0&lt;/h1&gt;

&lt;p&gt;Besides changing the tool’s name, I have replaced the OAS 3.0.0-rc0 version by 3.0 (3.0.1 precisely). You can now fully explore the OpenAPI Specification 3.0 version. This update from 3.0.0-rc0 to 3.0 was a bit longer than expected. There were quite some changes between the early 3.0.0-rc0 version and 3.0 official release. The version 3.0 is now fully documented and includes a complete changelog from version 2.0.&lt;/p&gt;

&lt;h1 id=&quot;other-enhancements&quot;&gt;Other enhancements&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;The Open API Map shows version 3.0 by default&lt;/li&gt;
  &lt;li&gt;Version 2.0 is still available via the navigation bar and you can now even access it directly using this link: &lt;a href=&quot;http://openapi-map.apihandyman.io/?version=2.0&quot;&gt;http://openapi-map.apihandyman.io/?version=2.0&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;Mandatory properties labels are now in red, no more need to pass mouse over a property to see it &lt;a href=&quot;https://github.com/arno-di-loreto/openapi-map/issues/10&quot;&gt;Issue #10&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;source-available-on-github&quot;&gt;Source available on Github&lt;/h1&gt;

&lt;p&gt;You can fork this project on &lt;a href=&quot;https://github.com/arno-di-loreto/openapi-map&quot;&gt;github&lt;/a&gt;. I have updated the readme in order to help people understand how it works but it may need some further updates. So do not hesite to tell me if you need help to use it.&lt;/p&gt;</content><author><name>Arnaud Lauret</name></author><category term="elsewhere" /><summary type="html">So you want to explore in depth the OpenAPI Specification version 3.0? You should take the OpenAPI Map with you!</summary></entry><entry><title type="html">How public web APIs raise software bar</title><link href="https://apihandyman.io/how-public-web-apis-raise-software-bar/" rel="alternate" type="text/html" title="How public web APIs raise software bar" /><published>2018-02-26T00:00:00+00:00</published><updated>2018-02-26T00:00:00+00:00</updated><id>https://apihandyman.io/how-public-web-apis-raise-the-software-bar</id><content type="html" xml:base="https://apihandyman.io/how-public-web-apis-raise-software-bar/">&lt;p&gt;While answering some question on my &lt;a href=&quot;http://bit.ly/designwebapis&quot;&gt;Design of Web APIs&lt;/a&gt; book’s &lt;a href=&quot;https://forums.manning.com/posts/list/42828.page&quot;&gt;forum&lt;/a&gt;, I wrote:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Now that I have seen brilliant Web APIs that can be used so easily because of their design but also the overall experience some can provide (the famous “DX”) I have become far more demanding and challenging with software in general&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Yes. Public web APIs definitely raise software bar. The whole software industry should take example on them … &lt;!--more--&gt;&lt;/p&gt;

&lt;h1 id=&quot;the-ideal-world-of-public-web-apis&quot;&gt;The Ideal world of public web APIs&lt;/h1&gt;

&lt;p&gt;I have been tinkering with web services and web APIs for a while now and it’s really interesting how the quite technical concept of remote Application Programming Interface moved my perception of sofware from a purely technical vision to something more human centered. I switched from &lt;em&gt;code software that solve problems&lt;/em&gt; to &lt;em&gt;design software that people use to fulfill their needs&lt;/em&gt;. How some companies envision providing public web APIs is even pushing this vision into &lt;em&gt;design software that people will love to use&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;How is this possible?&lt;/p&gt;

&lt;p&gt;Willingly or in order to make profit or both, we don’t care, these companies design APIs that you can understand at first sight and use easily to do what you want. But that’s not all, the API comes with all needed material in order to help you seamlessly; reference documentation, tutorial, sandbox, ready to use examples, sdks, … Everything is &lt;em&gt;designed&lt;/em&gt; in order to provide a wonderful experience with a minimal effort. Sometimes, this experience is so perfect, that you are just happy when using this API. Sometimes this experience so invisible that you feel incredibly smart because the whole system let you think that you use it instinctively.&lt;/p&gt;

&lt;p&gt;Both provider and consumer benefits from such experience. Consumers are autonomous, don’t lose time and money to use the API. They are so happy that may even promote the solution. Providers gain easily customers and lessen the need of support (or at least can focus on support where it’s really needed).&lt;/p&gt;

&lt;p&gt;Of course, not all public APIs provide such experience. And in some other domains of the software industry, we are at light years of that…&lt;/p&gt;

&lt;h1 id=&quot;the-crude-reality-of-not-so-dark-corners-of-the-software-industry&quot;&gt;The crude reality of not so dark corners of the software industry&lt;/h1&gt;

&lt;p&gt;Some words about me and my job: I am an architect in the banking industry…&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Nobody expects the Architect Inquisition!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;… but not the dreaded enterprise architect living in his ivory tower. Throwing utopian or unrealistic edict. Burning the heretics who dare to not apply them. No, definitely not that kind. I come from the trenches, I have been a developer, a project manager, a developer team manager. Now as an architect from the trenches, I have to deal with real world problems and find real world solutions. Always striking a balance between the sanity of our IT system, people building it, people running it and people using it and of course … money.&lt;/p&gt;

&lt;p&gt;In my daily job, I work with a motley collection of software solutions: homemade, open source, vendor ones, as a service, on premise, … All these software can be roughly separated in two categories: the software I choose on a shelf and the software I design.&lt;/p&gt;

&lt;p&gt;To tell the truth, I’m getting tired of software solutions I have to choose on a shelf that are only &lt;em&gt;created to solve problems&lt;/em&gt; and not &lt;em&gt;designed for people to fullfil their needs&lt;/em&gt;.
The gap between some enterprise grade software solutions and some (ideal) public web APIs is sometimes so wide that the Hubble telescope would probably not be able to see something from one end to the other. The cost of using some crappy designed solution is sometime really frightening.
When I choose a software, I mainly these criterias:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Does it fullfil our business needs?&lt;/li&gt;
  &lt;li&gt;How is it complicated/easy to install, run and use it?&lt;/li&gt;
  &lt;li&gt;Does it provide an API? what’s its quality?&lt;/li&gt;
  &lt;li&gt;How does look like its documentation?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If the first question is usually not a problem, the others are too often problematic. And this is usually a huge source of problems, time losed and money losed.&lt;/p&gt;

&lt;h1 id=&quot;a-open-letter-to-enterprise-grade-vendor-solutions&quot;&gt;A open letter to enterprise grade vendor solutions&lt;/h1&gt;

&lt;p&gt;Dear enterprise grade software solution vendors,&lt;/p&gt;

&lt;p&gt;When I use a public web API, I don’t know what’s happening behind the interface and I don’t care. I can also use it easiliy. When I have to install a software on premise, I would like to have something equivalent. Of course I may have to install something and do some configuration. But please, I don’t want to be an expert of your product implementation nor its installation. I don’t want to lose months to install you product. Do you know that you can &lt;em&gt;automate&lt;/em&gt; many things when you use &lt;em&gt;software&lt;/em&gt;? Do you know that now you can even package your solution to provide “one click” installation in some cloud services?&lt;/p&gt;

&lt;p&gt;When I use a public web API, you know what? I have an API to use. I would be glad if your product provide one. Having an API would definitely ease the job of making my motley collection of software work together.&lt;/p&gt;

&lt;p&gt;When I use a public web API, I have some decent and sometimes even pleasant documentation to understand how to use it on my own. I almost never have to talk to someone to get help. So, just stop to provide totally not user friendly, huge and useless documentation that you wouldn’t even use yourself. Stop selling support that you cannot afford. I have seen some product coming with a 300 pages PDF as documentation. Yes 300 pages. And that’s not the most fun, this document contained some code samples… some of them 20 pages long. Unreadable. Unusable.&lt;/p&gt;

&lt;p&gt;When I use a public web API, I sometimes can use it instinctively, because its design conforms to some common pratices. If your solution provides an API (which is a good thing), you would be wise to stick to these common practices. I do not want to have to learn you &lt;em&gt;very smart but very specific and totally different way of thinking&lt;/em&gt; to use your API.&lt;/p&gt;

&lt;p&gt;When I use a public web API, it may evolve. Such evolution may bring some breaking change. But I am warned and I have time to handle them. I can even use the old and new version at the same time. Some provider even support &lt;em&gt;all&lt;/em&gt; past versions seamlessly. I would love do the same thing with your software.&lt;/p&gt;

&lt;p&gt;Sincerely,
Your not future customer.&lt;/p&gt;

&lt;h1 id=&quot;theres-light-at-the-end-of-the-tunnel&quot;&gt;There’s light at the end of the tunnel&lt;/h1&gt;

&lt;p&gt;Is this situation hopeless? No.&lt;/p&gt;

&lt;p&gt;In an ideal world, I would get rid of all these &lt;em&gt;on premise shitty enterprise proprietary software&lt;/em&gt; and use only software as a service with API solutions (the brilliant ones, offering an outstanding experience, of course).
But we do not live in an ideal and simple world. If such solutions to your need exist, some obstables may prevent its use: regulations, security, sensitive data, performance, legacy systems…&lt;/p&gt;

&lt;p&gt;So beside this solution, the light at the end of the tunnel may come thanks to three things.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;First, as a software solutions designer myself, I now try to promote and create human centered solutions that are simple to build, deploy and operate by following what I’ve seen in the public web API space. I try to take into account &lt;em&gt;all&lt;/em&gt; users of such solutions from dev to end user and also ops.&lt;/li&gt;
  &lt;li&gt;Second, when I choose software solutions, I always provide constructive feedback in order to help vendors enhance their solutions whether I select or reject them.&lt;/li&gt;
  &lt;li&gt;Third, some vendors start to understand by themselves, like I did, that creating human centered solutions is worth the cost for both vendor and customer.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;but-is-this-really-new&quot;&gt;But is this really new?&lt;/h1&gt;

&lt;p&gt;Fundamentally, what we see in the public web APIs space is only what should be done with any software solution and even with any crafted thing since the beginning of all things.
Would you willingly buy a vegetable peeler that comes with a 200 pages user manual, needs 2 months for installation and is a total pain in the ass to use?
Definitely no.
Then why have we considered such experience totally normal with software for decades?
So, yes public web APIs raise the software bar, but only to the level it should have been since the beginning of time.&lt;/p&gt;</content><author><name>Arnaud Lauret</name></author><category term="posts" /><summary type="html">While answering some question on my Design of Web APIs book’s forum, I wrote: Now that I have seen brilliant Web APIs that can be used so easily because of their design but also the overall experience some can provide (the famous “DX”) I have become far more demanding and challenging with software in general Yes. Public web APIs definitely raise software bar. The whole software industry should take example on them …</summary></entry><entry><title type="html">The story behind The Design of Web APIs book</title><link href="https://apihandyman.io/the-story-behind-the-design-of-everyday-apis-book/" rel="alternate" type="text/html" title="The story behind The Design of Web APIs book" /><published>2018-02-10T00:00:00+00:00</published><updated>2018-02-10T00:00:00+00:00</updated><id>https://apihandyman.io/the-story-behind-the-design-of-everyday-apis-book</id><content type="html" xml:base="https://apihandyman.io/the-story-behind-the-design-of-everyday-apis-book/">&lt;p&gt;I’m thrilled to announce that I’m writing a book about API design: &lt;em&gt;The Design of Everyday APIs&lt;/em&gt; (edit: the book has been renamed &lt;em&gt;The Design of Web APIs&lt;/em&gt; since this post has been written). This book is published by &lt;em&gt;Manning Publications&lt;/em&gt; and the first two chapters are now available on the Manning Early Access Program or &lt;a href=&quot;http://bit.ly/designwebapis&quot;&gt;MEAP&lt;/a&gt; (affiliate link, use fcclauret discount code to get 37% off). This book is for everyone who wants to learn API design.
But, what’s the story behind this book about API design? To answer this question, let’s talk about my other passion: guitar. &lt;!--more--&gt;&lt;/p&gt;

&lt;div&gt;
      &lt;img src=&quot;/images/the-story-behind-the-design-of-everyday-apis-book/guitar-tabs.png&quot; /&gt;
      &lt;p class=&quot;img-label&quot;&gt;Guitar tabs&lt;/p&gt;
    &lt;/div&gt;

&lt;p&gt;I have been playing the guitar for quite a long time. I’m definitely not an outstanding guitar player, I do that just for fun. Even if I have basic knowledge of solfeggio, I mostly use tablatures (or tabs) to learn to play songs. The guitar strings are represented by lines. And numbers on the lines indicate where to put fingers on the fret board. Pretty simple. I can play any song. Well, as long as my fingers dexterity allows it. So, I can play almost any song without even kwnowing which musical note I’m doing. But it can take me a long time to master songs, because I mostly do not get immediately how it works. I cannot play a song without a tablature by just listening to it. I’m also unable to compose music, I’m unable to improvise. And if I want to play another musical instrument like the piano, I would have to relearn everything. All this because I simply (but with dexterity!) move my fingers on a guitar fretboard without really understanding what I’m doing and why. When you really know music, it’s quite different. A friend of mine is a music teacher. He knows everything about solfeggio and music theory. He can improvise and compose. He can play any musical instrument as long as he understand how doing notes.&lt;/p&gt;

&lt;p&gt;But what has this to do with API design?&lt;/p&gt;

&lt;div class=&quot;book-banner-big&quot;&gt;
  &lt;a href=&quot;http://bit.ly/designwebapis&quot;&gt;&lt;img src=&quot;/images/commons/book/book-vertical.png&quot; /&gt;&lt;/a&gt;
  &lt;p class=&quot;book-banner-vertical-bottom&quot;&gt;use fcclauret discount code to get 37% off (affiliate link)&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;I’ve been doing distributed software and working with web services and web APIs for a long time now, designing, building, using and providing them. Like many others, I’ve learned many things from the trenches about API design by practicing … and doing many mistakes. Mistakes, that I could have probably easily avoided if I had been warned. I have discovered the not so obvious scope of the API designer’s job and you know what? Choosing HTTP methods and designing URLs is only a part of it. I have also learned how to design APIs that do exactly what they have been created for. And I have also learned how to shape APIs in order to make them easy-to-understand and easy-to-use.&lt;/p&gt;

&lt;p&gt;But I have also learned something beyond these technical tips and tricks. I have learned what really is an API and what it means to design it.&lt;/p&gt;

&lt;p&gt;Knowing that &lt;code&gt;/library/books/the-design-of-everyday-apis/chapters&lt;/code&gt; is a good a way of designing some REST resource’s URL is important. Knowing that simply returning a &lt;code&gt;400 Bad Request&lt;/code&gt; HTTP status code is not enough is important. Knowing that content negociation is a solution to some use case is important. But knowing and understanding the true reasons &lt;em&gt;why&lt;/em&gt; we should or shouldn’t design API like this or that is far more important. This is guitar tablature vs solfeggio and music theory. Would you be able to improvise when facing a new use case? What would you do when designing a SOAP web services (yes, some people still have to do that), a gRPC API or whatever will come in the future?
I could have been a better API designer faster if I had understood earlier the true essence of API design. There are reasons why designing APIs in certain ways gives outstanding results. Understanding the reasons behind techniques and tips that make APIs great is far more important than just knowing them, because it can help to face any situation and design any type of API. Just like being able to play any musical instrument, improvise and compose.&lt;/p&gt;

&lt;div&gt;
      &lt;img src=&quot;/images/the-story-behind-the-design-of-everyday-apis-book/cryptic-interface.png&quot; /&gt;
      &lt;p class=&quot;img-label&quot;&gt;A quite cryptic interface&lt;/p&gt;
    &lt;/div&gt;

&lt;p&gt;But is it hard to master the &lt;em&gt;API design solfeggio&lt;/em&gt;? Hopefully not at all! The &lt;em&gt;API design solfeggio&lt;/em&gt; is quite simple to grasp as long as you understand what really is an API and how you can find inspiration from everyday objects.
OK, an API is an &lt;em&gt;Application Programming Interface&lt;/em&gt;, but it’s first and foremost an &lt;em&gt;interface&lt;/em&gt; that &lt;em&gt;people&lt;/em&gt; will use in their software to interact with your software.
APIs are interfaces like any others. Look at this &lt;em&gt;UDRC 1138&lt;/em&gt; control panel, its &lt;em&gt;interface&lt;/em&gt;. What could be this device’s purpose? How use it? hard to guess thanks to its poorly designed interface. Think about the many times you have been puzzled or you have grumbled when using a everyday object like a door, a microwave oven, a remote control, a toy, a web site, a mobile application because its design was flawed. Think about the many times you did not complain and were even quite happy using something. 
What seems ridiculous for everyday objects interfaces is as ridiculous for application programming interface. And the opposite is quite true, what works for everyday objects interfaces works for APIs.&lt;/p&gt;

&lt;p&gt;So, while &lt;em&gt;The Design of Everyday APIs&lt;/em&gt; (edit: the book has been renamed &lt;em&gt;The Design of Web APIs&lt;/em&gt; since this post has been written) book is a practical one showing every aspects of API design and many techniques, tips and tricks to design great APIs. It will also explain &lt;em&gt;why&lt;/em&gt; you should design APIs that way and therefore, I hope, give you the eye of the API designer.
I hope you’ll enjoy this book and find it useful to design your everyday APIs and build an API designer mindset. As you can read it on &lt;a href=&quot;http://bit.ly/designwebapis&quot;&gt;MEAP&lt;/a&gt; (affiliate link, use fcclauret discount code to get 37% off) while it is written, I look forward to your feedbacks on MEAP forum.&lt;/p&gt;</content><author><name>Arnaud Lauret</name></author><category term="posts" /><summary type="html">I’m thrilled to announce that I’m writing a book about API design: The Design of Everyday APIs (edit: the book has been renamed The Design of Web APIs since this post has been written). This book is published by Manning Publications and the first two chapters are now available on the Manning Early Access Program or MEAP (affiliate link, use fcclauret discount code to get 37% off). This book is for everyone who wants to learn API design. But, what’s the story behind this book about API design? To answer this question, let’s talk about my other passion: guitar.</summary></entry><entry><title type="html">API Styleguide, the Lord of API Designs</title><link href="https://apihandyman.io/api-styleguide-the-lord-of-api-designs/" rel="alternate" type="text/html" title="API Styleguide, the Lord of API Designs" /><published>2017-11-12T00:00:00+00:00</published><updated>2017-11-12T00:00:00+00:00</updated><id>https://apihandyman.io/api-styleguide-the-lord-of-api-designs</id><content type="html" xml:base="https://apihandyman.io/api-styleguide-the-lord-of-api-designs/">&lt;p&gt;Join Frodo, Gollum and Gandalf on an epic API design adventure.
In this session, based on my own experience defining and sharing API design common practices in my company and based on the API styles guides that I have collected on &lt;a href=&quot;http://apistylebook.com&quot;&gt;apistylebook.com&lt;/a&gt;, we will discover why we desperately need API style guides and how they can or cannot help us create a smooth API surface for a company.&lt;/p&gt;

&lt;p&gt;Very special thanks to &lt;a href=&quot;https://twitter.com/mrlapindesign&quot;&gt;Mister Lapin&lt;/a&gt; for designing my T-shirt and &lt;a href=&quot;https://twitter.com/kvantomme&quot;&gt;Kristof Van Tomme&lt;/a&gt; for recording the video with my phone.
&lt;!--more--&gt;&lt;/p&gt;

&lt;div class=&quot;embedpad&quot;&gt;&lt;div class=&quot;youtube embedded embed-responsive embed-responsive-16by9&quot;&gt;&lt;iframe width=&quot;740&quot; height=&quot;416&quot; src=&quot;//www.youtube.com/embed/ZUI5gHdhfwk?color=white&amp;amp;theme=light&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;embedpad&quot;&gt;&lt;div class=&quot;speackerdeck embedded embed-responsive embed-responsive-4by3&quot;&gt;&lt;script async=&quot;&quot; class=&quot;speakerdeck-embed&quot; data-id=&quot;e820736b440a47119e8f3ccb090a9e7e&quot; data-ratio=&quot;1.77777777777778&quot; src=&quot;//speakerdeck.com/assets/embed.js&quot;&gt;&lt;/script&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name>Arnaud Lauret</name></author><category term="talks" /><category term="API Strat" /><category term="API Days" /><category term="Conference" /><category term="Design" /><category term="API Stylebook" /><category term="Video" /><summary type="html">Join Frodo, Gollum and Gandalf on an epic API design adventure. In this session, based on my own experience defining and sharing API design common practices in my company and based on the API styles guides that I have collected on apistylebook.com, we will discover why we desperately need API style guides and how they can or cannot help us create a smooth API surface for a company. Very special thanks to Mister Lapin for designing my T-shirt and Kristof Van Tomme for recording the video with my phone.</summary></entry><entry><title type="html">…And GraphQL for all? talk video on InfoQ</title><link href="https://apihandyman.io/graphql-for-all-talk-video-on-infoq/" rel="alternate" type="text/html" title="...And GraphQL for all? talk video on InfoQ" /><published>2017-09-29T00:00:00+00:00</published><updated>2017-09-29T00:00:00+00:00</updated><id>https://apihandyman.io/graphql-for-all-video-on-infoq</id><content type="html" xml:base="https://apihandyman.io/graphql-for-all-talk-video-on-infoq/">&lt;p&gt;My talk &lt;em&gt;…And GraphQL for all? A few things to think about before blindly dumping REST for GraphQL&lt;/em&gt; which I gave at API Days Paris 2016 last December was recorded and the video is now available on &lt;a href=&quot;https://www.infoq.com/presentations/api-rest-graphql&quot;&gt;InfoQ&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;You can also read my write up &lt;a href=&quot;/and-graphql-for-all-a-few-things-to-think-about-before-blindly-dumping-rest-for-graphql/&quot;&gt;here on the blog&lt;/a&gt;.&lt;/p&gt;</content><author><name>Arnaud Lauret</name></author><category term="talks" /><category term="Design" /><summary type="html">My talk …And GraphQL for all? A few things to think about before blindly dumping REST for GraphQL which I gave at API Days Paris 2016 last December was recorded and the video is now available on InfoQ. You can also read my write up here on the blog.</summary></entry><entry><title type="html">Deliveroo API Design Guidelines added to the API Stylebook</title><link href="https://apihandyman.io/deliveroo-api-design-guidelines-added-to-the-api-stylebook/" rel="alternate" type="text/html" title="Deliveroo API Design Guidelines added to the API Stylebook" /><published>2017-04-25T00:00:00+00:00</published><updated>2017-04-25T00:00:00+00:00</updated><id>https://apihandyman.io/deliveroo-api-design-guidelines-added-to-the-api-stylebook</id><content type="html" xml:base="https://apihandyman.io/deliveroo-api-design-guidelines-added-to-the-api-stylebook/">&lt;p&gt;I’ve added the Deliveroo API Design Guidelines to the API Stylebook.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;These guidelines are definitely a MUST read for any API designer.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;To discover this API design guide and a short review, let’s go to the &lt;a href=&quot;http://apistylebook.com/blog/deliveroo-api-design-styleguide-added-on-the-api-stylebook&quot;&gt;API Stylebook blog&lt;/a&gt;.&lt;/p&gt;</content><author><name>Arnaud Lauret</name></author><category term="elsewhere" /><category term="Design" /><category term="API Stylebook" /><summary type="html">I’ve added the Deliveroo API Design Guidelines to the API Stylebook. These guidelines are definitely a MUST read for any API designer. To discover this API design guide and a short review, let’s go to the API Stylebook blog.</summary></entry><entry><title type="html">API Design Tips And Tricks - Getting, creating, updating or deleting multiple resources in one API call</title><link href="https://apihandyman.io/api-design-tips-and-tricks-getting-creating-updating-or-deleting-multiple-resources-in-one-api-call/" rel="alternate" type="text/html" title="API Design Tips And Tricks - Getting, creating, updating or deleting multiple resources in one API call" /><published>2017-04-22T00:00:00+00:00</published><updated>2017-04-22T00:00:00+00:00</updated><id>https://apihandyman.io/api-design-tips-and-tricks-getting-creating-updating-or-deleting-multiple-resources-in-one-api-call</id><content type="html" xml:base="https://apihandyman.io/api-design-tips-and-tricks-getting-creating-updating-or-deleting-multiple-resources-in-one-api-call/">&lt;p&gt;Getting, creating, updating or deleting multiple resources in a single API call is a common need in REST APIs. But how to achieve that in a consistent way accomodating how we work with a single resource and REST principles? This is what we’ll see in this post.&lt;!--more--&gt;&lt;/p&gt;

&lt;h1 id=&quot;working-with-a-single-resource&quot;&gt;Working with a single resource&lt;/h1&gt;

&lt;p&gt;Before talking about how to work with multiple resources all at once, let’s see how to handle a single resource with a REST API.&lt;/p&gt;

&lt;h2 id=&quot;creating-a-resource&quot;&gt;Creating a resource&lt;/h2&gt;
&lt;p&gt;The common way of creating a &lt;code&gt;resource&lt;/code&gt; is to do a &lt;code&gt;POST&lt;/code&gt; request on &lt;code&gt;/resources&lt;/code&gt;. The body of the request containing the resource to create.&lt;/p&gt;

&lt;div&gt;
  &lt;div class=&quot;code-toolbar&quot;&gt;
    &lt;div class=&quot;btn-group&quot; role=&quot;group&quot; aria-label=&quot;...&quot;&gt;
      
      &lt;button type=&quot;button&quot; class=&quot;btn btn-default btn-copy&quot;&gt;&lt;i class=&quot;fas fa-paste&quot;&gt;&lt;/i&gt;&lt;/button&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;pre class=&quot;language-txt&quot;&gt;&lt;code&gt;POST /resources HTTP/1.1

{
  &amp;quot;some&amp;quot;: &amp;quot;some data&amp;quot;,
  &amp;quot;other&amp;quot;: &amp;quot;some other data&amp;quot;
}&lt;/code&gt;&lt;/pre&gt;
  
&lt;/div&gt;

&lt;p&gt;If everything is OK and the resource created, the response’s status to this request will be a &lt;code&gt;201 Created&lt;/code&gt; and the response’s body will contain at least the ID (&lt;code&gt;id&lt;/code&gt;) or the URL/URI (&lt;code&gt;href&lt;/code&gt;) of the created resources. It may also contain the full resource itself.&lt;/p&gt;

&lt;div&gt;
  &lt;div class=&quot;code-toolbar&quot;&gt;
    &lt;div class=&quot;btn-group&quot; role=&quot;group&quot; aria-label=&quot;...&quot;&gt;
      
      &lt;button type=&quot;button&quot; class=&quot;btn btn-default btn-copy&quot;&gt;&lt;i class=&quot;fas fa-paste&quot;&gt;&lt;/i&gt;&lt;/button&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;pre class=&quot;language-txt&quot;&gt;&lt;code&gt;HTTP/1.1 201 Created

{
  &amp;quot;id&amp;quot;: &amp;quot;ID&amp;quot;,
  &amp;quot;href&amp;quot;: &amp;quot;/resources/ID&amp;quot;,
  &amp;quot;some&amp;quot;: &amp;quot;some data&amp;quot;,
  &amp;quot;other&amp;quot;: &amp;quot;some other data&amp;quot;
}&lt;/code&gt;&lt;/pre&gt;
  
&lt;/div&gt;

&lt;p&gt;If there’s something wrong, the response’s status will be an error, for example a &lt;code&gt;400 Bad Request&lt;/code&gt; because of some missing data and the response’s body will contain information about the error.&lt;/p&gt;

&lt;div&gt;
  &lt;div class=&quot;code-toolbar&quot;&gt;
    &lt;div class=&quot;btn-group&quot; role=&quot;group&quot; aria-label=&quot;...&quot;&gt;
      
      &lt;button type=&quot;button&quot; class=&quot;btn btn-default btn-copy&quot;&gt;&lt;i class=&quot;fas fa-paste&quot;&gt;&lt;/i&gt;&lt;/button&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;pre class=&quot;language-txt&quot;&gt;&lt;code&gt;HTTP/1.1 400 Bad Request

{
  &amp;quot;message&amp;quot;: &amp;quot;missing some data&amp;quot; 
}&lt;/code&gt;&lt;/pre&gt;
  
&lt;/div&gt;

&lt;h2 id=&quot;getting-a-resource&quot;&gt;Getting a resource&lt;/h2&gt;

&lt;p&gt;Once created a resource can be accessed with a &lt;code&gt;GET /resources/ID&lt;/code&gt; request. If everything is OK, the server will return a &lt;code&gt;200 Accepted&lt;/code&gt; and the resource. If there’s something wrong, it will return an error like &lt;code&gt;404 Not Found&lt;/code&gt; if the resource does not exist or a &lt;code&gt;403 Forbidden&lt;/code&gt; if the user is not allowed to access that resource.&lt;/p&gt;

&lt;h2 id=&quot;updating-a-resource&quot;&gt;Updating a resource&lt;/h2&gt;
&lt;p&gt;A &lt;code&gt;PATCH /resources/ID&lt;/code&gt; request will update partially a resource:&lt;/p&gt;

&lt;div&gt;
  &lt;div class=&quot;code-toolbar&quot;&gt;
    &lt;div class=&quot;btn-group&quot; role=&quot;group&quot; aria-label=&quot;...&quot;&gt;
      
      &lt;button type=&quot;button&quot; class=&quot;btn btn-default btn-copy&quot;&gt;&lt;i class=&quot;fas fa-paste&quot;&gt;&lt;/i&gt;&lt;/button&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;pre class=&quot;language-txt&quot;&gt;&lt;code&gt;PATCH /resources HTTP/1.1

{
  &amp;quot;other&amp;quot;: &amp;quot;modified data&amp;quot;
}&lt;/code&gt;&lt;/pre&gt;
  
&lt;/div&gt;

&lt;p&gt;If everything is OK, the server will return a OK status like &lt;code&gt;200 Accepted&lt;/code&gt;, and just like with the &lt;code&gt;POST&lt;/code&gt; request, the body may contain the updated resource.&lt;/p&gt;

&lt;div&gt;
  &lt;div class=&quot;code-toolbar&quot;&gt;
    &lt;div class=&quot;btn-group&quot; role=&quot;group&quot; aria-label=&quot;...&quot;&gt;
      
      &lt;button type=&quot;button&quot; class=&quot;btn btn-default btn-copy&quot;&gt;&lt;i class=&quot;fas fa-paste&quot;&gt;&lt;/i&gt;&lt;/button&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;pre class=&quot;language-txt&quot;&gt;&lt;code&gt;HTTP/1.1 200 Accepted

{
  &amp;quot;id&amp;quot;: &amp;quot;ID&amp;quot;,
  &amp;quot;href&amp;quot;: &amp;quot;/resources/ID&amp;quot;,
  &amp;quot;some&amp;quot;: &amp;quot;some data&amp;quot;,
  &amp;quot;other&amp;quot;: &amp;quot;modified data&amp;quot;
}&lt;/code&gt;&lt;/pre&gt;
  
&lt;/div&gt;

&lt;p&gt;If there’s a problem, the server will return an error. This error could be, for example, a &lt;code&gt;404 Not Found&lt;/code&gt; due to an invalid ID.&lt;/p&gt;

&lt;div&gt;
  &lt;div class=&quot;code-toolbar&quot;&gt;
    &lt;div class=&quot;btn-group&quot; role=&quot;group&quot; aria-label=&quot;...&quot;&gt;
      
      &lt;button type=&quot;button&quot; class=&quot;btn btn-default btn-copy&quot;&gt;&lt;i class=&quot;fas fa-paste&quot;&gt;&lt;/i&gt;&lt;/button&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;pre class=&quot;language-txt&quot;&gt;&lt;code&gt;HTTP/1.1 404 Not Found

{
  &amp;quot;message&amp;quot;: &amp;quot;Resource &amp;lt;ID&amp;gt; not found&amp;quot; 
}&lt;/code&gt;&lt;/pre&gt;
  
&lt;/div&gt;

&lt;h2 id=&quot;replacing-or-creating-a-resource&quot;&gt;Replacing or creating a resource&lt;/h2&gt;

&lt;p&gt;While a &lt;code&gt;PATCH /resources/ID&lt;/code&gt; updates partially a resource, a &lt;code&gt;PUT /resources/ID&lt;/code&gt; one will replace the resource. It may also create a new resource with the provided ID if it does not exist (and if it is allowed).&lt;/p&gt;

&lt;div&gt;
  &lt;div class=&quot;code-toolbar&quot;&gt;
    &lt;div class=&quot;btn-group&quot; role=&quot;group&quot; aria-label=&quot;...&quot;&gt;
      
      &lt;button type=&quot;button&quot; class=&quot;btn btn-default btn-copy&quot;&gt;&lt;i class=&quot;fas fa-paste&quot;&gt;&lt;/i&gt;&lt;/button&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;pre class=&quot;language-txt&quot;&gt;&lt;code&gt;PUT /resources/ID HTTP/1.1

{
  &amp;quot;some&amp;quot;: &amp;quot;some new data&amp;quot;,
  &amp;quot;other&amp;quot;: &amp;quot;some other new data&amp;quot;
}&lt;/code&gt;&lt;/pre&gt;
  
&lt;/div&gt;

&lt;p&gt;If everything is OK, the server will return a OK status. Depending on what happened the status may be, for example, a &lt;code&gt;200 Accepted&lt;/code&gt; for a replacement of an existing resource or a &lt;code&gt;201 Created&lt;/code&gt; when a resource has been created.&lt;/p&gt;

&lt;div&gt;
  &lt;div class=&quot;code-toolbar&quot;&gt;
    &lt;div class=&quot;btn-group&quot; role=&quot;group&quot; aria-label=&quot;...&quot;&gt;
      
      &lt;button type=&quot;button&quot; class=&quot;btn btn-default btn-copy&quot;&gt;&lt;i class=&quot;fas fa-paste&quot;&gt;&lt;/i&gt;&lt;/button&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;pre class=&quot;language-txt&quot;&gt;&lt;code&gt;HTTP/1.1 200 Accepted

{
  &amp;quot;id&amp;quot;: &amp;quot;ID&amp;quot;,
  &amp;quot;href&amp;quot;: &amp;quot;/resources/ID&amp;quot;,
  &amp;quot;some&amp;quot;: &amp;quot;some new data&amp;quot;,
  &amp;quot;other&amp;quot;: &amp;quot;some other new data&amp;quot;
}&lt;/code&gt;&lt;/pre&gt;
  
&lt;/div&gt;

&lt;h2 id=&quot;deleting-a-resource&quot;&gt;Deleting a resource&lt;/h2&gt;
&lt;p&gt;And finally, to delete a resource, the request is &lt;code&gt;DELETE /resources/ID&lt;/code&gt; without a body. If everything is OK, the server will return a &lt;code&gt;200 Accepted&lt;/code&gt;. If there’s something wrong, it will return an error like &lt;code&gt;404 Not Found&lt;/code&gt; if the resource does not exist or a &lt;code&gt;403 Forbidden&lt;/code&gt; if the user is not allowed to delete that resource.&lt;/p&gt;

&lt;h2 id=&quot;but-why-explaining-all-that-i-want-to-work-with-multiple-resources&quot;&gt;But why explaining all that? I want to work with multiple resources!&lt;/h2&gt;

&lt;p&gt;To work with multiple resources with a REST APIs, you definitely need to know how to work properly with a single one. This quick reminder is there to show how we use the HTTP protocol in REST APIs to express what we want to do and what happened in &lt;strong&gt;a clear and consistent way&lt;/strong&gt; when working with a single resource:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;the URI define which resource we are using&lt;/li&gt;
  &lt;li&gt;the HTTP method express what we want to do&lt;/li&gt;
  &lt;li&gt;the HTTP response status explain what happened&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now we’ll see how continue to do so when working with multiple resources.&lt;/p&gt;

&lt;h1 id=&quot;same-action-on-resources-of-the-same-type&quot;&gt;Same action on resources of the same type&lt;/h1&gt;

&lt;p&gt;So what if I want to &lt;code&gt;PATCH /resources/ID1&lt;/code&gt; and &lt;code&gt;PATCH /resources/ID2&lt;/code&gt; at the same time? When it comes to do one thing with multiple resources of the same type all at once:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;We send a request providing:
    &lt;ul&gt;
      &lt;li&gt;the &lt;strong&gt;type&lt;/strong&gt; of &lt;strong&gt;all&lt;/strong&gt; resources&lt;/li&gt;
      &lt;li&gt;the &lt;strong&gt;action&lt;/strong&gt; which will be applied to all these resources&lt;/li&gt;
      &lt;li&gt;the &lt;strong&gt;identified&lt;/strong&gt; data for &lt;strong&gt;all&lt;/strong&gt; resources&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;We expect &lt;strong&gt;a&lt;/strong&gt; response providing the result for &lt;strong&gt;each&lt;/strong&gt; resource containing exactly the same information as if we had made a single request&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;a-request-containing-multiple-resources&quot;&gt;A request containing multiple resources&lt;/h2&gt;

&lt;p&gt;To tell the resources type we’re working with, we will use the endpoint corresponding to a collection of resources, for example &lt;code&gt;/resources&lt;/code&gt; or &lt;code&gt;/users/bob/friends&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;To identify the action we want to apply on the resources we’ll simply use the matching HTTP verb:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;GET /resources&lt;/code&gt; to get multiple resources&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;POST /resources&lt;/code&gt; to create new resources&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;PATCH /resources&lt;/code&gt; to update multiple resources&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;PUT /resources&lt;/code&gt; to replace multiple resources&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;DELETE /resources&lt;/code&gt; to delete multiple resources&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;How to provide resources data and identifier will slightly vary depending on the action.&lt;/p&gt;

&lt;h3 id=&quot;create-multiple-resources&quot;&gt;Create multiple resources&lt;/h3&gt;

&lt;p&gt;To provide all needed information for a creation, we have to send an array of items containing a unique identifier determined by the consumer (&lt;code&gt;id&lt;/code&gt;) and the resource’s data (&lt;code&gt;body&lt;/code&gt;):&lt;/p&gt;

&lt;div&gt;
  &lt;div class=&quot;code-toolbar&quot;&gt;
    &lt;div class=&quot;btn-group&quot; role=&quot;group&quot; aria-label=&quot;...&quot;&gt;
      
      &lt;button type=&quot;button&quot; class=&quot;btn btn-default btn-copy&quot;&gt;&lt;i class=&quot;fas fa-paste&quot;&gt;&lt;/i&gt;&lt;/button&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;pre class=&quot;language-json&quot;&gt;&lt;code&gt;[
  {
    &amp;quot;id&amp;quot;: &amp;quot;CREATION1&amp;quot;,
    &amp;quot;body&amp;quot;: {&amp;quot;resource&amp;#39;s&amp;quot;: &amp;quot;data&amp;quot;}
  },
  {
    &amp;quot;id&amp;quot;: &amp;quot;CREATION2&amp;quot;,
    &amp;quot;body&amp;quot;: {&amp;quot;resource&amp;#39;s&amp;quot;: &amp;quot;data&amp;quot;}
  }
]&lt;/code&gt;&lt;/pre&gt;
  
&lt;/div&gt;

&lt;p&gt;It can also be done with a key/value map, the resource’s ID being the key and its data the value:&lt;/p&gt;

&lt;div&gt;
  &lt;div class=&quot;code-toolbar&quot;&gt;
    &lt;div class=&quot;btn-group&quot; role=&quot;group&quot; aria-label=&quot;...&quot;&gt;
      
      &lt;button type=&quot;button&quot; class=&quot;btn btn-default btn-copy&quot;&gt;&lt;i class=&quot;fas fa-paste&quot;&gt;&lt;/i&gt;&lt;/button&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;pre class=&quot;language-json&quot;&gt;&lt;code&gt;{
  &amp;quot;CREATION1&amp;quot; : {&amp;quot;resource&amp;#39;s&amp;quot;: &amp;quot;data&amp;quot;},
  &amp;quot;CREATION2&amp;quot; : {&amp;quot;resource&amp;#39;s&amp;quot;: &amp;quot;data&amp;quot;}
}&lt;/code&gt;&lt;/pre&gt;
  
&lt;/div&gt;

&lt;p&gt;Receiving these data with a &lt;code&gt;POST /resources&lt;/code&gt; request, the server will create the 2 resources provided. The provided &lt;code&gt;id&lt;/code&gt; will be used in the response to identify the response corresponding to this resource.&lt;/p&gt;

&lt;h3 id=&quot;update-or-replace-multiple-resources&quot;&gt;Update or replace multiple resources&lt;/h3&gt;
&lt;p&gt;To update or replace multiple resources, it’s exactly the same thing, besides the value of the resource’s id, which will be the one we would have use for a single resource (&lt;code&gt;/resources/ID&lt;/code&gt;).&lt;/p&gt;

&lt;div&gt;
  &lt;div class=&quot;code-toolbar&quot;&gt;
    &lt;div class=&quot;btn-group&quot; role=&quot;group&quot; aria-label=&quot;...&quot;&gt;
      
      &lt;button type=&quot;button&quot; class=&quot;btn btn-default btn-copy&quot;&gt;&lt;i class=&quot;fas fa-paste&quot;&gt;&lt;/i&gt;&lt;/button&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;pre class=&quot;language-json&quot;&gt;&lt;code&gt;{
  &amp;quot;ID1&amp;quot; : {&amp;quot;resource&amp;#39;s&amp;quot;: &amp;quot;data&amp;quot;},
  &amp;quot;ID2&amp;quot; : {&amp;quot;resource&amp;#39;s&amp;quot;: &amp;quot;data&amp;quot;}
}&lt;/code&gt;&lt;/pre&gt;
  
&lt;/div&gt;

&lt;p&gt;Receiving these data with a &lt;code&gt;PATCH /resources&lt;/code&gt; request, the server will execute both &lt;code&gt;PATCH /resources/ID1&lt;/code&gt; and &lt;code&gt;PATCH /resources/ID2&lt;/code&gt; (it works the same with &lt;code&gt;PUT&lt;/code&gt;). Just like with &lt;code&gt;POST&lt;/code&gt;, the provided ids will be used to identify each response.&lt;/p&gt;

&lt;h3 id=&quot;get-or-delete-multiple-resources&quot;&gt;Get or delete multiple resources&lt;/h3&gt;
&lt;p&gt;To get or delete multiple resources we will again use the resources ids but as a &lt;code&gt;GET&lt;/code&gt; or &lt;code&gt;DELETE&lt;/code&gt; request does not have a body, they will be provided in a query parameter like this &lt;code&gt;DELETE /resources?ids=ID1,ID2&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&quot;a-response-containing-responses&quot;&gt;A response containing responses&lt;/h2&gt;

&lt;p&gt;A response to such a request will have to contain exactly the same data we would have had doing single calls. We need to provide a response containing multiple responses, how can we do that?&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;One Status Code to bring them all and in the lightness bind them&lt;br /&gt;
&lt;em&gt;The Lord of the HTTP Status Codes&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The 207 HTTP status code is exactly what we’re looking for:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;The 207 (Multi-Status) status code provides status for multiple independent operations&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This status has been defined by &lt;a href=&quot;https://tools.ietf.org/html/rfc4918#section-11.1&quot;&gt;RFC 4918&lt;/a&gt; &lt;em&gt;HTTP Extensions for Web Distributed Authoring and Versioning (WebDAV)&lt;/em&gt;. Here’s an example of a WebDAV 207 response when deleting some resources:&lt;/p&gt;

&lt;div&gt;
  &lt;div class=&quot;code-toolbar&quot;&gt;
    &lt;div class=&quot;btn-group&quot; role=&quot;group&quot; aria-label=&quot;...&quot;&gt;
      
      &lt;button type=&quot;button&quot; class=&quot;btn btn-default btn-copy&quot;&gt;&lt;i class=&quot;fas fa-paste&quot;&gt;&lt;/i&gt;&lt;/button&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;pre class=&quot;language-xml&quot;&gt;&lt;code&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;utf-8&amp;quot; ?&amp;gt;
&amp;lt;d:multistatus xmlns:d=&amp;quot;DAV:&amp;quot;&amp;gt;
  &amp;lt;d:response&amp;gt;
    &amp;lt;d:href&amp;gt;http://www.example.com/container/resource3&amp;lt;/d:href&amp;gt;
    &amp;lt;d:status&amp;gt;HTTP/1.1 423 Locked&amp;lt;/d:status&amp;gt;
    &amp;lt;d:error&amp;gt;&amp;lt;d:lock-token-submitted/&amp;gt;&amp;lt;/d:error&amp;gt;
  &amp;lt;/d:response&amp;gt;
  &amp;lt;d:response&amp;gt;
    &amp;lt;d:href&amp;gt;http://www.example.com/container/resource4&amp;lt;/d:href&amp;gt;
    &amp;lt;d:status&amp;gt;HTTP/1.1 200 OK&amp;lt;/d:status&amp;gt;
  &amp;lt;/d:response&amp;gt;
&amp;lt;/d:multistatus&amp;gt;&lt;/code&gt;&lt;/pre&gt;
  
&lt;/div&gt;

&lt;div&gt;
      &lt;a href=&quot;&quot;&gt;&lt;img src=&quot;/images/api-design-tips-and-tricks-getting-creating-updating-or-deleting-multiple-resources-in-one-api-call/whatthehellisthat.gif&quot; /&gt;&lt;/a&gt;
      
    &lt;/div&gt;

&lt;p&gt;Oops, sorry for the XML, it’s only to show that a WebDAV &lt;em&gt;207&lt;/em&gt; response contains a list of response. Each of this response point to a resource (href) and contains also the response itself, how could it look in a less frightening JSON way:&lt;/p&gt;

&lt;div&gt;
  &lt;div class=&quot;code-toolbar&quot;&gt;
    &lt;div class=&quot;btn-group&quot; role=&quot;group&quot; aria-label=&quot;...&quot;&gt;
      
      &lt;button type=&quot;button&quot; class=&quot;btn btn-default btn-copy&quot;&gt;&lt;i class=&quot;fas fa-paste&quot;&gt;&lt;/i&gt;&lt;/button&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;pre class=&quot;language-json&quot;&gt;&lt;code&gt;[
  {
    &amp;quot;id&amp;quot;: &amp;quot;ID1&amp;quot;,
    &amp;quot;status&amp;quot;: &amp;quot;201&amp;quot;,
    &amp;quot;headers&amp;quot;: [
      {&amp;quot;header&amp;#39;s name&amp;quot;: &amp;quot;header&amp;#39;s value&amp;quot;}
    ],
    &amp;quot;body&amp;quot;: { &amp;quot;the&amp;quot;: &amp;quot;response&amp;#39;s body&amp;quot;}
  },
  {
    &amp;quot;id&amp;quot;: &amp;quot;ID2&amp;quot;,
    &amp;quot;status&amp;quot;: &amp;quot;400&amp;quot;,
    &amp;quot;headers&amp;quot;: [
      {&amp;quot;header&amp;#39;s name&amp;quot;: &amp;quot;header&amp;#39;s value&amp;quot;}
    ],
    &amp;quot;body&amp;quot;: { &amp;quot;the&amp;quot;: &amp;quot;response&amp;#39;s body&amp;quot;}
  }
]&lt;/code&gt;&lt;/pre&gt;
  
&lt;/div&gt;

&lt;p&gt;A 207 will response will contain a list of responses, each response containing:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;An identifier (&lt;code&gt;id&lt;/code&gt;) matching the one provided in the request&lt;/li&gt;
  &lt;li&gt;The HTTP response’s data composed of a &lt;code&gt;status&lt;/code&gt;, &lt;code&gt;headers&lt;/code&gt; and a &lt;code&gt;body&lt;/code&gt;. These data are exactly the same we would have received for a single call.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Note that we can also use a map in which the keys are the responses identifiers:&lt;/p&gt;

&lt;div&gt;
  &lt;div class=&quot;code-toolbar&quot;&gt;
    &lt;div class=&quot;btn-group&quot; role=&quot;group&quot; aria-label=&quot;...&quot;&gt;
      
      &lt;button type=&quot;button&quot; class=&quot;btn btn-default btn-copy&quot;&gt;&lt;i class=&quot;fas fa-paste&quot;&gt;&lt;/i&gt;&lt;/button&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;pre class=&quot;language-json&quot;&gt;&lt;code&gt;{
  &amp;quot;ID1&amp;quot;: {
    &amp;quot;status&amp;quot;: &amp;quot;201&amp;quot;,
    &amp;quot;headers&amp;quot;: [
      {&amp;quot;header&amp;#39;s name&amp;quot;: &amp;quot;header&amp;#39;s value&amp;quot;}
    ],
    &amp;quot;body&amp;quot;: { &amp;quot;the&amp;quot;: &amp;quot;response&amp;#39;s body&amp;quot;}
  },
  &amp;quot;ID2&amp;quot;: {
    &amp;quot;status&amp;quot;: &amp;quot;400&amp;quot;,
    &amp;quot;headers&amp;quot;: [
      {&amp;quot;header&amp;#39;s name&amp;quot;: &amp;quot;header&amp;#39;s value&amp;quot;}
    ],
    &amp;quot;body&amp;quot;: { &amp;quot;the&amp;quot;: &amp;quot;response&amp;#39;s body&amp;quot;}
  }
}&lt;/code&gt;&lt;/pre&gt;
  
&lt;/div&gt;

&lt;p&gt;We could even match request and response based on position in the list.&lt;/p&gt;

&lt;h2 id=&quot;two-levels-of-error&quot;&gt;Two levels of error&lt;/h2&gt;

&lt;p&gt;In that case, we must be aware that there are two types of errors, the one concerning one or more of the resources and the one concerning the &lt;em&gt;multiple&lt;/em&gt; request itself.&lt;/p&gt;

&lt;p&gt;For errors concerning the action on each resource), the HTTP status returned by the server will be a 207 and each sub-response will contains the status for each sub-request (as explained in previous paragraph).&lt;/p&gt;

&lt;p&gt;For errors concerning the main request (misspelled query parameter for DELETE, or invalid body map/list structure for example), the server may return a &lt;em&gt;400 Bad Request&lt;/em&gt; for example.&lt;/p&gt;

&lt;h2 id=&quot;single-and-multiple-creations-with-the-same-endpoint&quot;&gt;Single and multiple creations with the same endpoint&lt;/h2&gt;

&lt;p&gt;Note that &lt;code&gt;POST /resources&lt;/code&gt; was supposed to be used to create a single resource. If we want to handle the single/multiple duality we have two options:&lt;/p&gt;

&lt;h3 id=&quot;use-a-listmap-for-both-case&quot;&gt;Use a list/map for both case&lt;/h3&gt;

&lt;p&gt;The input is exactly the same for 1 or more resources, we will only provide a single one item to create a single resource.&lt;/p&gt;

&lt;div&gt;
  &lt;div class=&quot;code-toolbar&quot;&gt;
    &lt;div class=&quot;btn-group&quot; role=&quot;group&quot; aria-label=&quot;...&quot;&gt;
      
      &lt;button type=&quot;button&quot; class=&quot;btn btn-default btn-copy&quot;&gt;&lt;i class=&quot;fas fa-paste&quot;&gt;&lt;/i&gt;&lt;/button&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;pre class=&quot;language-json&quot;&gt;&lt;code&gt;{
  &amp;quot;CREATION1&amp;quot; : {&amp;quot;resource&amp;#39;s&amp;quot;: &amp;quot;data&amp;quot;}
}&lt;/code&gt;&lt;/pre&gt;
  
&lt;/div&gt;

&lt;p&gt;The server’s response should be always be the one described earlier for multiple creations even if there’s only a single item.&lt;/p&gt;

&lt;h3 id=&quot;accept-both-a-listmap-and-single-object&quot;&gt;Accept both a list/map and single object&lt;/h3&gt;

&lt;p&gt;The input for a single resource contains only the resource’s data:&lt;/p&gt;

&lt;div&gt;
  &lt;div class=&quot;code-toolbar&quot;&gt;
    &lt;div class=&quot;btn-group&quot; role=&quot;group&quot; aria-label=&quot;...&quot;&gt;
      
      &lt;button type=&quot;button&quot; class=&quot;btn btn-default btn-copy&quot;&gt;&lt;i class=&quot;fas fa-paste&quot;&gt;&lt;/i&gt;&lt;/button&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;pre class=&quot;language-json&quot;&gt;&lt;code&gt;{&amp;quot;resource&amp;#39;s&amp;quot;: &amp;quot;data&amp;quot;}&lt;/code&gt;&lt;/pre&gt;
  
&lt;/div&gt;

&lt;p&gt;The server response will be the one expected for a single creation.&lt;/p&gt;

&lt;p&gt;The input for multiple resource contains a list/map:&lt;/p&gt;

&lt;div&gt;
  &lt;div class=&quot;code-toolbar&quot;&gt;
    &lt;div class=&quot;btn-group&quot; role=&quot;group&quot; aria-label=&quot;...&quot;&gt;
      
      &lt;button type=&quot;button&quot; class=&quot;btn btn-default btn-copy&quot;&gt;&lt;i class=&quot;fas fa-paste&quot;&gt;&lt;/i&gt;&lt;/button&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;pre class=&quot;language-json&quot;&gt;&lt;code&gt;{
  &amp;quot;CREATION1&amp;quot; : {&amp;quot;resource&amp;#39;s&amp;quot;: &amp;quot;data&amp;quot;}
  &amp;quot;CREATION2&amp;quot; : {&amp;quot;resource&amp;#39;s&amp;quot;: &amp;quot;data&amp;quot;}
}&lt;/code&gt;&lt;/pre&gt;
  
&lt;/div&gt;

&lt;p&gt;The server response will be the one expected for a multiple creations as seen earlier.&lt;/p&gt;

&lt;h1 id=&quot;different-actions-on-resources-of-the-same-type&quot;&gt;Different actions on resources of the same type&lt;/h1&gt;
&lt;p&gt;What if we want to &lt;code&gt;DELETE /resources/ID1&lt;/code&gt; and &lt;code&gt;PATCH /resources/ID2&lt;/code&gt; at the same time? As it is an action that impacts the data in various way we should use the &lt;code&gt;POST&lt;/code&gt; HTTP verb. Concerning the URI, we have two options, use &lt;code&gt;/resources&lt;/code&gt; or create a specific resources for this use case like &lt;code&gt;/resource-modifications&lt;/code&gt; for example. The request will be then something like &lt;code&gt;POST /resources&lt;/code&gt; or &lt;code&gt;POST /resource-modifications&lt;/code&gt; and we will have to provide the action (&lt;code&gt;method&lt;/code&gt;) for each resource:&lt;/p&gt;

&lt;div&gt;
  &lt;div class=&quot;code-toolbar&quot;&gt;
    &lt;div class=&quot;btn-group&quot; role=&quot;group&quot; aria-label=&quot;...&quot;&gt;
      
      &lt;button type=&quot;button&quot; class=&quot;btn btn-default btn-copy&quot;&gt;&lt;i class=&quot;fas fa-paste&quot;&gt;&lt;/i&gt;&lt;/button&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;pre class=&quot;language-json&quot;&gt;&lt;code&gt;[
  {
    &amp;quot;id&amp;quot;: &amp;quot;ID1&amp;quot;,
    &amp;quot;method&amp;quot;: &amp;quot;DELETE&amp;quot;
  },
  {
    &amp;quot;id&amp;quot;: &amp;quot;ID2&amp;quot;,
    &amp;quot;method&amp;quot;: &amp;quot;PATCH&amp;quot;,
    &amp;quot;body&amp;quot;: {&amp;quot;resource&amp;#39;s&amp;quot;: &amp;quot;data&amp;quot;}
  }
]&lt;/code&gt;&lt;/pre&gt;
  
&lt;/div&gt;

&lt;p&gt;The server will do &lt;code&gt;DELETE /resources/ID1&lt;/code&gt; and &lt;code&gt;PATCH /resources/ID2&lt;/code&gt; and the response will be a &lt;em&gt;207&lt;/em&gt; using the structure using the provided &lt;code&gt;id&lt;/code&gt; as seen previously in his post.&lt;/p&gt;

&lt;h1 id=&quot;different-actions-on-resources-of-different-types&quot;&gt;Different actions on resources of different types&lt;/h1&gt;
&lt;p&gt;What if I want to do &lt;code&gt;DELETE /resources/ID1&lt;/code&gt; and &lt;code&gt;PATCH /another-resources/ID2&lt;/code&gt; at the same time?&lt;/p&gt;

&lt;div&gt;
      &lt;a href=&quot;&quot;&gt;&lt;img src=&quot;/images/api-design-tips-and-tricks-getting-creating-updating-or-deleting-multiple-resources-in-one-api-call/waitwhat.gif&quot; /&gt;&lt;/a&gt;
      
    &lt;/div&gt;

&lt;p&gt;This is really nasty and definitely not REST, but it can be useful for &lt;a href=&quot;https://www.infoq.com/articles/api-facades&quot;&gt;backend for frontend or experience API&lt;/a&gt; for example.&lt;/p&gt;

&lt;p&gt;To do that we’ll need to &lt;code&gt;POST&lt;/code&gt; data on a specific endpoint which could something like &lt;code&gt;/batch&lt;/code&gt;, &lt;code&gt;/bulk&lt;/code&gt; or even &lt;code&gt;/&lt;/code&gt; and we will have to add a &lt;code&gt;uri&lt;/code&gt; and replace the &lt;code&gt;id&lt;/code&gt; value by something provided by the consumer:&lt;/p&gt;

&lt;div&gt;
  &lt;div class=&quot;code-toolbar&quot;&gt;
    &lt;div class=&quot;btn-group&quot; role=&quot;group&quot; aria-label=&quot;...&quot;&gt;
      
      &lt;button type=&quot;button&quot; class=&quot;btn btn-default btn-copy&quot;&gt;&lt;i class=&quot;fas fa-paste&quot;&gt;&lt;/i&gt;&lt;/button&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;pre class=&quot;language-json&quot;&gt;&lt;code&gt;[
  {
    &amp;quot;id&amp;quot;: &amp;quot;ACTION1&amp;quot;,
    &amp;quot;uri&amp;quot;: &amp;quot;/resources/ID1&amp;quot;,
    &amp;quot;method&amp;quot;: &amp;quot;DELETE&amp;quot;
  },
  {
    &amp;quot;id&amp;quot;: &amp;quot;ACTION2&amp;quot;,
    &amp;quot;uri&amp;quot;: &amp;quot;/another-resources/ID2&amp;quot;,
    &amp;quot;method&amp;quot;: &amp;quot;PATCH&amp;quot;,
    &amp;quot;body&amp;quot;: {&amp;quot;resource&amp;#39;s&amp;quot;: &amp;quot;data&amp;quot;}
  }
  ,
  {
    &amp;quot;id&amp;quot;: &amp;quot;ACTION3&amp;quot;,
    &amp;quot;uri&amp;quot;: &amp;quot;/resources&amp;quot;,
    &amp;quot;method&amp;quot;: &amp;quot;POST&amp;quot;,
    &amp;quot;body&amp;quot;: {&amp;quot;resource&amp;#39;s&amp;quot;: &amp;quot;data&amp;quot;}
  }
]&lt;/code&gt;&lt;/pre&gt;
  
&lt;/div&gt;

&lt;p&gt;Actions number 1 is &lt;code&gt;DELETE /resources/ID1&lt;/code&gt; and its result will be identified in the 207 response by the id &lt;code&gt;ACTION1&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;To see a complete example you should take a look at &lt;a href=&quot;https://developers.facebook.com/docs/graph-api/making-multiple-requests&quot;&gt;Facebook’s Graph API batch endpoint&lt;/a&gt; documentation. Note that this batch endpoint match request/response based on index and does far more than just processing a bunch of request.&lt;/p&gt;</content><author><name>Arnaud Lauret</name></author><category term="posts" /><category term="API Design Tips And Tricks" /><summary type="html">Getting, creating, updating or deleting multiple resources in a single API call is a common need in REST APIs. But how to achieve that in a consistent way accomodating how we work with a single resource and REST principles? This is what we’ll see in this post.</summary></entry></feed>