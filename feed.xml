<?xml version="1.0" encoding="utf-8"?><?xml-stylesheet type="text/xml" href="https://apihandyman.io/feed.xslt.xml"?><feed xmlns="http://www.w3.org/2005/Atom"><generator uri="http://jekyllrb.com" version="3.3.1">Jekyll</generator><link href="https://apihandyman.io/feed.xml" rel="self" type="application/atom+xml" /><link href="https://apihandyman.io/" rel="alternate" type="text/html" /><updated>2018-01-25T17:53:01+00:00</updated><id>https://apihandyman.io//</id><title type="html">API Handyman</title><subtitle>{&quot;input&quot; : &quot;learn&quot;, &quot;output&quot; : &quot;share&quot;}</subtitle><entry><title type="html">API Styleguide, the Lord of API Designs</title><link href="https://apihandyman.io/api-styleguide-the-lord-of-api-designs/" rel="alternate" type="text/html" title="API Styleguide, the Lord of API Designs" /><published>2017-11-12T00:00:00+00:00</published><updated>2017-11-12T00:00:00+00:00</updated><id>https://apihandyman.io/api-styleguide-the-lord-of-api-designs</id><content type="html" xml:base="https://apihandyman.io/api-styleguide-the-lord-of-api-designs/">&lt;p&gt;Join Frodo, Gollum and Gandalf on an epic API design adventure.
In this session, based on my own experience defining and sharing API design common practices in my company and based on the API styles guides that I have collected on &lt;a href=&quot;http://apistylebook.com&quot;&gt;apistylebook.com&lt;/a&gt;, we will discover why we desperately need API style guides and how they can or cannot help us create a smooth API surface for a company.&lt;/p&gt;

&lt;p&gt;Very special thanks to &lt;a href=&quot;https://twitter.com/mrlapindesign&quot;&gt;Mister Lapin&lt;/a&gt; for designing my T-shirt and &lt;a href=&quot;https://twitter.com/kvantomme&quot;&gt;Kristof Van Tomme&lt;/a&gt; for recording the video with my phone.
&lt;!--more--&gt;&lt;/p&gt;

&lt;div class=&quot;embedpad&quot;&gt;&lt;div class=&quot;youtube embedded embed-responsive embed-responsive-16by9&quot;&gt;&lt;iframe width=&quot;740&quot; height=&quot;416&quot; src=&quot;//www.youtube.com/embed/ZUI5gHdhfwk?color=white&amp;amp;theme=light&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;embedpad&quot;&gt;&lt;div class=&quot;speackerdeck embedded embed-responsive embed-responsive-4by3&quot;&gt;&lt;script async=&quot;&quot; class=&quot;speakerdeck-embed&quot; data-id=&quot;e820736b440a47119e8f3ccb090a9e7e&quot; data-ratio=&quot;1.77777777777778&quot; src=&quot;//speakerdeck.com/assets/embed.js&quot;&gt;&lt;/script&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name>Arnaud Lauret</name></author><category term="talks" /><category term="API Strat" /><category term="API Days" /><category term="Conference" /><category term="Design" /><category term="API Stylebook" /><category term="Video" /><summary type="html">Join Frodo, Gollum and Gandalf on an epic API design adventure.
In this session, based on my own experience defining and sharing API design common practices in my company and based on the API styles guides that I have collected on apistylebook.com, we will discover why we desperately need API style guides and how they can or cannot help us create a smooth API surface for a company.

Very special thanks to Mister Lapin for designing my T-shirt and Kristof Van Tomme for recording the video with my phone.</summary></entry><entry><title type="html">…And GraphQL for all? talk video on InfoQ</title><link href="https://apihandyman.io/graphql-for-all-talk-video-on-infoq/" rel="alternate" type="text/html" title="...And GraphQL for all? talk video on InfoQ" /><published>2017-09-29T00:00:00+00:00</published><updated>2017-09-29T00:00:00+00:00</updated><id>https://apihandyman.io/graphql-for-all-video-on-infoq</id><content type="html" xml:base="https://apihandyman.io/graphql-for-all-talk-video-on-infoq/">&lt;p&gt;My talk &lt;em&gt;…And GraphQL for all? A few things to think about before blindly dumping REST for GraphQL&lt;/em&gt; which I gave at API Days Paris 2016 last December was recorded and the video is now available on &lt;a href=&quot;https://www.infoq.com/presentations/api-rest-graphql&quot;&gt;InfoQ&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;You can also read my write up &lt;a href=&quot;/and-graphql-for-all-a-few-things-to-think-about-before-blindly-dumping-rest-for-graphql/&quot;&gt;here on the blog&lt;/a&gt;.&lt;/p&gt;</content><author><name>Arnaud Lauret</name></author><category term="talks" /><category term="Design" /><summary type="html">My talk …And GraphQL for all? A few things to think about before blindly dumping REST for GraphQL which I gave at API Days Paris 2016 last December was recorded and the video is now available on InfoQ.

You can also read my write up here on the blog.</summary></entry><entry><title type="html">Deliveroo API Design Guidelines added to the API Stylebook</title><link href="https://apihandyman.io/deliveroo-api-design-guidelines-added-to-the-api-stylebook/" rel="alternate" type="text/html" title="Deliveroo API Design Guidelines added to the API Stylebook" /><published>2017-04-25T00:00:00+00:00</published><updated>2017-04-25T00:00:00+00:00</updated><id>https://apihandyman.io/deliveroo-api-design-guidelines-added-to-the-api-stylebook</id><content type="html" xml:base="https://apihandyman.io/deliveroo-api-design-guidelines-added-to-the-api-stylebook/">&lt;p&gt;I’ve added the Deliveroo API Design Guidelines to the API Stylebook.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;These guidelines are definitely a MUST read for any API designer.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;To discover this API design guide and a short review, let’s go to the &lt;a href=&quot;http://apistylebook.com/blog/deliveroo-api-design-styleguide-added-on-the-api-stylebook&quot;&gt;API Stylebook blog&lt;/a&gt;.&lt;/p&gt;</content><author><name>Arnaud Lauret</name></author><category term="elsewhere" /><category term="Design" /><category term="API Stylebook" /><summary type="html">I’ve added the Deliveroo API Design Guidelines to the API Stylebook.


  These guidelines are definitely a MUST read for any API designer.


To discover this API design guide and a short review, let’s go to the API Stylebook blog.</summary></entry><entry><title type="html">API Design Tips And Tricks - Getting, creating, updating or deleting multiple resources in one API call</title><link href="https://apihandyman.io/api-design-tips-and-tricks-getting-creating-updating-or-deleting-multiple-resources-in-one-api-call/" rel="alternate" type="text/html" title="API Design Tips And Tricks - Getting, creating, updating or deleting multiple resources in one API call" /><published>2017-04-22T00:00:00+00:00</published><updated>2017-04-22T00:00:00+00:00</updated><id>https://apihandyman.io/api-design-tips-and-tricks-getting-creating-updating-or-deleting-multiple-resources-in-one-api-call</id><content type="html" xml:base="https://apihandyman.io/api-design-tips-and-tricks-getting-creating-updating-or-deleting-multiple-resources-in-one-api-call/">&lt;p&gt;Getting, creating, updating or deleting multiple resources in a single API call is a common need in REST APIs. But how to achieve that in a consistent way accomodating how we work with a single resource and REST principles? This is what we’ll see in this post.&lt;!--more--&gt;&lt;/p&gt;

&lt;h1 id=&quot;working-with-a-single-resource&quot;&gt;Working with a single resource&lt;/h1&gt;

&lt;p&gt;Before talking about how to work with multiple resources all at once, let’s see how to handle a single resource with a REST API.&lt;/p&gt;

&lt;h2 id=&quot;creating-a-resource&quot;&gt;Creating a resource&lt;/h2&gt;
&lt;p&gt;The common way of creating a &lt;code&gt;resource&lt;/code&gt; is to do a &lt;code&gt;POST&lt;/code&gt; request on &lt;code&gt;/resources&lt;/code&gt;. The body of the request containing the resource to create.&lt;/p&gt;

&lt;div&gt;
  &lt;div class=&quot;code-toolbar&quot;&gt;
    &lt;div class=&quot;btn-group&quot; role=&quot;group&quot; aria-label=&quot;...&quot;&gt;
      
      &lt;button type=&quot;button&quot; class=&quot;btn btn-default btn-copy&quot;&gt;&lt;i class=&quot;fa fa-clipboard&quot; aria-hidden=&quot;true&quot;&gt;&lt;/i&gt;&lt;/button&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;pre class=&quot;language-txt&quot;&gt;&lt;code&gt;POST /resources HTTP/1.1

{
  &amp;quot;some&amp;quot;: &amp;quot;some data&amp;quot;,
  &amp;quot;other&amp;quot;: &amp;quot;some other data&amp;quot;
}&lt;/code&gt;&lt;/pre&gt;
  
&lt;/div&gt;

&lt;p&gt;If everything is OK and the resource created, the response’s status to this request will be a &lt;code&gt;201 Created&lt;/code&gt; and the response’s body will contain at least the ID (&lt;code&gt;id&lt;/code&gt;) or the URL/URI (&lt;code&gt;href&lt;/code&gt;) of the created resources. It may also contain the full resource itself.&lt;/p&gt;

&lt;div&gt;
  &lt;div class=&quot;code-toolbar&quot;&gt;
    &lt;div class=&quot;btn-group&quot; role=&quot;group&quot; aria-label=&quot;...&quot;&gt;
      
      &lt;button type=&quot;button&quot; class=&quot;btn btn-default btn-copy&quot;&gt;&lt;i class=&quot;fa fa-clipboard&quot; aria-hidden=&quot;true&quot;&gt;&lt;/i&gt;&lt;/button&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;pre class=&quot;language-txt&quot;&gt;&lt;code&gt;HTTP/1.1 201 Created

{
  &amp;quot;id&amp;quot;: &amp;quot;ID&amp;quot;,
  &amp;quot;href&amp;quot;: &amp;quot;/resources/ID&amp;quot;,
  &amp;quot;some&amp;quot;: &amp;quot;some data&amp;quot;,
  &amp;quot;other&amp;quot;: &amp;quot;some other data&amp;quot;
}&lt;/code&gt;&lt;/pre&gt;
  
&lt;/div&gt;

&lt;p&gt;If there’s something wrong, the response’s status will be an error, for example a &lt;code&gt;400 Bad Request&lt;/code&gt; because of some missing data and the response’s body will contain information about the error.&lt;/p&gt;

&lt;div&gt;
  &lt;div class=&quot;code-toolbar&quot;&gt;
    &lt;div class=&quot;btn-group&quot; role=&quot;group&quot; aria-label=&quot;...&quot;&gt;
      
      &lt;button type=&quot;button&quot; class=&quot;btn btn-default btn-copy&quot;&gt;&lt;i class=&quot;fa fa-clipboard&quot; aria-hidden=&quot;true&quot;&gt;&lt;/i&gt;&lt;/button&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;pre class=&quot;language-txt&quot;&gt;&lt;code&gt;HTTP/1.1 400 Bad Request

{
  &amp;quot;message&amp;quot;: &amp;quot;missing some data&amp;quot; 
}&lt;/code&gt;&lt;/pre&gt;
  
&lt;/div&gt;

&lt;h2 id=&quot;getting-a-resource&quot;&gt;Getting a resource&lt;/h2&gt;

&lt;p&gt;Once created a resource can be accessed with a &lt;code&gt;GET /resources/ID&lt;/code&gt; request. If everything is OK, the server will return a &lt;code&gt;200 Accepted&lt;/code&gt; and the resource. If there’s something wrong, it will return an error like &lt;code&gt;404 Not Found&lt;/code&gt; if the resource does not exist or a &lt;code&gt;403 Forbidden&lt;/code&gt; if the user is not allowed to access that resource.&lt;/p&gt;

&lt;h2 id=&quot;updating-a-resource&quot;&gt;Updating a resource&lt;/h2&gt;
&lt;p&gt;A &lt;code&gt;PATCH /resources/ID&lt;/code&gt; request will update partially a resource:&lt;/p&gt;

&lt;div&gt;
  &lt;div class=&quot;code-toolbar&quot;&gt;
    &lt;div class=&quot;btn-group&quot; role=&quot;group&quot; aria-label=&quot;...&quot;&gt;
      
      &lt;button type=&quot;button&quot; class=&quot;btn btn-default btn-copy&quot;&gt;&lt;i class=&quot;fa fa-clipboard&quot; aria-hidden=&quot;true&quot;&gt;&lt;/i&gt;&lt;/button&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;pre class=&quot;language-txt&quot;&gt;&lt;code&gt;PATCH /resources HTTP/1.1

{
  &amp;quot;other&amp;quot;: &amp;quot;modified data&amp;quot;
}&lt;/code&gt;&lt;/pre&gt;
  
&lt;/div&gt;

&lt;p&gt;If everything is OK, the server will return a OK status like &lt;code&gt;200 Accepted&lt;/code&gt;, and just like with the &lt;code&gt;POST&lt;/code&gt; request, the body may contain the updated resource.&lt;/p&gt;

&lt;div&gt;
  &lt;div class=&quot;code-toolbar&quot;&gt;
    &lt;div class=&quot;btn-group&quot; role=&quot;group&quot; aria-label=&quot;...&quot;&gt;
      
      &lt;button type=&quot;button&quot; class=&quot;btn btn-default btn-copy&quot;&gt;&lt;i class=&quot;fa fa-clipboard&quot; aria-hidden=&quot;true&quot;&gt;&lt;/i&gt;&lt;/button&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;pre class=&quot;language-txt&quot;&gt;&lt;code&gt;HTTP/1.1 200 Accepted

{
  &amp;quot;id&amp;quot;: &amp;quot;ID&amp;quot;,
  &amp;quot;href&amp;quot;: &amp;quot;/resources/ID&amp;quot;,
  &amp;quot;some&amp;quot;: &amp;quot;some data&amp;quot;,
  &amp;quot;other&amp;quot;: &amp;quot;modified data&amp;quot;
}&lt;/code&gt;&lt;/pre&gt;
  
&lt;/div&gt;

&lt;p&gt;If there’s a problem, the server will return an error. This error could be, for example, a &lt;code&gt;404 Not Found&lt;/code&gt; due to an invalid ID.&lt;/p&gt;

&lt;div&gt;
  &lt;div class=&quot;code-toolbar&quot;&gt;
    &lt;div class=&quot;btn-group&quot; role=&quot;group&quot; aria-label=&quot;...&quot;&gt;
      
      &lt;button type=&quot;button&quot; class=&quot;btn btn-default btn-copy&quot;&gt;&lt;i class=&quot;fa fa-clipboard&quot; aria-hidden=&quot;true&quot;&gt;&lt;/i&gt;&lt;/button&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;pre class=&quot;language-txt&quot;&gt;&lt;code&gt;HTTP/1.1 404 Not Found

{
  &amp;quot;message&amp;quot;: &amp;quot;Resource &amp;lt;ID&amp;gt; not found&amp;quot; 
}&lt;/code&gt;&lt;/pre&gt;
  
&lt;/div&gt;

&lt;h2 id=&quot;replacing-or-creating-a-resource&quot;&gt;Replacing or creating a resource&lt;/h2&gt;

&lt;p&gt;While a &lt;code&gt;PATCH /resources/ID&lt;/code&gt; updates partially a resource, a &lt;code&gt;PUT /resources/ID&lt;/code&gt; one will replace the resource. It may also create a new resource with the provided ID if it does not exist (and if it is allowed).&lt;/p&gt;

&lt;div&gt;
  &lt;div class=&quot;code-toolbar&quot;&gt;
    &lt;div class=&quot;btn-group&quot; role=&quot;group&quot; aria-label=&quot;...&quot;&gt;
      
      &lt;button type=&quot;button&quot; class=&quot;btn btn-default btn-copy&quot;&gt;&lt;i class=&quot;fa fa-clipboard&quot; aria-hidden=&quot;true&quot;&gt;&lt;/i&gt;&lt;/button&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;pre class=&quot;language-txt&quot;&gt;&lt;code&gt;PUT /resources/ID HTTP/1.1

{
  &amp;quot;some&amp;quot;: &amp;quot;some new data&amp;quot;,
  &amp;quot;other&amp;quot;: &amp;quot;some other new data&amp;quot;
}&lt;/code&gt;&lt;/pre&gt;
  
&lt;/div&gt;

&lt;p&gt;If everything is OK, the server will return a OK status. Depending on what happened the status may be, for example, a &lt;code&gt;200 Accepted&lt;/code&gt; for a replacement of an existing resource or a &lt;code&gt;201 Created&lt;/code&gt; when a resource has been created.&lt;/p&gt;

&lt;div&gt;
  &lt;div class=&quot;code-toolbar&quot;&gt;
    &lt;div class=&quot;btn-group&quot; role=&quot;group&quot; aria-label=&quot;...&quot;&gt;
      
      &lt;button type=&quot;button&quot; class=&quot;btn btn-default btn-copy&quot;&gt;&lt;i class=&quot;fa fa-clipboard&quot; aria-hidden=&quot;true&quot;&gt;&lt;/i&gt;&lt;/button&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;pre class=&quot;language-txt&quot;&gt;&lt;code&gt;HTTP/1.1 200 Accepted

{
  &amp;quot;id&amp;quot;: &amp;quot;ID&amp;quot;,
  &amp;quot;href&amp;quot;: &amp;quot;/resources/ID&amp;quot;,
  &amp;quot;some&amp;quot;: &amp;quot;some new data&amp;quot;,
  &amp;quot;other&amp;quot;: &amp;quot;some other new data&amp;quot;
}&lt;/code&gt;&lt;/pre&gt;
  
&lt;/div&gt;

&lt;h2 id=&quot;deleting-a-resource&quot;&gt;Deleting a resource&lt;/h2&gt;
&lt;p&gt;And finally, to delete a resource, the request is &lt;code&gt;DELETE /resources/ID&lt;/code&gt; without a body. If everything is OK, the server will return a &lt;code&gt;200 Accepted&lt;/code&gt;. If there’s something wrong, it will return an error like &lt;code&gt;404 Not Found&lt;/code&gt; if the resource does not exist or a &lt;code&gt;403 Forbidden&lt;/code&gt; if the user is not allowed to delete that resource.&lt;/p&gt;

&lt;h2 id=&quot;but-why-explaining-all-that-i-want-to-work-with-multiple-resources&quot;&gt;But why explaining all that? I want to work with multiple resources!&lt;/h2&gt;

&lt;p&gt;To work with multiple resources with a REST APIs, you definitely need to know how to work properly with a single one. This quick reminder is there to show how we use the HTTP protocol in REST APIs to express what we want to do and what happened in &lt;strong&gt;a clear and consistent way&lt;/strong&gt; when working with a single resource:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;the URI define which resource we are using&lt;/li&gt;
  &lt;li&gt;the HTTP method express what we want to do&lt;/li&gt;
  &lt;li&gt;the HTTP response status explain what happened&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now we’ll see how continue to do so when working with multiple resources.&lt;/p&gt;

&lt;h1 id=&quot;same-action-on-resources-of-the-same-type&quot;&gt;Same action on resources of the same type&lt;/h1&gt;

&lt;p&gt;So what if I want to &lt;code&gt;PATCH /resources/ID1&lt;/code&gt; and &lt;code&gt;PATCH /resources/ID2&lt;/code&gt; at the same time? When it comes to do one thing with multiple resources of the same type all at once:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;We send a request providing:
    &lt;ul&gt;
      &lt;li&gt;the &lt;strong&gt;type&lt;/strong&gt; of &lt;strong&gt;all&lt;/strong&gt; resources&lt;/li&gt;
      &lt;li&gt;the &lt;strong&gt;action&lt;/strong&gt; which will be applied to all these resources&lt;/li&gt;
      &lt;li&gt;the &lt;strong&gt;identified&lt;/strong&gt; data for &lt;strong&gt;all&lt;/strong&gt; resources&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;We expect &lt;strong&gt;a&lt;/strong&gt; response providing the result for &lt;strong&gt;each&lt;/strong&gt; resource containing exactly the same information as if we had made a single request&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;a-request-containing-multiple-resources&quot;&gt;A request containing multiple resources&lt;/h2&gt;

&lt;p&gt;To tell the resources type we’re working with, we will use the endpoint corresponding to a collection of resources, for example &lt;code&gt;/resources&lt;/code&gt; or &lt;code&gt;/users/bob/friends&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;To identify the action we want to apply on the resources we’ll simply use the matching HTTP verb:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;GET /resources&lt;/code&gt; to get multiple resources&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;POST /resources&lt;/code&gt; to create new resources&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;PATCH /resources&lt;/code&gt; to update multiple resources&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;PUT /resources&lt;/code&gt; to replace multiple resources&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;DELETE /resources&lt;/code&gt; to delete multiple resources&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;How to provide resources data and identifier will slightly vary depending on the action.&lt;/p&gt;

&lt;h3 id=&quot;create-multiple-resources&quot;&gt;Create multiple resources&lt;/h3&gt;

&lt;p&gt;To provide all needed information for a creation, we have to send an array of items containing a unique identifier determined by the consumer (&lt;code&gt;id&lt;/code&gt;) and the resource’s data (&lt;code&gt;body&lt;/code&gt;):&lt;/p&gt;

&lt;div&gt;
  &lt;div class=&quot;code-toolbar&quot;&gt;
    &lt;div class=&quot;btn-group&quot; role=&quot;group&quot; aria-label=&quot;...&quot;&gt;
      
      &lt;button type=&quot;button&quot; class=&quot;btn btn-default btn-copy&quot;&gt;&lt;i class=&quot;fa fa-clipboard&quot; aria-hidden=&quot;true&quot;&gt;&lt;/i&gt;&lt;/button&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;pre class=&quot;language-json&quot;&gt;&lt;code&gt;[
  {
    &amp;quot;id&amp;quot;: &amp;quot;CREATION1&amp;quot;,
    &amp;quot;body&amp;quot;: {&amp;quot;resource&amp;#39;s&amp;quot;: &amp;quot;data&amp;quot;}
  },
  {
    &amp;quot;id&amp;quot;: &amp;quot;CREATION2&amp;quot;,
    &amp;quot;body&amp;quot;: {&amp;quot;resource&amp;#39;s&amp;quot;: &amp;quot;data&amp;quot;}
  }
]&lt;/code&gt;&lt;/pre&gt;
  
&lt;/div&gt;

&lt;p&gt;It can also be done with a key/value map, the resource’s ID being the key and its data the value:&lt;/p&gt;

&lt;div&gt;
  &lt;div class=&quot;code-toolbar&quot;&gt;
    &lt;div class=&quot;btn-group&quot; role=&quot;group&quot; aria-label=&quot;...&quot;&gt;
      
      &lt;button type=&quot;button&quot; class=&quot;btn btn-default btn-copy&quot;&gt;&lt;i class=&quot;fa fa-clipboard&quot; aria-hidden=&quot;true&quot;&gt;&lt;/i&gt;&lt;/button&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;pre class=&quot;language-json&quot;&gt;&lt;code&gt;{
  &amp;quot;CREATION1&amp;quot; : {&amp;quot;resource&amp;#39;s&amp;quot;: &amp;quot;data&amp;quot;},
  &amp;quot;CREATION2&amp;quot; : {&amp;quot;resource&amp;#39;s&amp;quot;: &amp;quot;data&amp;quot;}
}&lt;/code&gt;&lt;/pre&gt;
  
&lt;/div&gt;

&lt;p&gt;Receiving these data with a &lt;code&gt;POST /resources&lt;/code&gt; request, the server will create the 2 resources provided. The provided &lt;code&gt;id&lt;/code&gt; will be used in the response to identify the response corresponding to this resource.&lt;/p&gt;

&lt;h3 id=&quot;update-or-replace-multiple-resources&quot;&gt;Update or replace multiple resources&lt;/h3&gt;
&lt;p&gt;To update or replace multiple resources, it’s exactly the same thing, besides the value of the resource’s id, which will be the one we would have use for a single resource (&lt;code&gt;/resources/ID&lt;/code&gt;).&lt;/p&gt;

&lt;div&gt;
  &lt;div class=&quot;code-toolbar&quot;&gt;
    &lt;div class=&quot;btn-group&quot; role=&quot;group&quot; aria-label=&quot;...&quot;&gt;
      
      &lt;button type=&quot;button&quot; class=&quot;btn btn-default btn-copy&quot;&gt;&lt;i class=&quot;fa fa-clipboard&quot; aria-hidden=&quot;true&quot;&gt;&lt;/i&gt;&lt;/button&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;pre class=&quot;language-json&quot;&gt;&lt;code&gt;{
  &amp;quot;ID1&amp;quot; : {&amp;quot;resource&amp;#39;s&amp;quot;: &amp;quot;data&amp;quot;},
  &amp;quot;ID2&amp;quot; : {&amp;quot;resource&amp;#39;s&amp;quot;: &amp;quot;data&amp;quot;}
}&lt;/code&gt;&lt;/pre&gt;
  
&lt;/div&gt;

&lt;p&gt;Receiving these data with a &lt;code&gt;PATCH /resources&lt;/code&gt; request, the server will execute both &lt;code&gt;PATCH /resources/ID1&lt;/code&gt; and &lt;code&gt;PATCH /resources/ID2&lt;/code&gt; (it works the same with &lt;code&gt;PUT&lt;/code&gt;). Just like with &lt;code&gt;POST&lt;/code&gt;, the provided ids will be used to identify each response.&lt;/p&gt;

&lt;h3 id=&quot;get-or-delete-multiple-resources&quot;&gt;Get or delete multiple resources&lt;/h3&gt;
&lt;p&gt;To get or delete multiple resources we will again use the resources ids but as a &lt;code&gt;GET&lt;/code&gt; or &lt;code&gt;DELETE&lt;/code&gt; request does not have a body, they will be provided in a query parameter like this &lt;code&gt;DELETE /resources?ids=ID1,ID2&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&quot;a-response-containing-responses&quot;&gt;A response containing responses&lt;/h2&gt;

&lt;p&gt;A response to such a request will have to contain exactly the same data we would have had doing single calls. We need to provide a response containing multiple responses, how can we do that?&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;One Status Code to bring them all and in the lightness bind them&lt;br /&gt;
&lt;em&gt;The Lord of the HTTP Status Codes&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The 207 HTTP status code is exactly what we’re looking for:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;The 207 (Multi-Status) status code provides status for multiple independent operations&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This status has been defined by &lt;a href=&quot;https://tools.ietf.org/html/rfc4918#section-11.1&quot;&gt;RFC 4918&lt;/a&gt; &lt;em&gt;HTTP Extensions for Web Distributed Authoring and Versioning (WebDAV)&lt;/em&gt;. Here’s an example of a WebDAV 207 response when deleting some resources:&lt;/p&gt;

&lt;div&gt;
  &lt;div class=&quot;code-toolbar&quot;&gt;
    &lt;div class=&quot;btn-group&quot; role=&quot;group&quot; aria-label=&quot;...&quot;&gt;
      
      &lt;button type=&quot;button&quot; class=&quot;btn btn-default btn-copy&quot;&gt;&lt;i class=&quot;fa fa-clipboard&quot; aria-hidden=&quot;true&quot;&gt;&lt;/i&gt;&lt;/button&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;pre class=&quot;language-xml&quot;&gt;&lt;code&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;utf-8&amp;quot; ?&amp;gt;
&amp;lt;d:multistatus xmlns:d=&amp;quot;DAV:&amp;quot;&amp;gt;
  &amp;lt;d:response&amp;gt;
    &amp;lt;d:href&amp;gt;http://www.example.com/container/resource3&amp;lt;/d:href&amp;gt;
    &amp;lt;d:status&amp;gt;HTTP/1.1 423 Locked&amp;lt;/d:status&amp;gt;
    &amp;lt;d:error&amp;gt;&amp;lt;d:lock-token-submitted/&amp;gt;&amp;lt;/d:error&amp;gt;
  &amp;lt;/d:response&amp;gt;
  &amp;lt;d:response&amp;gt;
    &amp;lt;d:href&amp;gt;http://www.example.com/container/resource4&amp;lt;/d:href&amp;gt;
    &amp;lt;d:status&amp;gt;HTTP/1.1 200 OK&amp;lt;/d:status&amp;gt;
  &amp;lt;/d:response&amp;gt;
&amp;lt;/d:multistatus&amp;gt;&lt;/code&gt;&lt;/pre&gt;
  
&lt;/div&gt;

&lt;div&gt;
      &lt;img src=&quot;/images/api-design-tips-and-tricks-getting-creating-updating-or-deleting-multiple-resources-in-one-api-call/whatthehellisthat.gif&quot; /&gt;
      
    &lt;/div&gt;

&lt;p&gt;Oops, sorry for the XML, it’s only to show that a WebDAV &lt;em&gt;207&lt;/em&gt; response contains a list of response. Each of this response point to a resource (href) and contains also the response itself, how could it look in a less frightening JSON way:&lt;/p&gt;

&lt;div&gt;
  &lt;div class=&quot;code-toolbar&quot;&gt;
    &lt;div class=&quot;btn-group&quot; role=&quot;group&quot; aria-label=&quot;...&quot;&gt;
      
      &lt;button type=&quot;button&quot; class=&quot;btn btn-default btn-copy&quot;&gt;&lt;i class=&quot;fa fa-clipboard&quot; aria-hidden=&quot;true&quot;&gt;&lt;/i&gt;&lt;/button&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;pre class=&quot;language-json&quot;&gt;&lt;code&gt;[
  {
    &amp;quot;id&amp;quot;: &amp;quot;ID1&amp;quot;,
    &amp;quot;status&amp;quot;: &amp;quot;201&amp;quot;,
    &amp;quot;headers&amp;quot;: [
      {&amp;quot;header&amp;#39;s name&amp;quot;: &amp;quot;header&amp;#39;s value&amp;quot;}
    ],
    &amp;quot;body&amp;quot;: { &amp;quot;the&amp;quot;: &amp;quot;response&amp;#39;s body&amp;quot;}
  },
  {
    &amp;quot;id&amp;quot;: &amp;quot;ID2&amp;quot;,
    &amp;quot;status&amp;quot;: &amp;quot;400&amp;quot;,
    &amp;quot;headers&amp;quot;: [
      {&amp;quot;header&amp;#39;s name&amp;quot;: &amp;quot;header&amp;#39;s value&amp;quot;}
    ],
    &amp;quot;body&amp;quot;: { &amp;quot;the&amp;quot;: &amp;quot;response&amp;#39;s body&amp;quot;}
  }
]&lt;/code&gt;&lt;/pre&gt;
  
&lt;/div&gt;

&lt;p&gt;A 207 will response will contain a list of responses, each response containing:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;An identifier (&lt;code&gt;id&lt;/code&gt;) matching the one provided in the request&lt;/li&gt;
  &lt;li&gt;The HTTP response’s data composed of a &lt;code&gt;status&lt;/code&gt;, &lt;code&gt;headers&lt;/code&gt; and a &lt;code&gt;body&lt;/code&gt;. These data are exactly the same we would have received for a single call.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Note that we can also use a map in which the keys are the responses identifiers:&lt;/p&gt;

&lt;div&gt;
  &lt;div class=&quot;code-toolbar&quot;&gt;
    &lt;div class=&quot;btn-group&quot; role=&quot;group&quot; aria-label=&quot;...&quot;&gt;
      
      &lt;button type=&quot;button&quot; class=&quot;btn btn-default btn-copy&quot;&gt;&lt;i class=&quot;fa fa-clipboard&quot; aria-hidden=&quot;true&quot;&gt;&lt;/i&gt;&lt;/button&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;pre class=&quot;language-json&quot;&gt;&lt;code&gt;{
  &amp;quot;ID1&amp;quot;: {
    &amp;quot;status&amp;quot;: &amp;quot;201&amp;quot;,
    &amp;quot;headers&amp;quot;: [
      {&amp;quot;header&amp;#39;s name&amp;quot;: &amp;quot;header&amp;#39;s value&amp;quot;}
    ],
    &amp;quot;body&amp;quot;: { &amp;quot;the&amp;quot;: &amp;quot;response&amp;#39;s body&amp;quot;}
  },
  &amp;quot;ID2&amp;quot;: {
    &amp;quot;status&amp;quot;: &amp;quot;400&amp;quot;,
    &amp;quot;headers&amp;quot;: [
      {&amp;quot;header&amp;#39;s name&amp;quot;: &amp;quot;header&amp;#39;s value&amp;quot;}
    ],
    &amp;quot;body&amp;quot;: { &amp;quot;the&amp;quot;: &amp;quot;response&amp;#39;s body&amp;quot;}
  }
}&lt;/code&gt;&lt;/pre&gt;
  
&lt;/div&gt;

&lt;p&gt;We could even match request and response based on position in the list.&lt;/p&gt;

&lt;h2 id=&quot;two-levels-of-error&quot;&gt;Two levels of error&lt;/h2&gt;

&lt;p&gt;In that case, we must be aware that there are two types of errors, the one concerning one or more of the resources and the one concerning the &lt;em&gt;multiple&lt;/em&gt; request itself.&lt;/p&gt;

&lt;p&gt;For errors concerning the action on each resource), the HTTP status returned by the server will be a 207 and each sub-response will contains the status for each sub-request (as explained in previous paragraph).&lt;/p&gt;

&lt;p&gt;For errors concerning the main request (misspelled query parameter for DELETE, or invalid body map/list structure for example), the server may return a &lt;em&gt;400 Bad Request&lt;/em&gt; for example.&lt;/p&gt;

&lt;h2 id=&quot;single-and-multiple-creations-with-the-same-endpoint&quot;&gt;Single and multiple creations with the same endpoint&lt;/h2&gt;

&lt;p&gt;Note that &lt;code&gt;POST /resources&lt;/code&gt; was supposed to be used to create a single resource. If we want to handle the single/multiple duality we have two options:&lt;/p&gt;

&lt;h3 id=&quot;use-a-listmap-for-both-case&quot;&gt;Use a list/map for both case&lt;/h3&gt;

&lt;p&gt;The input is exactly the same for 1 or more resources, we will only provide a single one item to create a single resource.&lt;/p&gt;

&lt;div&gt;
  &lt;div class=&quot;code-toolbar&quot;&gt;
    &lt;div class=&quot;btn-group&quot; role=&quot;group&quot; aria-label=&quot;...&quot;&gt;
      
      &lt;button type=&quot;button&quot; class=&quot;btn btn-default btn-copy&quot;&gt;&lt;i class=&quot;fa fa-clipboard&quot; aria-hidden=&quot;true&quot;&gt;&lt;/i&gt;&lt;/button&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;pre class=&quot;language-json&quot;&gt;&lt;code&gt;{
  &amp;quot;CREATION1&amp;quot; : {&amp;quot;resource&amp;#39;s&amp;quot;: &amp;quot;data&amp;quot;}
}&lt;/code&gt;&lt;/pre&gt;
  
&lt;/div&gt;

&lt;p&gt;The server’s response should be always be the one described earlier for multiple creations even if there’s only a single item.&lt;/p&gt;

&lt;h3 id=&quot;accept-both-a-listmap-and-single-object&quot;&gt;Accept both a list/map and single object&lt;/h3&gt;

&lt;p&gt;The input for a single resource contains only the resource’s data:&lt;/p&gt;

&lt;div&gt;
  &lt;div class=&quot;code-toolbar&quot;&gt;
    &lt;div class=&quot;btn-group&quot; role=&quot;group&quot; aria-label=&quot;...&quot;&gt;
      
      &lt;button type=&quot;button&quot; class=&quot;btn btn-default btn-copy&quot;&gt;&lt;i class=&quot;fa fa-clipboard&quot; aria-hidden=&quot;true&quot;&gt;&lt;/i&gt;&lt;/button&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;pre class=&quot;language-json&quot;&gt;&lt;code&gt;{&amp;quot;resource&amp;#39;s&amp;quot;: &amp;quot;data&amp;quot;}&lt;/code&gt;&lt;/pre&gt;
  
&lt;/div&gt;

&lt;p&gt;The server response will be the one expected for a single creation.&lt;/p&gt;

&lt;p&gt;The input for multiple resource contains a list/map:&lt;/p&gt;

&lt;div&gt;
  &lt;div class=&quot;code-toolbar&quot;&gt;
    &lt;div class=&quot;btn-group&quot; role=&quot;group&quot; aria-label=&quot;...&quot;&gt;
      
      &lt;button type=&quot;button&quot; class=&quot;btn btn-default btn-copy&quot;&gt;&lt;i class=&quot;fa fa-clipboard&quot; aria-hidden=&quot;true&quot;&gt;&lt;/i&gt;&lt;/button&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;pre class=&quot;language-json&quot;&gt;&lt;code&gt;{
  &amp;quot;CREATION1&amp;quot; : {&amp;quot;resource&amp;#39;s&amp;quot;: &amp;quot;data&amp;quot;}
  &amp;quot;CREATION2&amp;quot; : {&amp;quot;resource&amp;#39;s&amp;quot;: &amp;quot;data&amp;quot;}
}&lt;/code&gt;&lt;/pre&gt;
  
&lt;/div&gt;

&lt;p&gt;The server response will be the one expected for a multiple creations as seen earlier.&lt;/p&gt;

&lt;h1 id=&quot;different-actions-on-resources-of-the-same-type&quot;&gt;Different actions on resources of the same type&lt;/h1&gt;
&lt;p&gt;What if we want to &lt;code&gt;DELETE /resources/ID1&lt;/code&gt; and &lt;code&gt;PATCH /resources/ID2&lt;/code&gt; at the same time? As it is an action that impacts the data in various way we should use the &lt;code&gt;POST&lt;/code&gt; HTTP verb. Concerning the URI, we have two options, use &lt;code&gt;/resources&lt;/code&gt; or create a specific resources for this use case like &lt;code&gt;/resource-modifications&lt;/code&gt; for example. The request will be then something like &lt;code&gt;POST /resources&lt;/code&gt; or &lt;code&gt;POST /resource-modifications&lt;/code&gt; and we will have to provide the action (&lt;code&gt;method&lt;/code&gt;) for each resource:&lt;/p&gt;

&lt;div&gt;
  &lt;div class=&quot;code-toolbar&quot;&gt;
    &lt;div class=&quot;btn-group&quot; role=&quot;group&quot; aria-label=&quot;...&quot;&gt;
      
      &lt;button type=&quot;button&quot; class=&quot;btn btn-default btn-copy&quot;&gt;&lt;i class=&quot;fa fa-clipboard&quot; aria-hidden=&quot;true&quot;&gt;&lt;/i&gt;&lt;/button&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;pre class=&quot;language-json&quot;&gt;&lt;code&gt;[
  {
    &amp;quot;id&amp;quot;: &amp;quot;ID1&amp;quot;,
    &amp;quot;method&amp;quot;: &amp;quot;DELETE&amp;quot;
  },
  {
    &amp;quot;id&amp;quot;: &amp;quot;ID2&amp;quot;,
    &amp;quot;method&amp;quot;: &amp;quot;PATCH&amp;quot;,
    &amp;quot;body&amp;quot;: {&amp;quot;resource&amp;#39;s&amp;quot;: &amp;quot;data&amp;quot;}
  }
]&lt;/code&gt;&lt;/pre&gt;
  
&lt;/div&gt;

&lt;p&gt;The server will do &lt;code&gt;DELETE /resources/ID1&lt;/code&gt; and &lt;code&gt;PATCH /resources/ID2&lt;/code&gt; and the response will be a &lt;em&gt;207&lt;/em&gt; using the structure using the provided &lt;code&gt;id&lt;/code&gt; as seen previously in his post.&lt;/p&gt;

&lt;h1 id=&quot;different-actions-on-resources-of-different-types&quot;&gt;Different actions on resources of different types&lt;/h1&gt;
&lt;p&gt;What if I want to do &lt;code&gt;DELETE /resources/ID1&lt;/code&gt; and &lt;code&gt;PATCH /another-resources/ID2&lt;/code&gt; at the same time?&lt;/p&gt;

&lt;div&gt;
      &lt;img src=&quot;/images/api-design-tips-and-tricks-getting-creating-updating-or-deleting-multiple-resources-in-one-api-call/waitwhat.gif&quot; /&gt;
      
    &lt;/div&gt;

&lt;p&gt;This is really nasty and definitely not REST, but it can be useful for &lt;a href=&quot;https://www.infoq.com/articles/api-facades&quot;&gt;backend for frontend or experience API&lt;/a&gt; for example.&lt;/p&gt;

&lt;p&gt;To do that we’ll need to &lt;code&gt;POST&lt;/code&gt; data on a specific endpoint which could something like &lt;code&gt;/batch&lt;/code&gt;, &lt;code&gt;/bulk&lt;/code&gt; or even &lt;code&gt;/&lt;/code&gt; and we will have to add a &lt;code&gt;uri&lt;/code&gt; and replace the &lt;code&gt;id&lt;/code&gt; value by something provided by the consumer:&lt;/p&gt;

&lt;div&gt;
  &lt;div class=&quot;code-toolbar&quot;&gt;
    &lt;div class=&quot;btn-group&quot; role=&quot;group&quot; aria-label=&quot;...&quot;&gt;
      
      &lt;button type=&quot;button&quot; class=&quot;btn btn-default btn-copy&quot;&gt;&lt;i class=&quot;fa fa-clipboard&quot; aria-hidden=&quot;true&quot;&gt;&lt;/i&gt;&lt;/button&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;pre class=&quot;language-json&quot;&gt;&lt;code&gt;[
  {
    &amp;quot;id&amp;quot;: &amp;quot;ACTION1&amp;quot;,
    &amp;quot;uri&amp;quot;: &amp;quot;/resources/ID1&amp;quot;,
    &amp;quot;method&amp;quot;: &amp;quot;DELETE&amp;quot;
  },
  {
    &amp;quot;id&amp;quot;: &amp;quot;ACTION2&amp;quot;,
    &amp;quot;uri&amp;quot;: &amp;quot;/another-resources/ID2&amp;quot;,
    &amp;quot;method&amp;quot;: &amp;quot;PATCH&amp;quot;,
    &amp;quot;body&amp;quot;: {&amp;quot;resource&amp;#39;s&amp;quot;: &amp;quot;data&amp;quot;}
  }
  ,
  {
    &amp;quot;id&amp;quot;: &amp;quot;ACTION3&amp;quot;,
    &amp;quot;uri&amp;quot;: &amp;quot;/resources&amp;quot;,
    &amp;quot;method&amp;quot;: &amp;quot;POST&amp;quot;,
    &amp;quot;body&amp;quot;: {&amp;quot;resource&amp;#39;s&amp;quot;: &amp;quot;data&amp;quot;}
  }
]&lt;/code&gt;&lt;/pre&gt;
  
&lt;/div&gt;

&lt;p&gt;Actions number 1 is &lt;code&gt;DELETE /resources/ID1&lt;/code&gt; and its result will be identified in the 207 response by the id &lt;code&gt;ACTION1&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;To see a complete example you should take a look at &lt;a href=&quot;https://developers.facebook.com/docs/graph-api/making-multiple-requests&quot;&gt;Facebook’s Graph API batch endpoint&lt;/a&gt; documentation. Note that this batch endpoint match request/response based on index and does far more than just processing a bunch of request.&lt;/p&gt;</content><author><name>Arnaud Lauret</name></author><category term="posts" /><category term="API Design Tips And Tricks" /><summary type="html">Getting, creating, updating or deleting multiple resources in a single API call is a common need in REST APIs. But how to achieve that in a consistent way accomodating how we work with a single resource and REST principles? This is what we’ll see in this post.</summary></entry><entry><title type="html">OpenAPI Visual Documentation updated with 3.0.0-rc0</title><link href="https://apihandyman.io/openapi-visual-documentation-updated-with-3.0.0-rc0/" rel="alternate" type="text/html" title="OpenAPI Visual Documentation updated with 3.0.0-rc0" /><published>2017-03-19T00:00:00+00:00</published><updated>2017-03-19T00:00:00+00:00</updated><id>https://apihandyman.io/openapi-visual-documentation-updated-with-3.0.0-rc0</id><content type="html" xml:base="https://apihandyman.io/openapi-visual-documentation-updated-with-3.0.0-rc0/">&lt;p&gt;The &lt;a href=&quot;http://openapi-specification-visual-documentation.apihandyman.io/&quot;&gt;OpenAPI Visual Documentation has been updated&lt;/a&gt;. The new version 3.0.0-rc0 of the OpenAPI specification has been added. The addition brings a fully detailed change log of what has change from version 2.&lt;!--more--&gt;&lt;/p&gt;

&lt;h1 id=&quot;openapi-30&quot;&gt;OpenAPI 3.0&lt;/h1&gt;
&lt;p&gt;The OpenAPI specification is evolving, the 3.0.0-rc0 implementer draft version has been &lt;a href=&quot;https://www.openapis.org/blog/2017/03/01/openapi-spec-3-implementers-draft-released&quot;&gt;released&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This new OpenAPI specification version 3.0.0 offers many welcomed improvements and new features (see OpenAPI &lt;a href=&quot;https://www.openapis.org/news/blogs/2016/10/tdc-structural-improvements-explaining-30-spec-part-2&quot;&gt;blog post series about this&lt;/a&gt;).&lt;/p&gt;

&lt;h1 id=&quot;updating-the-openapi-specification-visual-documentation&quot;&gt;Updating the OpenAPI Specification Visual Documentation&lt;/h1&gt;
&lt;p&gt;It was past time to update the &lt;a href=&quot;http://openapi-specification-visual-documentation.apihandyman.io/&quot;&gt;OpenAPI Specification Visual Documentation&lt;/a&gt; to fully grasp what happens with this update.&lt;/p&gt;

&lt;div&gt;
      &lt;img src=&quot;/images/openapi-visual-documentation-updated-with-3.0.0-rc0/openapi-visual-documentation.png&quot; /&gt;
      &lt;p class=&quot;img-label&quot;&gt;&lt;a href=&quot;http://openapi-specification-visual-documentation.apihandyman.io/&quot;&gt;OpenAPI Specification Visual Documentation showing v3.0.0-rc0&lt;/a&gt;&lt;/p&gt;
    &lt;/div&gt;

&lt;p&gt;The tool can handle now multiple versions that you select with the buttons on the top right navigation bar. The v3.0.0-rc0 comes with a fully detailed changelog for each level and property.&lt;/p&gt;</content><author><name>Arnaud Lauret</name></author><category term="elsewhere" /><category term="OpenAPI" /><summary type="html">The OpenAPI Visual Documentation has been updated. The new version 3.0.0-rc0 of the OpenAPI specification has been added. The addition brings a fully detailed change log of what has change from version 2.</summary></entry><entry><title type="html">Google API Design Guide added to the API Stylebook</title><link href="https://apihandyman.io/google-api-design-guide-added-to-the-api-stylebook/" rel="alternate" type="text/html" title="Google API Design Guide added to the API Stylebook" /><published>2017-03-05T00:00:00+00:00</published><updated>2017-03-05T00:00:00+00:00</updated><id>https://apihandyman.io/google-api-design-guide-added-to-the-api-stylebook</id><content type="html" xml:base="https://apihandyman.io/google-api-design-guide-added-to-the-api-stylebook/">&lt;p&gt;I’ve just added the Google API Design Guide to the &lt;a href=&quot;http://apistylebook.com/blog/google-api-design-guide-added-on-the-api-stylebook&quot;&gt;API Stylebook&lt;/a&gt;.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;This guide is slightly different from the other ones because it deals with REST and RPC API design focusing on gRPC APIs using Protocol Buffers v3.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;To discover this API design guide and a short review, let’s go to the &lt;a href=&quot;http://apistylebook.com/blog/google-api-design-guide-added-on-the-api-stylebook&quot;&gt;API Stylebook blog&lt;/a&gt;.&lt;/p&gt;</content><author><name>Arnaud Lauret</name></author><category term="elsewhere" /><category term="Design" /><category term="API Stylebook" /><summary type="html">I’ve just added the Google API Design Guide to the API Stylebook.


  This guide is slightly different from the other ones because it deals with REST and RPC API design focusing on gRPC APIs using Protocol Buffers v3.


To discover this API design guide and a short review, let’s go to the API Stylebook blog.</summary></entry><entry><title type="html">Writing OpenAPI (Swagger) Specification Tutorial - Part 9 - Extending the OpenAPI specification</title><link href="https://apihandyman.io/writing-openapi-swagger-specification-tutorial-part-9-extending-the-openapi-specification/" rel="alternate" type="text/html" title="Writing OpenAPI (Swagger) Specification Tutorial - Part 9 - Extending the OpenAPI specification" /><published>2017-02-19T00:00:00+00:00</published><updated>2017-02-19T00:00:00+00:00</updated><id>https://apihandyman.io/writing-openapi-swagger-specification-tutorial-part-9-extending-the-openapi-specification</id><content type="html" xml:base="https://apihandyman.io/writing-openapi-swagger-specification-tutorial-part-9-extending-the-openapi-specification/">&lt;p&gt;This is the end, my OpenAPI friends, the end. The end? Not really. This last part of the OpenAPI tutorial is a new beginning. With previous parts we have learned to master the OpenAPI specification but there’s a last thing to learn to unleash its full power: extensions. This format is easily extensible, it allows to add custom data within an API description. But for what purposes? Let’s have a glimpse of these extensions endless possibilities.
&lt;!--more--&gt;&lt;/p&gt;

&lt;h1 id=&quot;writing-openapi-fka-swagger-specification-tutorial&quot;&gt;Writing OpenAPI (fka Swagger) Specification tutorial&lt;/h1&gt;
&lt;p&gt;This tutorial is composed of several posts:&lt;/p&gt;

&lt;ul&gt;
  
    
    &lt;li&gt;&lt;a class=&quot;page-link&quot; href=&quot;/writing-openapi-swagger-specification-tutorial-part-1-introduction/&quot;&gt;Part 1 - Introduction&lt;/a&gt;&lt;/li&gt;
    
  
    
    &lt;li&gt;&lt;a class=&quot;page-link&quot; href=&quot;/writing-openapi-swagger-specification-tutorial-part-2-the-basics/&quot;&gt;Part 2 - The basics&lt;/a&gt;&lt;/li&gt;
    
  
    
    &lt;li&gt;&lt;a class=&quot;page-link&quot; href=&quot;/writing-openapi-swagger-specification-tutorial-part-3-simplifying-specification-file/&quot;&gt;Part 3 - Simplifying specification file&lt;/a&gt;&lt;/li&gt;
    
  
    
    &lt;li&gt;&lt;a class=&quot;page-link&quot; href=&quot;/writing-openapi-swagger-specification-tutorial-part-4-advanced-data-modeling/&quot;&gt;Part 4 - Advanced Data&lt;/a&gt;&lt;/li&gt;
    
  
    
    &lt;li&gt;&lt;a class=&quot;page-link&quot; href=&quot;/writing-openapi-swagger-specification-tutorial-part-5-advanced-input-and-output-modeling/&quot;&gt;Part 5 - Advanced Input And Output Modeling&lt;/a&gt;&lt;/li&gt;
    
  
    
    &lt;li&gt;&lt;a class=&quot;page-link&quot; href=&quot;/writing-openapi-swagger-specification-tutorial-part-6-defining-security/&quot;&gt;Part 6 - Defining Security&lt;/a&gt;&lt;/li&gt;
    
  
    
    &lt;li&gt;&lt;a class=&quot;page-link&quot; href=&quot;/writing-openapi-swagger-specification-tutorial-part-7-documentation/&quot;&gt;Part 7 - Documentation&lt;/a&gt;&lt;/li&gt;
    
  
    
    &lt;li&gt;&lt;a class=&quot;page-link&quot; href=&quot;/writing-openapi-swagger-specification-tutorial-part-8-splitting-specification-file/&quot;&gt;Part 8 - Splitting specification file&lt;/a&gt;&lt;/li&gt;
    
  
    
    &lt;li&gt;&lt;strong&gt;Part 9 - Extending the OpenAPI specification&lt;/strong&gt;&lt;/li&gt;
    
  
&lt;/ul&gt;

&lt;p&gt;If you’re a bit lost in the &lt;a href=&quot;https://github.com/OAI/OpenAPI-Specification/blob/master/versions/2.0.md&quot;&gt;specification&lt;/a&gt;, take a look at my &lt;em&gt;visual documentation:&lt;/em&gt;&lt;/p&gt;
&lt;div&gt;
      &lt;img src=&quot;/images/writing-openapi-swagger-specification-tutorial/openapi-specification-visual-documentation.png&quot; /&gt;
      &lt;p class=&quot;img-label&quot;&gt;&lt;a href=&quot;http://openapi-specification-visual-documentation.apihandyman.io/&quot;&gt;OpenAPI Specification Visual Documentation&lt;/a&gt;&lt;/p&gt;
    &lt;/div&gt;

&lt;p&gt;In this final part we’ll learn how to extend the OpenAPI specification to add custom data and most important, we’ll discover why we would do that.&lt;/p&gt;

&lt;h1 id=&quot;one-size-may-not-fit-all&quot;&gt;One size may not fit all&lt;/h1&gt;

&lt;p&gt;After working for a while with the OpenAPI format, you WILL want to add other data into you API descriptions, this is your destiny. Fortunately, the creator of the format had foreseen that:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;While the Swagger Specification tries to accommodate most use cases, additional data can be added to extend the specification at certain points.&lt;br /&gt;
&lt;em&gt;&lt;a href=&quot;https://github.com/OAI/OpenAPI-Specification/blob/master/versions/2.0.md#vendorExtensions&quot;&gt;OpenAPI Specification&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Once known as &lt;em&gt;Vendor Extensions&lt;/em&gt;, these &lt;em&gt;Specification Extensions&lt;/em&gt; can be created by anyone, don’t be fooled by their original name.&lt;/p&gt;

&lt;h1 id=&quot;custom-property&quot;&gt;Custom property&lt;/h1&gt;

&lt;p&gt;To add a custom property with an OpenAPI definition file you only need to prefix its name by &lt;code&gt;x-&lt;/code&gt;:&lt;/p&gt;

&lt;div&gt;
  &lt;div class=&quot;code-toolbar&quot;&gt;
    &lt;div class=&quot;btn-group&quot; role=&quot;group&quot; aria-label=&quot;...&quot;&gt;
      
      &lt;button type=&quot;button&quot; class=&quot;btn btn-default btn-copy&quot;&gt;&lt;i class=&quot;fa fa-clipboard&quot; aria-hidden=&quot;true&quot;&gt;&lt;/i&gt;&lt;/button&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;pre class=&quot;language-yaml line-numbers&quot;&gt;&lt;code&gt;x-&amp;lt;what you want&amp;gt;: &amp;lt;value&amp;gt;&lt;/code&gt;&lt;/pre&gt;
  
&lt;/div&gt;

&lt;p&gt;Here’s a custom property &lt;code&gt;x-custom-info&lt;/code&gt; in the &lt;code&gt;info&lt;/code&gt; section of an OpenAPI file:&lt;/p&gt;

&lt;div&gt;
  &lt;!-- codeblocksize: 20 --&gt;
  &lt;div class=&quot;code-toolbar&quot;&gt;
    &lt;div class=&quot;btn-group&quot; role=&quot;group&quot; aria-label=&quot;...&quot;&gt;
      
      &lt;button type=&quot;button&quot; class=&quot;btn btn-default&quot;&gt;&lt;a target=&quot;_blank&quot; href=&quot;/code/writing-openapi-swagger-specification-tutorial/simple_openapi_specification_53_custom_property.yaml&quot;&gt;&lt;i class=&quot;fa fa-file-text-o&quot; aria-hidden=&quot;true&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/button&gt;
      &lt;button type=&quot;button&quot; class=&quot;btn btn-default btn-copy&quot;&gt;&lt;i class=&quot;fa fa-clipboard&quot; aria-hidden=&quot;true&quot;&gt;&lt;/i&gt;&lt;/button&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;pre class=&quot;language-yaml line-numbers&quot; data-line=&quot;5&quot; data-start=&quot;3&quot;&gt;&lt;code&gt;info:
  version: 1.0.0
  title: x-tended OpenAPI Specification
  description: An OpenAPI specification containing custom data
  x-custom-info: Here's some custom information
&lt;/code&gt;&lt;/pre&gt;
  
&lt;/div&gt;

&lt;p&gt;If a standard Swagger/OpenAPI parser encounters such property, it will ignore it because it’s prefixed with &lt;code&gt;x-&lt;/code&gt;. This &lt;code&gt;info&lt;/code&gt; section with a custom property is valid:&lt;/p&gt;

&lt;div&gt;
      &lt;img src=&quot;/images/writing-openapi-swagger-specification-tutorial-part-9-extending-the-openapi-specification/custom-property.png&quot; /&gt;
      
    &lt;/div&gt;

&lt;h1 id=&quot;custom-object&quot;&gt;Custom object&lt;/h1&gt;

&lt;p&gt;Extensions are not only meant to be atomic properties, they can also be objects:&lt;/p&gt;

&lt;div&gt;
  &lt;!-- codeblocksize: 20 --&gt;
  &lt;div class=&quot;code-toolbar&quot;&gt;
    &lt;div class=&quot;btn-group&quot; role=&quot;group&quot; aria-label=&quot;...&quot;&gt;
      
      &lt;button type=&quot;button&quot; class=&quot;btn btn-default&quot;&gt;&lt;a target=&quot;_blank&quot; href=&quot;/code/writing-openapi-swagger-specification-tutorial/simple_openapi_specification_54_custom_object.yaml&quot;&gt;&lt;i class=&quot;fa fa-file-text-o&quot; aria-hidden=&quot;true&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/button&gt;
      &lt;button type=&quot;button&quot; class=&quot;btn btn-default btn-copy&quot;&gt;&lt;i class=&quot;fa fa-clipboard&quot; aria-hidden=&quot;true&quot;&gt;&lt;/i&gt;&lt;/button&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;pre class=&quot;language-yaml line-numbers&quot; data-line=&quot;5-11&quot; data-start=&quot;3&quot;&gt;&lt;code&gt;info:
  version: 1.0.0
  title: x-tended OpenAPI Specification
  description: An OpenAPI specification containing custom data
  x-custom-info:
    comment: Here's some custom information
    authors:
      - name: John Doe
        email: john@doe.com
      - name: Jane Doe
        email: jane@doe.com
&lt;/code&gt;&lt;/pre&gt;
  
&lt;/div&gt;

&lt;p&gt;Note that sub-properties names do not need to be prefixed with &lt;code&gt;x-&lt;/code&gt;.&lt;/p&gt;

&lt;h1 id=&quot;extensions-almost-anywhere&quot;&gt;Extensions almost anywhere&lt;/h1&gt;

&lt;p&gt;These custom data structures can be added almost anywhere in the specification. You can test if a location is ok by simply adding your extension where you want within the online editor and see if the validator complains or not.&lt;/p&gt;

&lt;p&gt;You can also take a look at my &lt;a href=&quot;http://openapi-specification-visual-documentation.apihandyman.io/&quot;&gt;visual documentation&lt;/a&gt; to check if the location you want to use allows extension or not:&lt;/p&gt;

&lt;div&gt;
      &lt;img src=&quot;/images/writing-openapi-swagger-specification-tutorial-part-9-extending-the-openapi-specification/almost-anywhere.png&quot; /&gt;
      
    &lt;/div&gt;

&lt;p&gt;Here’s an example using various location (non-exhaustive example):&lt;/p&gt;

&lt;div&gt;
  &lt;!-- codeblocksize: 20 --&gt;
  &lt;div class=&quot;code-toolbar&quot;&gt;
    &lt;div class=&quot;btn-group&quot; role=&quot;group&quot; aria-label=&quot;...&quot;&gt;
      &lt;button type=&quot;button&quot; class=&quot;btn btn-default&quot; onclick=&quot;toggle(this, this.parentElement.parentElement.parentElement.children[1], this.parentElement.parentElement.parentElement.children[2].children[0])&quot;&gt;&lt;i class=&quot;fa fa-expand&quot; aria-hidden=&quot;true&quot;&gt;&lt;/i&gt;&lt;/button&gt;
      &lt;button type=&quot;button&quot; class=&quot;btn btn-default&quot;&gt;&lt;a target=&quot;_blank&quot; href=&quot;/code/writing-openapi-swagger-specification-tutorial/simple_openapi_specification_55_extensions_almost_anywhere.yaml&quot;&gt;&lt;i class=&quot;fa fa-file-text-o&quot; aria-hidden=&quot;true&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/button&gt;
      &lt;button type=&quot;button&quot; class=&quot;btn btn-default btn-copy&quot;&gt;&lt;i class=&quot;fa fa-clipboard&quot; aria-hidden=&quot;true&quot;&gt;&lt;/i&gt;&lt;/button&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;pre class=&quot;language-yaml line-numbers code-collapsed&quot; data-line=&quot;3,9-15,24,32,37&quot;&gt;&lt;code&gt;swagger: '2.0'

x-root: some custom root data

info:
  version: 1.0.0
  title: x-tended OpenAPI Specification
  description: An OpenAPI specification containing custom data
  x-custom-info:
    comment: Here's some custom information
    authors:
      - name: John Doe
        email: john@doe.com
      - name: Jane Doe
        email: jane@doe.com

paths:
  /resources:
    get:
      description: gets some resource
      responses:
        200:
          description: everything is ok
          x-custom-response-data: I told you everything was really OK!
          schema:
            type: array
            items:
              $ref: &quot;#/definitions/Resource&quot;

definitions:
  Resource:
    x-custom-definition-data: some.dummy.class.Resource
    properties:
      data:
        description: some data
        type: string
        x-custom-property-data: More blah blah about this property&lt;/code&gt;&lt;/pre&gt;
  &lt;div class=&quot;code-bottom-toolbar&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;btn btn-default btn-block&quot; onclick=&quot;toggle(this, this.parentElement.parentElement.children[1], this.parentElement.parentElement.children[0].children[0].children[0], true)&quot;&gt;&lt;i class=&quot;fa fa-expand&quot; aria-hidden=&quot;true&quot;&gt;&lt;/i&gt;&lt;/button&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;h1 id=&quot;why-customizing-the-openapi-specification&quot;&gt;Why customizing the OpenAPI specification?&lt;/h1&gt;

&lt;p&gt;So, adding custom information within an OpenAPI specification file is fairly easy. But the question is less about the how and more about the why. Why would you add custom data to your OpenAPI files?&lt;/p&gt;

&lt;p&gt;You can use some extensions provided by open source or commercial tools or create your own. You can simply add custom data without processing them for documentation purpose or use these informations to generate documentation, client code, server code or tests or even configure some tools.&lt;/p&gt;

&lt;p&gt;Let’s see some examples.  &lt;br /&gt;
&lt;em&gt;nb: This post is not a sponsored one.&lt;/em&gt;&lt;/p&gt;

&lt;h1 id=&quot;example-1-documentation&quot;&gt;Example 1: Documentation&lt;/h1&gt;
&lt;p&gt;&lt;a href=&quot;https://docs.gelato.io/guides/control-grouping-with-swagger&quot;&gt;Gelato, the Mashape Developer Portal solution&lt;/a&gt;, uses the &lt;a href=&quot;https://docs.gelato.io/guides/control-grouping-with-swagger&quot;&gt;&lt;code&gt;x-gelato-group&lt;/code&gt;&lt;/a&gt; extension to group operations in the portal navigation.&lt;/p&gt;

&lt;div&gt;
      &lt;img src=&quot;/images/writing-openapi-swagger-specification-tutorial-part-9-extending-the-openapi-specification/gelato.png&quot; /&gt;
      
    &lt;/div&gt;

&lt;p&gt;Of course, as an OpenAPI expert you would have use tags to do that. Beware to not reinvent the wheel when creating your extensions.&lt;/p&gt;

&lt;h1 id=&quot;example-2-client-code-generation&quot;&gt;Example 2: Client code generation&lt;/h1&gt;

&lt;p&gt;&lt;a href=&quot;https://docs.apimatic.io/advanced/swagger-test-cases-extensions/&quot;&gt;API Matic, a SDK/DX kits generator&lt;/a&gt; uses extension ton control SDK generation.&lt;/p&gt;

&lt;div&gt;
      &lt;img src=&quot;/images/writing-openapi-swagger-specification-tutorial-part-9-extending-the-openapi-specification/apimatic.png&quot; /&gt;
      
    &lt;/div&gt;

&lt;h1 id=&quot;example-3-server-code-generation&quot;&gt;Example 3: Server code generation&lt;/h1&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/swagger-api/swagger-node&quot;&gt;Swagger Node, a node module which help to build API implementation with a design first approach&lt;/a&gt; uses a &lt;code&gt;x-swagger-router-controller&lt;/code&gt; extension to link an API endpoint to its controller implementation.&lt;/p&gt;

&lt;div&gt;
      &lt;img src=&quot;/images/writing-openapi-swagger-specification-tutorial-part-9-extending-the-openapi-specification/swagger-node.png&quot; /&gt;
      
    &lt;/div&gt;

&lt;h1 id=&quot;example-4-api-gateway-configuration&quot;&gt;Example 4: API gateway configuration&lt;/h1&gt;

&lt;p&gt;Not only the AWS API gateway allows to import a Swagger/OpenAPI file but it also provides a &lt;a href=&quot;(http://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-swagger-extensions.html)&quot;&gt;complete set of extensions&lt;/a&gt; to configure how the API is linked to backend systems (like lambda).&lt;/p&gt;

&lt;div&gt;
      &lt;img src=&quot;/images/writing-openapi-swagger-specification-tutorial-part-9-extending-the-openapi-specification/aws-api-gateway.png&quot; /&gt;
      
    &lt;/div&gt;

&lt;h1 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h1&gt;
&lt;p&gt;This post concludes the OpenAPI/Swagger specification tutorial. You master now every single aspect of the OpenAPI specification and with this last post I hope to have given you some ideas to be creative to include this format in each step of the API lifecycle.&lt;/p&gt;</content><author><name>Arnaud Lauret</name></author><category term="posts" /><category term="OpenAPI" /><category term="Swagger" /><category term="API Specification" /><category term="Documentation" /><category term="API First" /><summary type="html">This is the end, my OpenAPI friends, the end. The end? Not really. This last part of the OpenAPI tutorial is a new beginning. With previous parts we have learned to master the OpenAPI specification but there’s a last thing to learn to unleash its full power: extensions. This format is easily extensible, it allows to add custom data within an API description. But for what purposes? Let’s have a glimpse of these extensions endless possibilities.</summary></entry><entry><title type="html">…And GraphQL for all? A few things to think about before blindly dumping REST for GraphQL</title><link href="https://apihandyman.io/and-graphql-for-all-a-few-things-to-think-about-before-blindly-dumping-rest-for-graphql/" rel="alternate" type="text/html" title="...And GraphQL for all? A few things to think about before blindly dumping REST for GraphQL" /><published>2017-01-22T00:00:00+00:00</published><updated>2017-01-22T00:00:00+00:00</updated><id>https://apihandyman.io/and-graphql-for-all</id><content type="html" xml:base="https://apihandyman.io/and-graphql-for-all-a-few-things-to-think-about-before-blindly-dumping-rest-for-graphql/">&lt;p&gt;GraphQL is new. GraphQL is cool. Look! Github dumped REST for it! We MUST do it too!&lt;br /&gt;
Well, why not. GraphQL could be a great tool, but like any tool, you don’t choose it &lt;em&gt;just because&lt;/em&gt;. You choose it because it solves a problem in a given context. You choose it knowing its strengths and weaknesses.&lt;/p&gt;

&lt;p&gt;While discovering what is GraphQL we will see what REST API providers should think about before blindly dumping REST for it. From design and implementation to pricing model and analytics down to developers experience and implementations, choosing an API design style will have impact on the whole API lifecycle. Therefore, this choice must be an enligthned one and not based on simple beliefs.&lt;!--more--&gt;&lt;/p&gt;

&lt;h1 id=&quot;informed-choice&quot;&gt;Informed choice&lt;/h1&gt;
&lt;p&gt;Before talking about GraphQL, I would like to ask you two really important questions.&lt;/p&gt;

&lt;p&gt;The first one is:&lt;/p&gt;
&lt;div&gt;
      &lt;img src=&quot;/images/and-graphql-for-all-a-few-things-to-think-about-before-blindly-dumping-rest-for-graphql/metallica-vs-iron-maiden.png&quot; /&gt;
      &lt;p class=&quot;img-label&quot;&gt;Metallica or Iron Maiden. Who is the best heavy metal band?&lt;/p&gt;
    &lt;/div&gt;

&lt;p&gt;Iron Maiden of course. You may disagre, that is your absolute right. Metallica could also the best metal band… For you. The answer to this question is only a matter of personnal feelings.&lt;/p&gt;

&lt;p&gt;The second question is:&lt;/p&gt;
&lt;div&gt;
      &lt;img src=&quot;/images/and-graphql-for-all-a-few-things-to-think-about-before-blindly-dumping-rest-for-graphql/hammer-vs-screndriver.png&quot; /&gt;
      &lt;p class=&quot;img-label&quot;&gt;Hammer or screwdriver. Which is the best tool?&lt;/p&gt;
    &lt;/div&gt;

&lt;p&gt;It’s a pretty dumb question isn’t it? The only possible answer to this question is &lt;em&gt;it depends&lt;/em&gt;.&lt;br /&gt;
It depends on the tools capabilities and the context (what you want to do, what is your environnement, your budget, your objective).&lt;/p&gt;

&lt;p&gt;Without context, my hammer cannot be better than your screwdriver.&lt;/p&gt;

&lt;p&gt;Acting as a fanboy may be acceptable when it comes to choose your favorite heavy metal band. But it’s definitely not a good idea when it comes to choose a tool, a product or an API style… From design and implementation to pricing model and analytics down to developers experience and backend implementations, choosing an API design style will have impact on the whole API lifecycle.&lt;/p&gt;

&lt;p&gt;So before blindly yelling &lt;em&gt;…and GraphQL for all!&lt;/em&gt; just because Facebook created it and Github decided to use it, remember that GraphQL, just like REST, is only a tool. A tool that you choose with a purpose within a certain context.&lt;/p&gt;

&lt;p&gt;Let’s dig into GraphQL and see what we should think about from a REST API provider prespective when evaluating it as a possible solution for our API projects.&lt;/p&gt;

&lt;h1 id=&quot;what-is-graphql&quot;&gt;What is GraphQL?&lt;/h1&gt;
&lt;p&gt;GraphQL is a query language for data created in 2012 by Facebook when switching to native mobile applications.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;We were frustrated with the differences between the data we wanted to use in our apps and the server queries they required.&lt;br /&gt;
GraphQL was our opportunity to rethink mobile app data-fetching from the perspective of product designers and developers. It moved the focus of development to the client apps, where designers and developers spend their time and attention.&lt;br /&gt;
&lt;em&gt;&lt;a href=&quot;https://code.facebook.com/posts/1691455094417024/graphql-a-data-query-language/&quot;&gt;GraphQL, a data query language. Post by Lee Byron&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Facebook &lt;a href=&quot;https://code.facebook.com/posts/1691455094417024/graphql-a-data-query-language/&quot;&gt;open sourced it in 2015&lt;/a&gt; and companies like &lt;a href=&quot;http://graphql.org/users/&quot;&gt;Pinterest, Coursera or Github&lt;/a&gt; started to use it.&lt;/p&gt;

&lt;p&gt;Let’s take a look at &lt;a href=&quot;https://developer.github.com/early-access/graphql/&quot;&gt;Github GraphQL API&lt;/a&gt; to discover GraphQL.&lt;/p&gt;

&lt;h2 id=&quot;what-you-want-is-what-you-get&quot;&gt;What you want is what you get&lt;/h2&gt;
&lt;p&gt;GraphQL motto is&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;What you want is what you get&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;querying-data&quot;&gt;Querying data&lt;/h3&gt;
&lt;p&gt;The Github GraphQL API propose a &lt;em&gt;viewer&lt;/em&gt; query, returning the connected User data. This query is the equivalent of &lt;code&gt;GET /user&lt;/code&gt; in the Github REST API. The difference with the REST query is that I can select the properties I want to retrieve.&lt;/p&gt;

&lt;p&gt;With this query, I retrieve only the viewer’s name and avatarURL.&lt;/p&gt;

&lt;div&gt;
  &lt;div class=&quot;code-toolbar&quot;&gt;
    &lt;div class=&quot;btn-group&quot; role=&quot;group&quot; aria-label=&quot;...&quot;&gt;
      
      &lt;button type=&quot;button&quot; class=&quot;btn btn-default btn-copy&quot;&gt;&lt;i class=&quot;fa fa-clipboard&quot; aria-hidden=&quot;true&quot;&gt;&lt;/i&gt;&lt;/button&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;pre class=&quot;language-graphql line-numbers&quot;&gt;&lt;code&gt;{
  viewer {
    name
    avatarURL
  }
}&lt;/code&gt;&lt;/pre&gt;
  
&lt;/div&gt;

&lt;p&gt;To get server’s response I have to POST this query in a JSON object to the GraphQL endpoint:&lt;/p&gt;

&lt;div&gt;
  &lt;div class=&quot;code-toolbar&quot;&gt;
    &lt;div class=&quot;btn-group&quot; role=&quot;group&quot; aria-label=&quot;...&quot;&gt;
      
      &lt;button type=&quot;button&quot; class=&quot;btn btn-default btn-copy&quot;&gt;&lt;i class=&quot;fa fa-clipboard&quot; aria-hidden=&quot;true&quot;&gt;&lt;/i&gt;&lt;/button&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;pre class=&quot;language-text line-numbers&quot;&gt;&lt;code&gt;POST https://api.github.com/graphql
{
 &amp;quot;query&amp;quot;: &amp;quot;{ me: viewer { name avatarURL} }&amp;quot;
}&lt;/code&gt;&lt;/pre&gt;
  
&lt;/div&gt;

&lt;p&gt;The result is in JSON format and the requested data are located in the data property. These data mirror perfectly my query.&lt;/p&gt;

&lt;div&gt;
  &lt;div class=&quot;code-toolbar&quot;&gt;
    &lt;div class=&quot;btn-group&quot; role=&quot;group&quot; aria-label=&quot;...&quot;&gt;
      
      &lt;button type=&quot;button&quot; class=&quot;btn btn-default btn-copy&quot;&gt;&lt;i class=&quot;fa fa-clipboard&quot; aria-hidden=&quot;true&quot;&gt;&lt;/i&gt;&lt;/button&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;pre class=&quot;language-json line-numbers&quot;&gt;&lt;code&gt;{
  &amp;quot;data&amp;quot;: {
    &amp;quot;viewer&amp;quot;: {
      &amp;quot;name&amp;quot;: &amp;quot;Arnaud Lauret&amp;quot;,
      &amp;quot;avatarURL&amp;quot;: &amp;quot;https://avatars0.githubusercontent.com/u/10104551?v=3&amp;quot;
    }
  }
}&lt;/code&gt;&lt;/pre&gt;
  
&lt;/div&gt;

&lt;h3 id=&quot;customizing-responses&quot;&gt;Customizing responses&lt;/h3&gt;
&lt;p&gt;You can create more custom data structures by using aliases.&lt;br /&gt;
Here, &lt;code&gt;viewer&lt;/code&gt; becomes &lt;code&gt;me&lt;/code&gt;, &lt;code&gt;name&lt;/code&gt; becomes &lt;code&gt;fullname&lt;/code&gt; and &lt;code&gt;avatarURL&lt;/code&gt; becomes &lt;code&gt;picture&lt;/code&gt;.&lt;/p&gt;

&lt;div&gt;
  &lt;div class=&quot;code-toolbar&quot;&gt;
    &lt;div class=&quot;btn-group&quot; role=&quot;group&quot; aria-label=&quot;...&quot;&gt;
      
      &lt;button type=&quot;button&quot; class=&quot;btn btn-default btn-copy&quot;&gt;&lt;i class=&quot;fa fa-clipboard&quot; aria-hidden=&quot;true&quot;&gt;&lt;/i&gt;&lt;/button&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;pre class=&quot;language-graphql line-numbers&quot;&gt;&lt;code&gt;{
  me: viewer {
    fullname: name
    picture: avatarURL
  }
}&lt;/code&gt;&lt;/pre&gt;
  
&lt;/div&gt;

&lt;p&gt;The result is exactly what I requested:&lt;/p&gt;

&lt;div&gt;
  &lt;div class=&quot;code-toolbar&quot;&gt;
    &lt;div class=&quot;btn-group&quot; role=&quot;group&quot; aria-label=&quot;...&quot;&gt;
      
      &lt;button type=&quot;button&quot; class=&quot;btn btn-default btn-copy&quot;&gt;&lt;i class=&quot;fa fa-clipboard&quot; aria-hidden=&quot;true&quot;&gt;&lt;/i&gt;&lt;/button&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;pre class=&quot;language-json line-numbers&quot;&gt;&lt;code&gt;{
  &amp;quot;data&amp;quot;: {
    &amp;quot;me&amp;quot;: {
      &amp;quot;fullname&amp;quot;: &amp;quot;Arnaud Lauret&amp;quot;,
      &amp;quot;picture&amp;quot;: &amp;quot;https://avatars0.githubusercontent.com/u/10104551?v=3&amp;quot;
    }
  }
}&lt;/code&gt;&lt;/pre&gt;
  
&lt;/div&gt;

&lt;h3 id=&quot;querying-sub-resources&quot;&gt;Querying sub-resources&lt;/h3&gt;
&lt;p&gt;Now let’s say I want to retrieve some viewer’s data and the names of his last two created repositories.&lt;/p&gt;

&lt;p&gt;To do that with the Github REST API, I need two calls:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;GET /user&lt;/code&gt; to get the viewer information&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;GET /user/repos?sort=created&amp;amp;direction=desc&lt;/code&gt; to get the repositories list. Unfortunately the API do not propose a length parameter for the list&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The responses will contains all available data, the REST API do not propose to filter returned properties.&lt;/p&gt;

&lt;p&gt;With GraphQL, I can do that with a single query:&lt;/p&gt;

&lt;div&gt;
  &lt;div class=&quot;code-toolbar&quot;&gt;
    &lt;div class=&quot;btn-group&quot; role=&quot;group&quot; aria-label=&quot;...&quot;&gt;
      
      &lt;button type=&quot;button&quot; class=&quot;btn btn-default btn-copy&quot;&gt;&lt;i class=&quot;fa fa-clipboard&quot; aria-hidden=&quot;true&quot;&gt;&lt;/i&gt;&lt;/button&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;pre class=&quot;language-graphql line-numbers&quot;&gt;&lt;code&gt;{
  me: viewer {
    fullname: name
    picture: avatarURL
    repositories(first: 2, orderBy: {field: CREATED_AT, direction: DESC}) {
      edges {
        node {
          name
        }
      }
    }
  }
}&lt;/code&gt;&lt;/pre&gt;
  
&lt;/div&gt;

&lt;p&gt;I just have to add the repositories property in my viewer query with the good parameters and indicate the properties I want to get back for each repository. The response contains exactly what I requested.&lt;/p&gt;

&lt;div&gt;
  &lt;div class=&quot;code-toolbar&quot;&gt;
    &lt;div class=&quot;btn-group&quot; role=&quot;group&quot; aria-label=&quot;...&quot;&gt;
      &lt;button type=&quot;button&quot; class=&quot;btn btn-default&quot; onclick=&quot;toggle(this, this.parentElement.parentElement.parentElement.children[1], this.parentElement.parentElement.parentElement.children[2].children[0])&quot;&gt;&lt;i class=&quot;fa fa-expand&quot; aria-hidden=&quot;true&quot;&gt;&lt;/i&gt;&lt;/button&gt;
      &lt;button type=&quot;button&quot; class=&quot;btn btn-default btn-copy&quot;&gt;&lt;i class=&quot;fa fa-clipboard&quot; aria-hidden=&quot;true&quot;&gt;&lt;/i&gt;&lt;/button&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;pre class=&quot;language-json line-numbers code-collapsed&quot;&gt;&lt;code&gt;{
  &amp;quot;data&amp;quot;: {
    &amp;quot;me&amp;quot;: {
      &amp;quot;fullname&amp;quot;: &amp;quot;Arnaud Lauret&amp;quot;,
      &amp;quot;picture&amp;quot;: &amp;quot;https://avatars0.githubusercontent.com/u/10104551?v=3&amp;quot;,
      &amp;quot;repositories&amp;quot;: {
        &amp;quot;edges&amp;quot;: [
          {
            &amp;quot;node&amp;quot;: {
              &amp;quot;name&amp;quot;: &amp;quot;apistylebook-api&amp;quot;
            }
          },
          {
            &amp;quot;node&amp;quot;: {
              &amp;quot;name&amp;quot;: &amp;quot;restfest-videos-data-postprocessor&amp;quot;
            }
          }
        ]
      }
    }
  }
}&lt;/code&gt;&lt;/pre&gt;
  &lt;div class=&quot;code-bottom-toolbar&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;btn btn-default btn-block&quot; onclick=&quot;toggle(this, this.parentElement.parentElement.children[1], this.parentElement.parentElement.children[0].children[0].children[0], true)&quot;&gt;&lt;i class=&quot;fa fa-expand&quot; aria-hidden=&quot;true&quot;&gt;&lt;/i&gt;&lt;/button&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;h3 id=&quot;aggregating-queries&quot;&gt;Aggregating queries&lt;/h3&gt;
&lt;p&gt;Not only can I seamlessly retrieve a resource and its sub resources, I can also make multiple different queries in one API call.&lt;/p&gt;

&lt;p&gt;Here I retrieve information about:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;me (the viewer)&lt;/li&gt;
  &lt;li&gt;two other users (Kin Lane and Mike Amundsen)&lt;/li&gt;
  &lt;li&gt;and a search on repositories&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;in a single request to the GraphQL server:&lt;/p&gt;

&lt;div&gt;
  &lt;div class=&quot;code-toolbar&quot;&gt;
    &lt;div class=&quot;btn-group&quot; role=&quot;group&quot; aria-label=&quot;...&quot;&gt;
      
      &lt;button type=&quot;button&quot; class=&quot;btn btn-default btn-copy&quot;&gt;&lt;i class=&quot;fa fa-clipboard&quot; aria-hidden=&quot;true&quot;&gt;&lt;/i&gt;&lt;/button&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;pre class=&quot;language-graphql line-numbers&quot;&gt;&lt;code&gt;{
  me:   viewer                 { name avatarURL }
  kin:  user(login: &amp;quot;kinlane&amp;quot;) { name avatarURL }
  mike: user(login: &amp;quot;mamund&amp;quot;)  { name avatarURL }
  graphqlRepos: search(first: 2, query: &amp;quot;graphql&amp;quot;, type: REPOSITORY) {
  	edges { node { ... on Repository {
      name
      description
    }}}  
  }
}&lt;/code&gt;&lt;/pre&gt;
  
&lt;/div&gt;

&lt;p&gt;The response contains all requested data:&lt;/p&gt;

&lt;div&gt;
  &lt;div class=&quot;code-toolbar&quot;&gt;
    &lt;div class=&quot;btn-group&quot; role=&quot;group&quot; aria-label=&quot;...&quot;&gt;
      &lt;button type=&quot;button&quot; class=&quot;btn btn-default&quot; onclick=&quot;toggle(this, this.parentElement.parentElement.parentElement.children[1], this.parentElement.parentElement.parentElement.children[2].children[0])&quot;&gt;&lt;i class=&quot;fa fa-expand&quot; aria-hidden=&quot;true&quot;&gt;&lt;/i&gt;&lt;/button&gt;
      &lt;button type=&quot;button&quot; class=&quot;btn btn-default btn-copy&quot;&gt;&lt;i class=&quot;fa fa-clipboard&quot; aria-hidden=&quot;true&quot;&gt;&lt;/i&gt;&lt;/button&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;pre class=&quot;language-json line-numbers code-collapsed&quot;&gt;&lt;code&gt;{
  &amp;quot;data&amp;quot;: {
    &amp;quot;me&amp;quot;: {
      &amp;quot;name&amp;quot;: &amp;quot;Arnaud Lauret&amp;quot;,
      &amp;quot;avatarURL&amp;quot;: &amp;quot;https://avatars0.githubusercontent.com/u/10104551?v=3&amp;quot;
    },
    &amp;quot;kin&amp;quot;: {
      &amp;quot;name&amp;quot;: &amp;quot;Kin Lane&amp;quot;,
      &amp;quot;avatarURL&amp;quot;: &amp;quot;https://avatars1.githubusercontent.com/u/56100?v=3&amp;quot;
    },
    &amp;quot;mike&amp;quot;: {
      &amp;quot;name&amp;quot;: &amp;quot;Mike Amundsen&amp;quot;,
      &amp;quot;avatarURL&amp;quot;: &amp;quot;https://avatars2.githubusercontent.com/u/38344?v=3&amp;quot;
    },
    &amp;quot;graphqlRepos&amp;quot;: {
      &amp;quot;edges&amp;quot;: [
        {
          &amp;quot;node&amp;quot;: {
            &amp;quot;name&amp;quot;: &amp;quot;graphql&amp;quot;,
            &amp;quot;description&amp;quot;: &amp;quot;GraphQL is a query language and execution engine tied to any backend service.&amp;quot;
          }
        },
        {
          &amp;quot;node&amp;quot;: {
            &amp;quot;name&amp;quot;: &amp;quot;graphql&amp;quot;,
            &amp;quot;description&amp;quot;: &amp;quot;An implementation of GraphQL for Go / Golang&amp;quot;
          }
        }
      ]
    }
  }
}&lt;/code&gt;&lt;/pre&gt;
  &lt;div class=&quot;code-bottom-toolbar&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;btn btn-default btn-block&quot; onclick=&quot;toggle(this, this.parentElement.parentElement.children[1], this.parentElement.parentElement.children[0].children[0].children[0], true)&quot;&gt;&lt;i class=&quot;fa fa-expand&quot; aria-hidden=&quot;true&quot;&gt;&lt;/i&gt;&lt;/button&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;h3 id=&quot;graphql-is-not-sql-nor-an-etl&quot;&gt;GraphQL is not SQL nor an ETL&lt;/h3&gt;
&lt;p&gt;GraphQL is really powerful but be warned that it’s not SQL nor an ETL, you can select the data you want, agregate queries, change names but not join queries or change the data structure.&lt;/p&gt;

&lt;p&gt;You cannot join queries like you would join tables in SQL.&lt;/p&gt;

&lt;div&gt;
  &lt;div class=&quot;code-toolbar&quot;&gt;
    &lt;div class=&quot;btn-group&quot; role=&quot;group&quot; aria-label=&quot;...&quot;&gt;
      
      &lt;button type=&quot;button&quot; class=&quot;btn btn-default btn-copy&quot;&gt;&lt;i class=&quot;fa fa-clipboard&quot; aria-hidden=&quot;true&quot;&gt;&lt;/i&gt;&lt;/button&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;pre class=&quot;language-sql line-numbers&quot;&gt;&lt;code&gt;SELECT * FROM A, B WHERE A.COL = B.COL&lt;/code&gt;&lt;/pre&gt;
  
&lt;/div&gt;

&lt;p&gt;You cannot select sub-properties or flatten objects. If I want to retrieve the name of my first repository without the edges and repo level, I cannot change this hierarchy:&lt;/p&gt;

&lt;div&gt;
  &lt;div class=&quot;code-toolbar&quot;&gt;
    &lt;div class=&quot;btn-group&quot; role=&quot;group&quot; aria-label=&quot;...&quot;&gt;
      
      &lt;button type=&quot;button&quot; class=&quot;btn btn-default btn-copy&quot;&gt;&lt;i class=&quot;fa fa-clipboard&quot; aria-hidden=&quot;true&quot;&gt;&lt;/i&gt;&lt;/button&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;pre class=&quot;language-json line-numbers&quot;&gt;&lt;code&gt;{
  &amp;quot;data&amp;quot;: {
    &amp;quot;me&amp;quot;: {
      &amp;quot;myFirstTwoRepos&amp;quot;: {
        &amp;quot;edges&amp;quot;: [
          {
            &amp;quot;repo&amp;quot;: {
              &amp;quot;name&amp;quot;: &amp;quot;apistylebook-api&amp;quot;
            }
          }
        ]
      }
    }
  }
}&lt;/code&gt;&lt;/pre&gt;
  
&lt;/div&gt;

&lt;p&gt;into this one:&lt;/p&gt;

&lt;div&gt;
  &lt;div class=&quot;code-toolbar&quot;&gt;
    &lt;div class=&quot;btn-group&quot; role=&quot;group&quot; aria-label=&quot;...&quot;&gt;
      
      &lt;button type=&quot;button&quot; class=&quot;btn btn-default btn-copy&quot;&gt;&lt;i class=&quot;fa fa-clipboard&quot; aria-hidden=&quot;true&quot;&gt;&lt;/i&gt;&lt;/button&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;pre class=&quot;language-json line-numbers&quot;&gt;&lt;code&gt;{
  &amp;quot;data&amp;quot;: {
    &amp;quot;me&amp;quot;: {
      &amp;quot;myFirstTwoRepos&amp;quot;:
        [
          {&amp;quot;name&amp;quot;: &amp;quot;apistylebook-api&amp;quot;}
        ]
      }
    }
  }
}&lt;/code&gt;&lt;/pre&gt;
  
&lt;/div&gt;

&lt;h2 id=&quot;schema-introspection-documentation&quot;&gt;Schema, introspection, documentation&lt;/h2&gt;
&lt;p&gt;All the available data are described within a schema.
This schema let you describe your data model like you would do with OpenAPI/Swagger, Blueprint or RAML specification.
The schema can be queried on runtime like all of the data.&lt;/p&gt;

&lt;p&gt;This query let me know what are the properties of the &lt;code&gt;User&lt;/code&gt; resource which is returned by the viewer and user query&lt;/p&gt;

&lt;div&gt;
  &lt;div class=&quot;code-toolbar&quot;&gt;
    &lt;div class=&quot;btn-group&quot; role=&quot;group&quot; aria-label=&quot;...&quot;&gt;
      
      &lt;button type=&quot;button&quot; class=&quot;btn btn-default btn-copy&quot;&gt;&lt;i class=&quot;fa fa-clipboard&quot; aria-hidden=&quot;true&quot;&gt;&lt;/i&gt;&lt;/button&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;pre class=&quot;language-graphql line-numbers&quot;&gt;&lt;code&gt;{
  __type(name:&amp;quot;User&amp;quot;) {
    fields {
      name
      description
    }
  }
}&lt;/code&gt;&lt;/pre&gt;
  
&lt;/div&gt;

&lt;p&gt;This schema can also be used to generate documentation:&lt;/p&gt;

&lt;div&gt;
      &lt;img src=&quot;/images/and-graphql-for-all-a-few-things-to-think-about-before-blindly-dumping-rest-for-graphql/documentation.png&quot; /&gt;
      &lt;p class=&quot;img-label&quot;&gt;GraphiQL documentation&lt;/p&gt;
    &lt;/div&gt;

&lt;h2 id=&quot;ecosystem&quot;&gt;Ecosystem&lt;/h2&gt;
&lt;p&gt;GraphQL do not comes alone, it’s a part of an ecosystem including:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Consumer libraries like &lt;a href=&quot;https://facebook.github.io/relay/&quot;&gt;Relay&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;API explorer &lt;a href=&quot;https://github.com/graphql/graphiql&quot;&gt;GraphiQL&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;And server libraries in &lt;a href=&quot;http://graphql.org/code/&quot;&gt;many different languages like Node, Ruby, Python, Java, Scala or Clojure&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;graphql-in-few-words&quot;&gt;GraphQL in few words&lt;/h2&gt;

&lt;p&gt;So basically with GraphQL you can&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Retrieve only the data you need on consumer side&lt;/li&gt;
  &lt;li&gt;Reduce the data volume returned by the server because you retrieve only what you need&lt;/li&gt;
  &lt;li&gt;Reduce the number of calls to retrieve data by seamlessly retrieving linked resources and agregating queries&lt;/li&gt;
  &lt;li&gt;Discover the schema you are querying&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And GraphQL comes with a full ecosystem which ease both API provider and consumer job.&lt;/p&gt;

&lt;p&gt;I have played with the &lt;a href=&quot;https://www.npmjs.com/package/graphql&quot;&gt;official node js library&lt;/a&gt; to create a GraphQL server and I was really impressed by how it was easy to achieve a proof of concept. You define your schema. You define resolver function for your resources, and bang! it’s done.&lt;/p&gt;

&lt;p&gt;If you want to discover GraphQL you should try the &lt;a href=&quot;https://learngraphql.com/&quot;&gt;tutorial available at learngraphql.com&lt;/a&gt; and play with the &lt;a href=&quot;https://developer.github.com/early-access/graphql/&quot;&gt;Github GraphQL API&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;what-graphql-could-mean-when-youre-acustomed-to-rest&quot;&gt;What GraphQL could mean when you’re acustomed to REST&lt;/h1&gt;
&lt;p&gt;This is very cool. My geek side is really excited about GraphQL. But Let’s keep a cool head and try to think about what GraphQL could mean for people acustomed to REST APIs? Let’s see what are some impacts on the consumer and provider sides.&lt;/p&gt;

&lt;h1 id=&quot;graphql-brings-a-different-developer-experience&quot;&gt;GraphQL brings a different developer experience&lt;/h1&gt;
&lt;p&gt;When people speak of GraphQL and developer experience, the main focus is on &lt;em&gt;what you want is what you get&lt;/em&gt; which is really a killer feature that can greatly enhance DX in a certain context. But as GraphQL offers a radically different DX than a REST API, some aspects should be investigated to evaluate if these changes can be real issues.&lt;/p&gt;

&lt;h2 id=&quot;being-protocol-agnostic-has-consequences-on-predictability-and-consistency&quot;&gt;Being protocol agnostic has consequences on predictability and consistency&lt;/h2&gt;
&lt;p&gt;GraphQL is protocol agnostic, it means that you can use it with any protocol as long as you can send and retrieve a string. This can be useful but people acustomed to using the HTTP protocol with REST API should then be aware that, when used over HTTP, GraphQL do not use any of its features and it has consequences on DX.&lt;/p&gt;

&lt;h3 id=&quot;reading-and-writing-resources&quot;&gt;Reading and writing resources&lt;/h3&gt;
&lt;p&gt;With a REST API, if I retrieve a user’s data with &lt;code&gt;GET /users/{id}&lt;/code&gt;, I can try to update it with &lt;code&gt;PATCH /users/{id}&lt;/code&gt; and delete it with &lt;code&gt;DELETE /users/{id}&lt;/code&gt; without even reading the documentation and it will probably work… like it will work with another another resource in the same API and even with another resource in another REST API.
And icing on the cake: both humans and machines can discover and understand the meaning of each operation.
Using the HTTP protocol enforce a certain consistency and allow predictability.&lt;/p&gt;

&lt;p&gt;In a GraphQL API, reading and writing actions are separated in 2 sets of queries.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;query for reading&lt;/li&gt;
  &lt;li&gt;mutation for writing&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Machines will only be able to understand that a query do not modify underlying system and a mutation does, all other semantic will be based on naming conventions.&lt;/p&gt;

&lt;p&gt;If I get a user with the query user:&lt;/p&gt;

&lt;div&gt;
  &lt;div class=&quot;code-toolbar&quot;&gt;
    &lt;div class=&quot;btn-group&quot; role=&quot;group&quot; aria-label=&quot;...&quot;&gt;
      
      &lt;button type=&quot;button&quot; class=&quot;btn btn-default btn-copy&quot;&gt;&lt;i class=&quot;fa fa-clipboard&quot; aria-hidden=&quot;true&quot;&gt;&lt;/i&gt;&lt;/button&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;pre class=&quot;language-graphql line-numbers&quot;&gt;&lt;code&gt;query {
  user(id: &amp;quot;{id}&amp;quot;) {
    name
  }
}&lt;/code&gt;&lt;/pre&gt;
  
&lt;/div&gt;

&lt;p&gt;Updating or deleting this user with GraphQL will not be as clear as with REST.
How will be named the mutation allowing me to delete a user? &lt;code&gt;deleteUser&lt;/code&gt;, &lt;code&gt;removeUser&lt;/code&gt; or &lt;code&gt;suppressPeople&lt;/code&gt;?
You’ll have to dig in the documentation to find out. You cannot guess it because different API providers will have different naming conventions and these naming convention may event not be consistent within an API.&lt;/p&gt;

&lt;div&gt;
  &lt;div class=&quot;code-toolbar&quot;&gt;
    &lt;div class=&quot;btn-group&quot; role=&quot;group&quot; aria-label=&quot;...&quot;&gt;
      
      &lt;button type=&quot;button&quot; class=&quot;btn btn-default btn-copy&quot;&gt;&lt;i class=&quot;fa fa-clipboard&quot; aria-hidden=&quot;true&quot;&gt;&lt;/i&gt;&lt;/button&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;pre class=&quot;language-graphql line-numbers&quot;&gt;&lt;code&gt;mutation {
  deleteUser(id: &amp;quot;{id}&amp;quot;)
  removeUser(id: &amp;quot;{id}&amp;quot;)
  suppressPeople(id: &amp;quot;{id}&amp;quot;)
}&lt;/code&gt;&lt;/pre&gt;
  
&lt;/div&gt;

&lt;h3 id=&quot;handling-errors&quot;&gt;Handling errors&lt;/h3&gt;
&lt;p&gt;Being protocol agnostic also means that everything is going to be &lt;code&gt;200 OK&lt;/code&gt; when using GraphQL over HTTP, wheither the query was OK or not. With REST APIs we are acustomed to be able to tell what happens just by looking at the HTTP status. Whatever the API, if we receive a &lt;code&gt;404&lt;/code&gt; HTTP status we known what it means: &lt;em&gt;resource not found&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;If I try to retrieve a user that do not exists with a GraphQL API:&lt;/p&gt;

&lt;div&gt;
  &lt;div class=&quot;code-toolbar&quot;&gt;
    &lt;div class=&quot;btn-group&quot; role=&quot;group&quot; aria-label=&quot;...&quot;&gt;
      
      &lt;button type=&quot;button&quot; class=&quot;btn btn-default btn-copy&quot;&gt;&lt;i class=&quot;fa fa-clipboard&quot; aria-hidden=&quot;true&quot;&gt;&lt;/i&gt;&lt;/button&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;pre class=&quot;language-graphql line-numbers&quot;&gt;&lt;code&gt;{
  user(login: &amp;quot;dummy-user-123&amp;quot;) {name}
}&lt;/code&gt;&lt;/pre&gt;
  
&lt;/div&gt;

&lt;p&gt;I get this GraphQL standard error with a text message telling me the user do no exists.:&lt;/p&gt;

&lt;div&gt;
  &lt;div class=&quot;code-toolbar&quot;&gt;
    &lt;div class=&quot;btn-group&quot; role=&quot;group&quot; aria-label=&quot;...&quot;&gt;
      
      &lt;button type=&quot;button&quot; class=&quot;btn btn-default btn-copy&quot;&gt;&lt;i class=&quot;fa fa-clipboard&quot; aria-hidden=&quot;true&quot;&gt;&lt;/i&gt;&lt;/button&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;pre class=&quot;language-json line-numbers&quot;&gt;&lt;code&gt;{
  &amp;quot;data&amp;quot;: {
    &amp;quot;user&amp;quot;: null
  },
  &amp;quot;errors&amp;quot;: [
    {
      &amp;quot;message&amp;quot;: &amp;quot;Could not resolve to a User with the login of &amp;#39;dummy-user-123&amp;#39;.&amp;quot;,
      &amp;quot;locations&amp;quot;: [
        {
          &amp;quot;line&amp;quot;: 2,
          &amp;quot;column&amp;quot;: 3
        }
      ],
      &amp;quot;path&amp;quot;: [
        &amp;quot;user&amp;quot;
      ]
    }
  ]
}&lt;/code&gt;&lt;/pre&gt;
  
&lt;/div&gt;

&lt;p&gt;If I forget the login parameter:&lt;/p&gt;

&lt;div&gt;
  &lt;div class=&quot;code-toolbar&quot;&gt;
    &lt;div class=&quot;btn-group&quot; role=&quot;group&quot; aria-label=&quot;...&quot;&gt;
      
      &lt;button type=&quot;button&quot; class=&quot;btn btn-default btn-copy&quot;&gt;&lt;i class=&quot;fa fa-clipboard&quot; aria-hidden=&quot;true&quot;&gt;&lt;/i&gt;&lt;/button&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;pre class=&quot;language-graphql line-numbers&quot;&gt;&lt;code&gt;{
  user { name }
}&lt;/code&gt;&lt;/pre&gt;
  
&lt;/div&gt;

&lt;p&gt;I get exactly the same error format:&lt;/p&gt;

&lt;div&gt;
  &lt;div class=&quot;code-toolbar&quot;&gt;
    &lt;div class=&quot;btn-group&quot; role=&quot;group&quot; aria-label=&quot;...&quot;&gt;
      
      &lt;button type=&quot;button&quot; class=&quot;btn btn-default btn-copy&quot;&gt;&lt;i class=&quot;fa fa-clipboard&quot; aria-hidden=&quot;true&quot;&gt;&lt;/i&gt;&lt;/button&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;pre class=&quot;language-json line-numbers&quot;&gt;&lt;code&gt;{
  &amp;quot;data&amp;quot;: null,
  &amp;quot;errors&amp;quot;: [
    {
      &amp;quot;message&amp;quot;: &amp;quot;Field &amp;#39;user&amp;#39; is missing required arguments: login&amp;quot;,
      &amp;quot;locations&amp;quot;: [
        {
          &amp;quot;line&amp;quot;: 2,
          &amp;quot;column&amp;quot;: 3
        }
      ]
    }
  ]
}&lt;/code&gt;&lt;/pre&gt;
  
&lt;/div&gt;

&lt;p&gt;The message shows me explicitely what the problem is, but I cannot determine the error type programmatically in a generic way. These errors are not really fit to be analyzed automatically by machines. Of course there’s obviously a pattern in the message but will this message have the same pattern for another resource or use case? Will this pattern be consistent as the API evolve? And will I find exactly the same pattern in another GraphQL API?&lt;/p&gt;

&lt;h2 id=&quot;graphql-focuses-on-data-and-not-actions&quot;&gt;GraphQL focuses on data and not actions&lt;/h2&gt;
&lt;p&gt;A well design REST API implementing hypermedia is able to tell you what are the resources connected to the resource you just get but it can also provide the possible affordances to tell you what you can do. With an hypermedia API you’ll be able to describe a complex process step by step providing information about the next requests you can do. But be aware that if HTTP protocol ensure a certain consistency across APIs concering resources manipulation, the hypermedia aspect of REST APIs is not standardized even if some format like Siren, Hydra or HAL exist.&lt;/p&gt;

&lt;p&gt;A GraphQL API focus on data, you read data, you write data. But these aspects are totally disconnected and, for now, describing affordance is not a GraphQL feature. You can of course rely on documentation to describe these processes but therefore machines will not be able to handle that automatically. Looking at how it’s implemented in REST API, I’m sure that sooner or later we will have such features in GraphQL.&lt;/p&gt;

&lt;h2 id=&quot;cache&quot;&gt;Cache&lt;/h2&gt;
&lt;p&gt;Caching data is always a tricky thing. With a REST API, a consumer could rely on HTTP caching system and could rely on HTTP caching data provide in response’s header to build it’s own cache.
With GraphQL there’s no such mecanism, for now, you’ll have to rely totally on the client to handle cache. Hopefully client library like Facebook’s Relay propose a complex cache system but as GraphQL do not provide information about how long the data are valid, it will be up to the consumer to choose when to refresh the cache.
I’m sure that as GraphQL evolve, we will have better cache mecanism in the future.&lt;/p&gt;

&lt;h2 id=&quot;does-graphql-offer-a-good-or-bad-dx&quot;&gt;Does GraphQL offer a good or bad DX?&lt;/h2&gt;
&lt;p&gt;So with GraphQL you gain great flexibility when querying data but you lose a certain predictability and consistency inside an API and across APIs. You may also not clearly see what you can do with these data and GraphQL gives more responsability on the client side to cache these data.
Is this a problem?. Like always, the answer to this question will depend on the context. You just have to think about these elements (and probably others) regarding your context to determine if it’s a problem or an advantage.&lt;/p&gt;

&lt;h1 id=&quot;graphql-does-not-ease-api-provider-job-and-brings-new-challenges&quot;&gt;GraphQL does not ease API provider job and brings new challenges&lt;/h1&gt;
&lt;p&gt;Let’s see now what GraphQL means on the provider side.&lt;/p&gt;

&lt;p&gt;First, let me be clear:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;If you suck at providing REST API, you WILL suck at providing GraphQL API.&lt;br /&gt;
&lt;em&gt;Arnaud Lauret, API Handyman&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;GraphQL may bring new challenges and questions on the provider side but it mainly highlights matters that you should master whatever the type of API you provide.&lt;/p&gt;

&lt;h2 id=&quot;graphql-will-not-solve-your-api-design-problems&quot;&gt;GraphQL will not solve your API design problems&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;What the hell is this &lt;code&gt;amsus2&lt;/code&gt; field?
Anonym consumer&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;After a in-depth analysis of a use case or a problem, you may come to the &lt;em&gt;logical and enligtened&lt;/em&gt; conclusion that GraphQL is the most appropriate solution instead of REST &lt;em&gt;regarding the context&lt;/em&gt;. Be warned that GraphQL is not a magic thing that you just put on top of a good old database or existing system and it’s over.&lt;/p&gt;

&lt;p&gt;Don’t dare to think: &lt;em&gt;We have data, let people decide how to query them and what to make of them!&lt;/em&gt;. Don’t forget that a GraphQL API is STILL an API. It’s supposed to be a consumer friendly abstraction of a usually complex underlying system.&lt;/p&gt;

&lt;p&gt;Remember all the terrible things you’ve done while designing crappy REST APIs. API without really defined purpose, dumb database mapping, dumb legacy service mapping, dumb internal organization and processes exposition … 
A GraphQL API, just like a REST one, must be created with a purpose and designed from an outside in perpective and not an inside out one.&lt;/p&gt;

&lt;p&gt;If you don’t do that, be ready for a total failure.&lt;/p&gt;

&lt;p&gt;We have seen while talking about Developer Experience that queries and mutations are disconnected and that consumer can only rely on mutation’s name and documentation to know what they’re up to. You will have to increase control on design because naming thing consistently is hard and you’ll definitely need consistency to help consumers understand how your query and mutations are connected and what mutations actually do. If you know some people who were involved in SOA governance in the SOAP protocol era you may call them because they have faced such things.&lt;/p&gt;

&lt;h2 id=&quot;graphql-will-not-solve-your-api-documentation-problems&quot;&gt;GraphQL will not solve your API documentation problems&lt;/h2&gt;
&lt;p&gt;A GraphQL API comes with an integrated documentation system describing the schema that can be queried.
You can discover the available queries and the data returned.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;A5 Amsus2 B B5 B7 B7/D# C C5 C#5 Cadd9 D D5 D#5 E5 Em F#m G&lt;br /&gt;
&lt;em&gt;Master of Puppets Guitar Chords&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This is the list of guitar chords you need to play Master Of Puppets. Having only this list, and without being a guitar hero, will you be able to play the song? Well maybe … after a very long struggle.&lt;/p&gt;

&lt;p&gt;An interface contract description, an inventory of queries and objects, was, is and will &lt;em&gt;NEVER&lt;/em&gt; be the API documentation, it’s only a part of it. It’s just like providing guitar chords without explaing how to chain them to play a song. How to connect? How is handled rate limiting? How is handle security? How to respond to this use case? Code snippets, SDK, tutorials …&lt;/p&gt;

&lt;p&gt;API documentation is something that go way beyond the description of its interface contract. Don’t forget that the API itself and its documentation are the main ingredients of a good developer experience. Without a good DX, no users, no business.&lt;/p&gt;

&lt;p&gt;So don’t be fooled by this kind of documentation and note that also applies to REST APIs when you use API description format like OpenAPI, Swagger, RAML of Blueprint.&lt;/p&gt;

&lt;h2 id=&quot;graphql-may-have-unexpected-side-effects-and-data-volumes-and-server-usage&quot;&gt;GraphQL may have unexpected side effects and data volumes and server usage&lt;/h2&gt;
&lt;p&gt;With GraphQL, what you want is what you get. But you always have to explicitely tell what you want, there’s no &lt;code&gt;select * from user&lt;/code&gt; like in SQL. So on each request, consumers have to send a full query.&lt;/p&gt;

&lt;p&gt;Where you would have a simple &lt;code&gt;GET /dashboard&lt;/code&gt; with a REST API, you may end with a huge GraphQL query.
In some use case, you may reach your input bandwidth limit because the number of requests has not really diminished but the requests size has increased. Remember that not everybody has a fully scalable cloud infrastructure with illimited bandwidth.&lt;/p&gt;

&lt;p&gt;Proposing a smart system allowing consumers to retrieve in one shot what they want do not mean that it will be used wisely. Some lazy consumers may simply fired huge requests retrieving far more data than they really need. Some huge and complex request may impact all you infrastructure, so you should really think about your GraphQL schema and what runs behind it, because you’re giving the full power to consumers.&lt;/p&gt;

&lt;h2 id=&quot;graphql-may-force-you-to-rethink-api-analytics-and-pricing-model&quot;&gt;GraphQL may force you to rethink API analytics and pricing model&lt;/h2&gt;
&lt;p&gt;If you were relying on HTTP access logs for rate limiting, API analytics and billing you will have to find a new way to handle that. The most important impact will be on pricing model and billing: how to make people pay when you have a single endpoint allowing to do what you want like you want? Counting queries and mutations can be agood start, you’ll maybe have to include data volume and queries depth in your calculations to design a new pricing model. Getting these new variables will probably have impacts on your API tooling, especially your API gateway.&lt;/p&gt;

&lt;h2 id=&quot;does-graphql-offer-a-good-or-a-bad-px-provider-experience&quot;&gt;Does GraphQL offer a good or a bad PX (provider experience)?&lt;/h2&gt;
&lt;p&gt;Providing a GraphQL API will not make you magically a better API provider. You still have to design and document your API, you still have to create the best architecture and infrastructure, you still have to define a pricing model. Providing GraphQL API brings the same challenges has providing REST API with a few subtles differences that you must be aware of to choose the right API style for the right context.&lt;/p&gt;

&lt;h1 id=&quot;should-i-choose-graphql-or-rest&quot;&gt;Should I choose GraphQL or REST?&lt;/h1&gt;
&lt;p&gt;In conclusion, GraphQL is really a powerful and interesting technology that impacts deeply both API provider and consumer who are acustomed to REST APIs. It’s a new technology that may need some improvments, that will surely come.&lt;/p&gt;

&lt;p&gt;You MUST see it as a new tool in your API toolbox alongside REST and Streaming APIs. A new tool that you will choose wisely regarding your context. And don’t forget that sometime you’ll need a hammer AND a screwdriver to build awesome things.&lt;/p&gt;

&lt;p&gt;Now I hope you will be able to the answer this really important question:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;REST or GraphQL.&lt;br /&gt;
Which one is the best API style?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;You’re supposed to yell &lt;em&gt;it depends!&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;This post is a writeup of my &lt;a href=&quot;https://speakerdeck.com/arnaudlauret/dot-dot-dot-and-graphql-for-all-a-few-things-to-think-about-before-blindly-dumping-rest-for-graphql&quot;&gt;API Days Paris 2017 talk&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;</content><author><name>Arnaud Lauret</name></author><category term="posts" /><summary type="html">GraphQL is new. GraphQL is cool. Look! Github dumped REST for it! We MUST do it too!
Well, why not. GraphQL could be a great tool, but like any tool, you don’t choose it just because. You choose it because it solves a problem in a given context. You choose it knowing its strengths and weaknesses.

While discovering what is GraphQL we will see what REST API providers should think about before blindly dumping REST for it. From design and implementation to pricing model and analytics down to developers experience and implementations, choosing an API design style will have impact on the whole API lifecycle. Therefore, this choice must be an enligthned one and not based on simple beliefs.</summary></entry><entry><title type="html">Dr Jekyll and Mr API Handyman</title><link href="https://apihandyman.io/dr-jekyll-and-mr-api-handyman/" rel="alternate" type="text/html" title="Dr Jekyll and Mr API Handyman" /><published>2016-12-23T00:00:00+00:00</published><updated>2016-12-23T00:00:00+00:00</updated><id>https://apihandyman.io/dr-jekyll-and-mr-api-handyman</id><content type="html" xml:base="https://apihandyman.io/dr-jekyll-and-mr-api-handyman/">&lt;p&gt;ICYMI, I’ve just switched from a self hosted Wordpress to a Jekyll static website hosted on Github. The code is available in the &lt;a href=&quot;https://github.com/arno-di-loreto/apihandyman.io&quot;&gt;apihandyman.io repository&lt;/a&gt;. If you’re looking for information and tips about how to enable pagination on categories pages and have infinite scroll with Jekyll or how to to deploy a Jekyll website using custom plugins on Github Pages, you should take a look at it.&lt;/p&gt;</content><author><name>Arnaud Lauret</name></author><category term="elsewhere" /><summary type="html">ICYMI, I’ve just switched from a self hosted Wordpress to a Jekyll static website hosted on Github. The code is available in the apihandyman.io repository. If you’re looking for information and tips about how to enable pagination on categories pages and have infinite scroll with Jekyll or how to to deploy a Jekyll website using custom plugins on Github Pages, you should take a look at it.</summary></entry><entry><title type="html">Read Evolving a Company’s IS in the Lego Computing Age on Nordic APIs blog</title><link href="https://apihandyman.io/read-evolving-a-companys-is-in-the-lego-computing-age-on-nordic-apis-blog/" rel="alternate" type="text/html" title="Read Evolving a Company’s IS in the Lego Computing Age on Nordic APIs blog" /><published>2016-12-06T00:00:00+00:00</published><updated>2016-12-06T00:00:00+00:00</updated><id>https://apihandyman.io/read-evolving-a-companys-is-in-the-lego-computing-age-on-nordic-apis-blog</id><content type="html" xml:base="https://apihandyman.io/read-evolving-a-companys-is-in-the-lego-computing-age-on-nordic-apis-blog/">&lt;p&gt;If you wonder how to evolve a company’s IS in the lego computing age, read &lt;a href=&quot;http://nordicapis.com/evolving-companys-lego-computing-age-choose-brick-product/&quot;&gt;my post on Nordic APIs blog&lt;/a&gt;.&lt;/p&gt;</content><author><name>Arnaud Lauret</name></author><category term="elsewhere" /><category term="Governance" /><category term="Strategy" /><category term="Implementation" /><category term="Architecture" /><summary type="html">If you wonder how to evolve a company’s IS in the lego computing age, read my post on Nordic APIs blog.</summary></entry></feed>
